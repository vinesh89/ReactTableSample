{"ast":null,"code":"var _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) {\n  return typeof obj;\n} : function (obj) {\n  return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n};\n/* Tabulator v4.1.3 (c) Oliver Folkerd */\n\n\n;\n\n(function (global, factory) {\n  if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object' && typeof module !== 'undefined') {\n    module.exports = factory();\n  } else if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else {\n    global.Tabulator = factory();\n  }\n})(this, function () {\n  'use strict'; // https://tc39.github.io/ecma262/#sec-array.prototype.findIndex\n\n  if (!Array.prototype.findIndex) {\n    Object.defineProperty(Array.prototype, 'findIndex', {\n      value: function value(predicate) {\n        // 1. Let O be ? ToObject(this value).\n        if (this == null) {\n          throw new TypeError('\"this\" is null or not defined');\n        }\n\n        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n        var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n\n        if (typeof predicate !== 'function') {\n          throw new TypeError('predicate must be a function');\n        } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n        var thisArg = arguments[1]; // 5. Let k be 0.\n\n        var k = 0; // 6. Repeat, while k < len\n\n        while (k < len) {\n          // a. Let Pk be ! ToString(k).\n          // b. Let kValue be ? Get(O, Pk).\n          // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n          // d. If testResult is true, return k.\n          var kValue = o[k];\n\n          if (predicate.call(thisArg, kValue, k, o)) {\n            return k;\n          } // e. Increase k by 1.\n\n\n          k++;\n        } // 7. Return -1.\n\n\n        return -1;\n      }\n    });\n  } // https://tc39.github.io/ecma262/#sec-array.prototype.find\n\n\n  if (!Array.prototype.find) {\n    Object.defineProperty(Array.prototype, 'find', {\n      value: function value(predicate) {\n        // 1. Let O be ? ToObject(this value).\n        if (this == null) {\n          throw new TypeError('\"this\" is null or not defined');\n        }\n\n        var o = Object(this); // 2. Let len be ? ToLength(? Get(O, \"length\")).\n\n        var len = o.length >>> 0; // 3. If IsCallable(predicate) is false, throw a TypeError exception.\n\n        if (typeof predicate !== 'function') {\n          throw new TypeError('predicate must be a function');\n        } // 4. If thisArg was supplied, let T be thisArg; else let T be undefined.\n\n\n        var thisArg = arguments[1]; // 5. Let k be 0.\n\n        var k = 0; // 6. Repeat, while k < len\n\n        while (k < len) {\n          // a. Let Pk be ! ToString(k).\n          // b. Let kValue be ? Get(O, Pk).\n          // c. Let testResult be ToBoolean(? Call(predicate, T, « kValue, k, O »)).\n          // d. If testResult is true, return kValue.\n          var kValue = o[k];\n\n          if (predicate.call(thisArg, kValue, k, o)) {\n            return kValue;\n          } // e. Increase k by 1.\n\n\n          k++;\n        } // 7. Return undefined.\n\n\n        return undefined;\n      }\n    });\n  }\n\n  var ColumnManager = function ColumnManager(table) {\n    this.table = table; //hold parent table\n\n    this.headersElement = this.createHeadersElement();\n    this.element = this.createHeaderElement(); //containing element\n\n    this.rowManager = null; //hold row manager object\n\n    this.columns = []; // column definition object\n\n    this.columnsByIndex = []; //columns by index\n\n    this.columnsByField = []; //columns by field\n\n    this.scrollLeft = 0;\n    this.element.insertBefore(this.headersElement, this.element.firstChild);\n  }; ////////////// Setup Functions /////////////////\n\n\n  ColumnManager.prototype.createHeadersElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-headers\");\n    return el;\n  };\n\n  ColumnManager.prototype.createHeaderElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-header\");\n    return el;\n  }; //link to row manager\n\n\n  ColumnManager.prototype.setRowManager = function (manager) {\n    this.rowManager = manager;\n  }; //return containing element\n\n\n  ColumnManager.prototype.getElement = function () {\n    return this.element;\n  }; //return header containing element\n\n\n  ColumnManager.prototype.getHeadersElement = function () {\n    return this.headersElement;\n  }; //scroll horizontally to match table body\n\n\n  ColumnManager.prototype.scrollHorizontal = function (left) {\n    var hozAdjust = 0,\n        scrollWidth = this.element.scrollWidth - this.table.element.clientWidth;\n    this.element.scrollLeft = left; //adjust for vertical scrollbar moving table when present\n\n    if (left > scrollWidth) {\n      hozAdjust = left - scrollWidth;\n      this.element.style.marginLeft = -hozAdjust + \"px\";\n    } else {\n      this.element.style.marginLeft = 0;\n    } //keep frozen columns fixed in position\n    //this._calcFrozenColumnsPos(hozAdjust + 3);\n\n\n    this.scrollLeft = left;\n\n    if (this.table.modExists(\"frozenColumns\")) {\n      this.table.modules.frozenColumns.layout();\n    }\n  }; ///////////// Column Setup Functions /////////////\n\n\n  ColumnManager.prototype.setColumns = function (cols, row) {\n    var self = this;\n\n    while (self.headersElement.firstChild) {\n      self.headersElement.removeChild(self.headersElement.firstChild);\n    }\n\n    self.columns = [];\n    self.columnsByIndex = [];\n    self.columnsByField = []; //reset frozen columns\n\n    if (self.table.modExists(\"frozenColumns\")) {\n      self.table.modules.frozenColumns.reset();\n    }\n\n    cols.forEach(function (def, i) {\n      self._addColumn(def);\n    });\n\n    self._reIndexColumns();\n\n    if (self.table.options.responsiveLayout && self.table.modExists(\"responsiveLayout\", true)) {\n      self.table.modules.responsiveLayout.initialize();\n    }\n\n    self.redraw(true);\n  };\n\n  ColumnManager.prototype._addColumn = function (definition, before, nextToColumn) {\n    var column = new Column(definition, this),\n        colEl = column.getElement(),\n        index = nextToColumn ? this.findColumnIndex(nextToColumn) : nextToColumn;\n\n    if (nextToColumn && index > -1) {\n      var parentIndex = this.columns.indexOf(nextToColumn.getTopColumn());\n      var nextEl = nextToColumn.getElement();\n\n      if (before) {\n        this.columns.splice(parentIndex, 0, column);\n        nextEl.parentNode.insertBefore(colEl, nextEl);\n      } else {\n        this.columns.splice(parentIndex + 1, 0, column);\n        nextEl.parentNode.insertBefore(colEl, nextEl.nextSibling);\n      }\n    } else {\n      if (before) {\n        this.columns.unshift(column);\n        this.headersElement.insertBefore(column.getElement(), this.headersElement.firstChild);\n      } else {\n        this.columns.push(column);\n        this.headersElement.appendChild(column.getElement());\n      }\n    }\n\n    return column;\n  };\n\n  ColumnManager.prototype.registerColumnField = function (col) {\n    if (col.definition.field) {\n      this.columnsByField[col.definition.field] = col;\n    }\n  };\n\n  ColumnManager.prototype.registerColumnPosition = function (col) {\n    this.columnsByIndex.push(col);\n  };\n\n  ColumnManager.prototype._reIndexColumns = function () {\n    this.columnsByIndex = [];\n    this.columns.forEach(function (column) {\n      column.reRegisterPosition();\n    });\n  }; //ensure column headers take up the correct amount of space in column groups\n\n\n  ColumnManager.prototype._verticalAlignHeaders = function () {\n    var self = this,\n        minHeight = 0;\n    self.columns.forEach(function (column) {\n      var height;\n      column.clearVerticalAlign();\n      height = column.getHeight();\n\n      if (height > minHeight) {\n        minHeight = height;\n      }\n    });\n    self.columns.forEach(function (column) {\n      column.verticalAlign(self.table.options.columnVertAlign, minHeight);\n    });\n    self.rowManager.adjustTableSize();\n  }; //////////////// Column Details /////////////////\n\n\n  ColumnManager.prototype.findColumn = function (subject) {\n    var self = this;\n\n    if ((typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) == \"object\") {\n      if (subject instanceof Column) {\n        //subject is column element\n        return subject;\n      } else if (subject instanceof ColumnComponent) {\n        //subject is public column component\n        return subject._getSelf() || false;\n      } else if (subject instanceof HTMLElement) {\n        //subject is a HTML element of the column header\n        var match = self.columns.find(function (column) {\n          return column.element === subject;\n        });\n        return match || false;\n      }\n    } else {\n      //subject should be treated as the field name of the column\n      return this.columnsByField[subject] || false;\n    } //catch all for any other type of input\n\n\n    return false;\n  };\n\n  ColumnManager.prototype.getColumnByField = function (field) {\n    return this.columnsByField[field];\n  };\n\n  ColumnManager.prototype.getColumnByIndex = function (index) {\n    return this.columnsByIndex[index];\n  };\n\n  ColumnManager.prototype.getColumns = function () {\n    return this.columns;\n  };\n\n  ColumnManager.prototype.findColumnIndex = function (column) {\n    return this.columnsByIndex.findIndex(function (col) {\n      return column === col;\n    });\n  }; //return all columns that are not groups\n\n\n  ColumnManager.prototype.getRealColumns = function () {\n    return this.columnsByIndex;\n  }; //travers across columns and call action\n\n\n  ColumnManager.prototype.traverse = function (callback) {\n    var self = this;\n    self.columnsByIndex.forEach(function (column, i) {\n      callback(column, i);\n    });\n  }; //get defintions of actual columns\n\n\n  ColumnManager.prototype.getDefinitions = function (active) {\n    var self = this,\n        output = [];\n    self.columnsByIndex.forEach(function (column) {\n      if (!active || active && column.visible) {\n        output.push(column.getDefinition());\n      }\n    });\n    return output;\n  }; //get full nested definition tree\n\n\n  ColumnManager.prototype.getDefinitionTree = function () {\n    var self = this,\n        output = [];\n    self.columns.forEach(function (column) {\n      output.push(column.getDefinition(true));\n    });\n    return output;\n  };\n\n  ColumnManager.prototype.getComponents = function (structured) {\n    var self = this,\n        output = [],\n        columns = structured ? self.columns : self.columnsByIndex;\n    columns.forEach(function (column) {\n      output.push(column.getComponent());\n    });\n    return output;\n  };\n\n  ColumnManager.prototype.getWidth = function () {\n    var width = 0;\n    this.columnsByIndex.forEach(function (column) {\n      if (column.visible) {\n        width += column.getWidth();\n      }\n    });\n    return width;\n  };\n\n  ColumnManager.prototype.moveColumn = function (from, to, after) {\n    this._moveColumnInArray(this.columns, from, to, after);\n\n    this._moveColumnInArray(this.columnsByIndex, from, to, after, true);\n\n    if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n      this.table.modules.responsiveLayout.initialize();\n    }\n\n    if (this.table.options.columnMoved) {\n      this.table.options.columnMoved.call(this.table, from.getComponent(), this.table.columnManager.getComponents());\n    }\n\n    if (this.table.options.persistentLayout && this.table.modExists(\"persistence\", true)) {\n      this.table.modules.persistence.save(\"columns\");\n    }\n  };\n\n  ColumnManager.prototype._moveColumnInArray = function (columns, from, to, after, updateRows) {\n    var fromIndex = columns.indexOf(from),\n        toIndex;\n\n    if (fromIndex > -1) {\n      columns.splice(fromIndex, 1);\n      toIndex = columns.indexOf(to);\n\n      if (toIndex > -1) {\n        if (after) {\n          toIndex = toIndex + 1;\n        }\n      } else {\n        toIndex = fromIndex;\n      }\n\n      columns.splice(toIndex, 0, from);\n\n      if (updateRows) {\n        this.table.rowManager.rows.forEach(function (row) {\n          if (row.cells.length) {\n            var cell = row.cells.splice(fromIndex, 1)[0];\n            row.cells.splice(toIndex, 0, cell);\n          }\n        });\n      }\n    }\n  };\n\n  ColumnManager.prototype.scrollToColumn = function (column, position, ifVisible) {\n    var _this = this;\n\n    var left = 0,\n        offset = 0,\n        adjust = 0,\n        colEl = column.getElement();\n    return new Promise(function (resolve, reject) {\n      if (typeof position === \"undefined\") {\n        position = _this.table.options.scrollToColumnPosition;\n      }\n\n      if (typeof ifVisible === \"undefined\") {\n        ifVisible = _this.table.options.scrollToColumnIfVisible;\n      }\n\n      if (column.visible) {\n        //align to correct position\n        switch (position) {\n          case \"middle\":\n          case \"center\":\n            adjust = -_this.element.clientWidth / 2;\n            break;\n\n          case \"right\":\n            adjust = colEl.clientWidth - _this.headersElement.clientWidth;\n            break;\n        } //check column visibility\n\n\n        if (!ifVisible) {\n          offset = colEl.offsetLeft;\n\n          if (offset > 0 && offset + colEl.offsetWidth < _this.element.clientWidth) {\n            return false;\n          }\n        } //calculate scroll position\n\n\n        left = colEl.offsetLeft + _this.element.scrollLeft + adjust;\n        left = Math.max(Math.min(left, _this.table.rowManager.element.scrollWidth - _this.table.rowManager.element.clientWidth), 0);\n\n        _this.table.rowManager.scrollHorizontal(left);\n\n        _this.scrollHorizontal(left);\n\n        resolve();\n      } else {\n        console.warn(\"Scroll Error - Column not visible\");\n        reject(\"Scroll Error - Column not visible\");\n      }\n    });\n  }; //////////////// Cell Management /////////////////\n\n\n  ColumnManager.prototype.generateCells = function (row) {\n    var self = this;\n    var cells = [];\n    self.columnsByIndex.forEach(function (column) {\n      cells.push(column.generateCell(row));\n    });\n    return cells;\n  }; //////////////// Column Management /////////////////\n\n\n  ColumnManager.prototype.getFlexBaseWidth = function () {\n    var self = this,\n        totalWidth = self.table.element.clientWidth,\n        //table element width\n    fixedWidth = 0; //adjust for vertical scrollbar if present\n\n    if (self.rowManager.element.scrollHeight > self.rowManager.element.clientHeight) {\n      totalWidth -= self.rowManager.element.offsetWidth - self.rowManager.element.clientWidth;\n    }\n\n    this.columnsByIndex.forEach(function (column) {\n      var width, minWidth, colWidth;\n\n      if (column.visible) {\n        width = column.definition.width || 0;\n        minWidth = typeof column.minWidth == \"undefined\" ? self.table.options.columnMinWidth : parseInt(column.minWidth);\n\n        if (typeof width == \"string\") {\n          if (width.indexOf(\"%\") > -1) {\n            colWidth = totalWidth / 100 * parseInt(width);\n          } else {\n            colWidth = parseInt(width);\n          }\n        } else {\n          colWidth = width;\n        }\n\n        fixedWidth += colWidth > minWidth ? colWidth : minWidth;\n      }\n    });\n    return fixedWidth;\n  };\n\n  ColumnManager.prototype.addColumn = function (definition, before, nextToColumn) {\n    var column = this._addColumn(definition, before, nextToColumn);\n\n    this._reIndexColumns();\n\n    if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n      this.table.modules.responsiveLayout.initialize();\n    }\n\n    if (this.table.modExists(\"columnCalcs\")) {\n      this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n    }\n\n    this.redraw();\n\n    if (this.table.modules.layout.getMode() != \"fitColumns\") {\n      column.reinitializeWidth();\n    }\n\n    this._verticalAlignHeaders();\n\n    this.table.rowManager.reinitialize();\n  }; //remove column from system\n\n\n  ColumnManager.prototype.deregisterColumn = function (column) {\n    var field = column.getField(),\n        index; //remove from field list\n\n    if (field) {\n      delete this.columnsByField[field];\n    } //remove from index list\n\n\n    index = this.columnsByIndex.indexOf(column);\n\n    if (index > -1) {\n      this.columnsByIndex.splice(index, 1);\n    } //remove from column list\n\n\n    index = this.columns.indexOf(column);\n\n    if (index > -1) {\n      this.columns.splice(index, 1);\n    }\n\n    if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n      this.table.modules.responsiveLayout.initialize();\n    }\n\n    this.redraw();\n  }; //redraw columns\n\n\n  ColumnManager.prototype.redraw = function (force) {\n    if (force) {\n      if (Tabulator.prototype.helpers.elVisible(this.element)) {\n        this._verticalAlignHeaders();\n      }\n\n      this.table.rowManager.resetScroll();\n      this.table.rowManager.reinitialize();\n    }\n\n    if (this.table.modules.layout.getMode() == \"fitColumns\") {\n      this.table.modules.layout.layout();\n    } else {\n      if (force) {\n        this.table.modules.layout.layout();\n      } else {\n        if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n          this.table.modules.responsiveLayout.update();\n        }\n      }\n    }\n\n    if (this.table.modExists(\"frozenColumns\")) {\n      this.table.modules.frozenColumns.layout();\n    }\n\n    if (this.table.modExists(\"columnCalcs\")) {\n      this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n    }\n\n    if (force) {\n      if (this.table.options.persistentLayout && this.table.modExists(\"persistence\", true)) {\n        this.table.modules.persistence.save(\"columns\");\n      }\n\n      if (this.table.modExists(\"columnCalcs\")) {\n        this.table.modules.columnCalcs.redraw();\n      }\n    }\n\n    this.table.footerManager.redraw();\n  }; //public column object\n\n\n  var ColumnComponent = function ColumnComponent(column) {\n    this._column = column;\n    this.type = \"ColumnComponent\";\n  };\n\n  ColumnComponent.prototype.getElement = function () {\n    return this._column.getElement();\n  };\n\n  ColumnComponent.prototype.getDefinition = function () {\n    return this._column.getDefinition();\n  };\n\n  ColumnComponent.prototype.getField = function () {\n    return this._column.getField();\n  };\n\n  ColumnComponent.prototype.getCells = function () {\n    var cells = [];\n\n    this._column.cells.forEach(function (cell) {\n      cells.push(cell.getComponent());\n    });\n\n    return cells;\n  };\n\n  ColumnComponent.prototype.getVisibility = function () {\n    return this._column.visible;\n  };\n\n  ColumnComponent.prototype.show = function () {\n    if (this._column.isGroup) {\n      this._column.columns.forEach(function (column) {\n        column.show();\n      });\n    } else {\n      this._column.show();\n    }\n  };\n\n  ColumnComponent.prototype.hide = function () {\n    if (this._column.isGroup) {\n      this._column.columns.forEach(function (column) {\n        column.hide();\n      });\n    } else {\n      this._column.hide();\n    }\n  };\n\n  ColumnComponent.prototype.toggle = function () {\n    if (this._column.visible) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n\n  ColumnComponent.prototype.delete = function () {\n    this._column.delete();\n  };\n\n  ColumnComponent.prototype.getSubColumns = function () {\n    var output = [];\n\n    if (this._column.columns.length) {\n      this._column.columns.forEach(function (column) {\n        output.push(column.getComponent());\n      });\n    }\n\n    return output;\n  };\n\n  ColumnComponent.prototype.getParentColumn = function () {\n    return this._column.parent instanceof Column ? this._column.parent.getComponent() : false;\n  };\n\n  ColumnComponent.prototype._getSelf = function () {\n    return this._column;\n  };\n\n  ColumnComponent.prototype.scrollTo = function () {\n    return this._column.table.columnManager.scrollToColumn(this._column);\n  };\n\n  ColumnComponent.prototype.getTable = function () {\n    return this._column.table;\n  };\n\n  ColumnComponent.prototype.headerFilterFocus = function () {\n    if (this._column.table.modExists(\"filter\", true)) {\n      this._column.table.modules.filter.setHeaderFilterFocus(this._column);\n    }\n  };\n\n  ColumnComponent.prototype.reloadHeaderFilter = function () {\n    if (this._column.table.modExists(\"filter\", true)) {\n      this._column.table.modules.filter.reloadHeaderFilter(this._column);\n    }\n  };\n\n  ColumnComponent.prototype.setHeaderFilterValue = function (value) {\n    if (this._column.table.modExists(\"filter\", true)) {\n      this._column.table.modules.filter.setHeaderFilterValue(this._column, value);\n    }\n  };\n\n  var Column = function Column(def, parent) {\n    var self = this;\n    this.table = parent.table;\n    this.definition = def; //column definition\n\n    this.parent = parent; //hold parent object\n\n    this.type = \"column\"; //type of element\n\n    this.columns = []; //child columns\n\n    this.cells = []; //cells bound to this column\n\n    this.element = this.createElement(); //column header element\n\n    this.contentElement = false;\n    this.groupElement = this.createGroupElement(); //column group holder element\n\n    this.isGroup = false;\n    this.tooltip = false; //hold column tooltip\n\n    this.hozAlign = \"\"; //horizontal text alignment\n    //multi dimentional filed handling\n\n    this.field = \"\";\n    this.fieldStructure = \"\";\n    this.getFieldValue = \"\";\n    this.setFieldValue = \"\";\n    this.setField(this.definition.field);\n    this.modules = {}; //hold module variables;\n\n    this.cellEvents = {\n      cellClick: false,\n      cellDblClick: false,\n      cellContext: false,\n      cellTap: false,\n      cellDblTap: false,\n      cellTapHold: false\n    };\n    this.width = null; //column width\n\n    this.minWidth = null; //column minimum width\n\n    this.widthFixed = false; //user has specified a width for this column\n\n    this.visible = true; //default visible state\n    //initialize column\n\n    if (def.columns) {\n      this.isGroup = true;\n      def.columns.forEach(function (def, i) {\n        var newCol = new Column(def, self);\n        self.attachColumn(newCol);\n      });\n      self.checkColumnVisibility();\n    } else {\n      parent.registerColumnField(this);\n    }\n\n    if (def.rowHandle && this.table.options.movableRows !== false && this.table.modExists(\"moveRow\")) {\n      this.table.modules.moveRow.setHandle(true);\n    }\n\n    this._buildHeader();\n  };\n\n  Column.prototype.createElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-col\");\n    el.setAttribute(\"role\", \"columnheader\");\n    el.setAttribute(\"aria-sort\", \"none\");\n    return el;\n  };\n\n  Column.prototype.createGroupElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-col-group-cols\");\n    return el;\n  };\n\n  Column.prototype.setField = function (field) {\n    this.field = field;\n    this.fieldStructure = field ? this.table.options.nestedFieldSeparator ? field.split(this.table.options.nestedFieldSeparator) : [field] : [];\n    this.getFieldValue = this.fieldStructure.length > 1 ? this._getNestedData : this._getFlatData;\n    this.setFieldValue = this.fieldStructure.length > 1 ? this._setNesteData : this._setFlatData;\n  }; //register column position with column manager\n\n\n  Column.prototype.registerColumnPosition = function (column) {\n    this.parent.registerColumnPosition(column);\n  }; //register column position with column manager\n\n\n  Column.prototype.registerColumnField = function (column) {\n    this.parent.registerColumnField(column);\n  }; //trigger position registration\n\n\n  Column.prototype.reRegisterPosition = function () {\n    if (this.isGroup) {\n      this.columns.forEach(function (column) {\n        column.reRegisterPosition();\n      });\n    } else {\n      this.registerColumnPosition(this);\n    }\n  };\n\n  Column.prototype.setTooltip = function () {\n    var self = this,\n        def = self.definition; //set header tooltips\n\n    var tooltip = def.headerTooltip || def.tooltip === false ? def.headerTooltip : self.table.options.tooltipsHeader;\n\n    if (tooltip) {\n      if (tooltip === true) {\n        if (def.field) {\n          self.table.modules.localize.bind(\"columns|\" + def.field, function (value) {\n            self.element.setAttribute(\"title\", value || def.title);\n          });\n        } else {\n          self.element.setAttribute(\"title\", def.title);\n        }\n      } else {\n        if (typeof tooltip == \"function\") {\n          tooltip = tooltip(self.getComponent());\n\n          if (tooltip === false) {\n            tooltip = \"\";\n          }\n        }\n\n        self.element.setAttribute(\"title\", tooltip);\n      }\n    } else {\n      self.element.setAttribute(\"title\", \"\");\n    }\n  }; //build header element\n\n\n  Column.prototype._buildHeader = function () {\n    var self = this,\n        def = self.definition;\n\n    while (self.element.firstChild) {\n      self.element.removeChild(self.element.firstChild);\n    }\n\n    if (def.headerVertical) {\n      self.element.classList.add(\"tabulator-col-vertical\");\n\n      if (def.headerVertical === \"flip\") {\n        self.element.classList.add(\"tabulator-col-vertical-flip\");\n      }\n    }\n\n    self.contentElement = self._bindEvents();\n    self.contentElement = self._buildColumnHeaderContent();\n    self.element.appendChild(self.contentElement);\n\n    if (self.isGroup) {\n      self._buildGroupHeader();\n    } else {\n      self._buildColumnHeader();\n    }\n\n    self.setTooltip(); //set resizable handles\n\n    if (self.table.options.resizableColumns && self.table.modExists(\"resizeColumns\")) {\n      self.table.modules.resizeColumns.initializeColumn(\"header\", self, self.element);\n    } //set resizable handles\n\n\n    if (def.headerFilter && self.table.modExists(\"filter\") && self.table.modExists(\"edit\")) {\n      if (typeof def.headerFilterPlaceholder !== \"undefined\" && def.field) {\n        self.table.modules.localize.setHeaderFilterColumnPlaceholder(def.field, def.headerFilterPlaceholder);\n      }\n\n      self.table.modules.filter.initializeColumn(self);\n    } //set resizable handles\n\n\n    if (self.table.modExists(\"frozenColumns\")) {\n      self.table.modules.frozenColumns.initializeColumn(self);\n    } //set movable column\n\n\n    if (self.table.options.movableColumns && !self.isGroup && self.table.modExists(\"moveColumn\")) {\n      self.table.modules.moveColumn.initializeColumn(self);\n    } //set calcs column\n\n\n    if ((def.topCalc || def.bottomCalc) && self.table.modExists(\"columnCalcs\")) {\n      self.table.modules.columnCalcs.initializeColumn(self);\n    } //update header tooltip on mouse enter\n\n\n    self.element.addEventListener(\"mouseenter\", function (e) {\n      self.setTooltip();\n    });\n  };\n\n  Column.prototype._bindEvents = function () {\n    var self = this,\n        def = self.definition,\n        dblTap,\n        tapHold,\n        tap; //setup header click event bindings\n\n    if (typeof def.headerClick == \"function\") {\n      self.element.addEventListener(\"click\", function (e) {\n        def.headerClick(e, self.getComponent());\n      });\n    }\n\n    if (typeof def.headerDblClick == \"function\") {\n      self.element.addEventListener(\"dblclick\", function (e) {\n        def.headerDblClick(e, self.getComponent());\n      });\n    }\n\n    if (typeof def.headerContext == \"function\") {\n      self.element.addEventListener(\"contextmenu\", function (e) {\n        def.headerContext(e, self.getComponent());\n      });\n    } //setup header tap event bindings\n\n\n    if (typeof def.headerTap == \"function\") {\n      tap = false;\n      self.element.addEventListener(\"touchstart\", function (e) {\n        tap = true;\n      });\n      self.element.addEventListener(\"touchend\", function (e) {\n        if (tap) {\n          def.headerTap(e, self.getComponent());\n        }\n\n        tap = false;\n      });\n    }\n\n    if (typeof def.headerDblTap == \"function\") {\n      dblTap = null;\n      self.element.addEventListener(\"touchend\", function (e) {\n        if (dblTap) {\n          clearTimeout(dblTap);\n          dblTap = null;\n          def.headerDblTap(e, self.getComponent());\n        } else {\n          dblTap = setTimeout(function () {\n            clearTimeout(dblTap);\n            dblTap = null;\n          }, 300);\n        }\n      });\n    }\n\n    if (typeof def.headerTapHold == \"function\") {\n      tapHold = null;\n      self.element.addEventListener(\"touchstart\", function (e) {\n        clearTimeout(tapHold);\n        tapHold = setTimeout(function () {\n          clearTimeout(tapHold);\n          tapHold = null;\n          tap = false;\n          def.headerTapHold(e, self.getComponent());\n        }, 1000);\n      });\n      self.element.addEventListener(\"touchend\", function (e) {\n        clearTimeout(tapHold);\n        tapHold = null;\n      });\n    } //store column cell click event bindings\n\n\n    if (typeof def.cellClick == \"function\") {\n      self.cellEvents.cellClick = def.cellClick;\n    }\n\n    if (typeof def.cellDblClick == \"function\") {\n      self.cellEvents.cellDblClick = def.cellDblClick;\n    }\n\n    if (typeof def.cellContext == \"function\") {\n      self.cellEvents.cellContext = def.cellContext;\n    } //setup column cell tap event bindings\n\n\n    if (typeof def.cellTap == \"function\") {\n      self.cellEvents.cellTap = def.cellTap;\n    }\n\n    if (typeof def.cellDblTap == \"function\") {\n      self.cellEvents.cellDblTap = def.cellDblTap;\n    }\n\n    if (typeof def.cellTapHold == \"function\") {\n      self.cellEvents.cellTapHold = def.cellTapHold;\n    } //setup column cell edit callbacks\n\n\n    if (typeof def.cellEdited == \"function\") {\n      self.cellEvents.cellEdited = def.cellEdited;\n    }\n\n    if (typeof def.cellEditing == \"function\") {\n      self.cellEvents.cellEditing = def.cellEditing;\n    }\n\n    if (typeof def.cellEditCancelled == \"function\") {\n      self.cellEvents.cellEditCancelled = def.cellEditCancelled;\n    }\n  }; //build header element for header\n\n\n  Column.prototype._buildColumnHeader = function () {\n    var self = this,\n        def = self.definition,\n        table = self.table,\n        sortable; //set column sorter\n\n    if (table.modExists(\"sort\")) {\n      table.modules.sort.initializeColumn(self, self.contentElement);\n    } //set column formatter\n\n\n    if (table.modExists(\"format\")) {\n      table.modules.format.initializeColumn(self);\n    } //set column editor\n\n\n    if (typeof def.editor != \"undefined\" && table.modExists(\"edit\")) {\n      table.modules.edit.initializeColumn(self);\n    } //set colum validator\n\n\n    if (typeof def.validator != \"undefined\" && table.modExists(\"validate\")) {\n      table.modules.validate.initializeColumn(self);\n    } //set column mutator\n\n\n    if (table.modExists(\"mutator\")) {\n      table.modules.mutator.initializeColumn(self);\n    } //set column accessor\n\n\n    if (table.modExists(\"accessor\")) {\n      table.modules.accessor.initializeColumn(self);\n    } //set respoviveLayout\n\n\n    if (_typeof(table.options.responsiveLayout) && table.modExists(\"responsiveLayout\")) {\n      table.modules.responsiveLayout.initializeColumn(self);\n    } //set column visibility\n\n\n    if (typeof def.visible != \"undefined\") {\n      if (def.visible) {\n        self.show(true);\n      } else {\n        self.hide(true);\n      }\n    } //asign additional css classes to column header\n\n\n    if (def.cssClass) {\n      self.element.classList.add(def.cssClass);\n    }\n\n    if (def.field) {\n      this.element.setAttribute(\"tabulator-field\", def.field);\n    } //set min width if present\n\n\n    self.setMinWidth(typeof def.minWidth == \"undefined\" ? self.table.options.columnMinWidth : def.minWidth);\n    self.reinitializeWidth(); //set tooltip if present\n\n    self.tooltip = self.definition.tooltip || self.definition.tooltip === false ? self.definition.tooltip : self.table.options.tooltips; //set orizontal text alignment\n\n    self.hozAlign = typeof self.definition.align == \"undefined\" ? \"\" : self.definition.align;\n  };\n\n  Column.prototype._buildColumnHeaderContent = function () {\n    var self = this,\n        def = self.definition,\n        table = self.table;\n    var contentElement = document.createElement(\"div\");\n    contentElement.classList.add(\"tabulator-col-content\");\n    contentElement.appendChild(self._buildColumnHeaderTitle());\n    return contentElement;\n  }; //build title element of column\n\n\n  Column.prototype._buildColumnHeaderTitle = function () {\n    var self = this,\n        def = self.definition,\n        table = self.table,\n        title;\n    var titleHolderElement = document.createElement(\"div\");\n    titleHolderElement.classList.add(\"tabulator-col-title\");\n\n    if (def.editableTitle) {\n      var titleElement = document.createElement(\"input\");\n      titleElement.classList.add(\"tabulator-title-editor\");\n      titleElement.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n        titleElement.focus();\n      });\n      titleElement.addEventListener(\"change\", function () {\n        def.title = titleElement.value;\n        table.options.columnTitleChanged.call(self.table, self.getComponent());\n      });\n      titleHolderElement.appendChild(titleElement);\n\n      if (def.field) {\n        table.modules.localize.bind(\"columns|\" + def.field, function (text) {\n          titleElement.value = text || def.title || \"&nbsp\";\n        });\n      } else {\n        titleElement.value = def.title || \"&nbsp\";\n      }\n    } else {\n      if (def.field) {\n        table.modules.localize.bind(\"columns|\" + def.field, function (text) {\n          self._formatColumnHeaderTitle(titleHolderElement, text || def.title || \"&nbsp\");\n        });\n      } else {\n        self._formatColumnHeaderTitle(titleHolderElement, def.title || \"&nbsp\");\n      }\n    }\n\n    return titleHolderElement;\n  };\n\n  Column.prototype._formatColumnHeaderTitle = function (el, title) {\n    var formatter, contents, params, mockCell;\n\n    if (this.definition.titleFormatter && this.table.modExists(\"format\")) {\n      formatter = this.table.modules.format.getFormatter(this.definition.titleFormatter);\n      mockCell = {\n        getValue: function getValue() {\n          return title;\n        },\n        getElement: function getElement() {\n          return el;\n        }\n      };\n      params = this.definition.titleFormatterParams || {};\n      params = typeof params === \"function\" ? params() : params;\n      contents = formatter.call(this.table.modules.format, mockCell, params);\n\n      switch (typeof contents === 'undefined' ? 'undefined' : _typeof(contents)) {\n        case \"object\":\n          if (contents instanceof Node) {\n            this.element.appendChild(contents);\n          } else {\n            this.element.innerHTML = \"\";\n            console.warn(\"Format Error - Title formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:\", contents);\n          }\n\n          break;\n\n        case \"undefined\":\n        case \"null\":\n          this.element.innerHTML = \"\";\n          break;\n\n        default:\n          this.element.innerHTML = contents;\n      }\n    } else {\n      el.innerHTML = title;\n    }\n  }; //build header element for column group\n\n\n  Column.prototype._buildGroupHeader = function () {\n    this.element.classList.add(\"tabulator-col-group\");\n    this.element.setAttribute(\"role\", \"columngroup\");\n    this.element.setAttribute(\"aria-title\", this.definition.title);\n    this.element.appendChild(this.groupElement);\n  }; //flat field lookup\n\n\n  Column.prototype._getFlatData = function (data) {\n    return data[this.field];\n  }; //nested field lookup\n\n\n  Column.prototype._getNestedData = function (data) {\n    var dataObj = data,\n        structure = this.fieldStructure,\n        length = structure.length,\n        output;\n\n    for (var i = 0; i < length; i++) {\n      dataObj = dataObj[structure[i]];\n      output = dataObj;\n\n      if (!dataObj) {\n        break;\n      }\n    }\n\n    return output;\n  }; //flat field set\n\n\n  Column.prototype._setFlatData = function (data, value) {\n    data[this.field] = value;\n  }; //nested field set\n\n\n  Column.prototype._setNesteData = function (data, value) {\n    var dataObj = data,\n        structure = this.fieldStructure,\n        length = structure.length;\n\n    for (var i = 0; i < length; i++) {\n      if (i == length - 1) {\n        dataObj[structure[i]] = value;\n      } else {\n        if (!dataObj[structure[i]]) {\n          dataObj[structure[i]] = {};\n        }\n\n        dataObj = dataObj[structure[i]];\n      }\n    }\n  }; //attach column to this group\n\n\n  Column.prototype.attachColumn = function (column) {\n    var self = this;\n\n    if (self.groupElement) {\n      self.columns.push(column);\n      self.groupElement.appendChild(column.getElement());\n    } else {\n      console.warn(\"Column Warning - Column being attached to another column instead of column group\");\n    }\n  }; //vertically align header in column\n\n\n  Column.prototype.verticalAlign = function (alignment, height) {\n    //calculate height of column header and group holder element\n    var parentHeight = this.parent.isGroup ? this.parent.getGroupElement().clientHeight : height || this.parent.getHeadersElement().clientHeight; // var parentHeight = this.parent.isGroup ? this.parent.getGroupElement().clientHeight : this.parent.getHeadersElement().clientHeight;\n\n    this.element.style.height = parentHeight + \"px\";\n\n    if (this.isGroup) {\n      this.groupElement.style.minHeight = parentHeight - this.contentElement.offsetHeight + \"px\";\n    } //vertically align cell contents\n\n\n    if (!this.isGroup && alignment !== \"top\") {\n      if (alignment === \"bottom\") {\n        this.element.style.paddingTop = this.element.clientHeight - this.contentElement.offsetHeight + \"px\";\n      } else {\n        this.element.style.paddingTop = (this.element.clientHeight - this.contentElement.offsetHeight) / 2 + \"px\";\n      }\n    }\n\n    this.columns.forEach(function (column) {\n      column.verticalAlign(alignment);\n    });\n  }; //clear vertical alignmenet\n\n\n  Column.prototype.clearVerticalAlign = function () {\n    this.element.style.paddingTop = \"\";\n    this.element.style.height = \"\";\n    this.element.style.minHeight = \"\";\n    this.columns.forEach(function (column) {\n      column.clearVerticalAlign();\n    });\n  }; //// Retreive Column Information ////\n  //return column header element\n\n\n  Column.prototype.getElement = function () {\n    return this.element;\n  }; //return colunm group element\n\n\n  Column.prototype.getGroupElement = function () {\n    return this.groupElement;\n  }; //return field name\n\n\n  Column.prototype.getField = function () {\n    return this.field;\n  }; //return the first column in a group\n\n\n  Column.prototype.getFirstColumn = function () {\n    if (!this.isGroup) {\n      return this;\n    } else {\n      if (this.columns.length) {\n        return this.columns[0].getFirstColumn();\n      } else {\n        return false;\n      }\n    }\n  }; //return the last column in a group\n\n\n  Column.prototype.getLastColumn = function () {\n    if (!this.isGroup) {\n      return this;\n    } else {\n      if (this.columns.length) {\n        return this.columns[this.columns.length - 1].getLastColumn();\n      } else {\n        return false;\n      }\n    }\n  }; //return all columns in a group\n\n\n  Column.prototype.getColumns = function () {\n    return this.columns;\n  }; //return all columns in a group\n\n\n  Column.prototype.getCells = function () {\n    return this.cells;\n  }; //retreive the top column in a group of columns\n\n\n  Column.prototype.getTopColumn = function () {\n    if (this.parent.isGroup) {\n      return this.parent.getTopColumn();\n    } else {\n      return this;\n    }\n  }; //return column definition object\n\n\n  Column.prototype.getDefinition = function (updateBranches) {\n    var colDefs = [];\n\n    if (this.isGroup && updateBranches) {\n      this.columns.forEach(function (column) {\n        colDefs.push(column.getDefinition(true));\n      });\n      this.definition.columns = colDefs;\n    }\n\n    return this.definition;\n  }; //////////////////// Actions ////////////////////\n\n\n  Column.prototype.checkColumnVisibility = function () {\n    var visible = false;\n    this.columns.forEach(function (column) {\n      if (column.visible) {\n        visible = true;\n      }\n    });\n\n    if (visible) {\n      this.show();\n      this.parent.table.options.columnVisibilityChanged.call(this.table, this.getComponent(), false);\n    } else {\n      this.hide();\n    }\n  }; //show column\n\n\n  Column.prototype.show = function (silent, responsiveToggle) {\n    if (!this.visible) {\n      this.visible = true;\n      this.element.style.display = \"\";\n\n      this.table.columnManager._verticalAlignHeaders();\n\n      if (this.parent.isGroup) {\n        this.parent.checkColumnVisibility();\n      }\n\n      this.cells.forEach(function (cell) {\n        cell.show();\n      });\n\n      if (this.table.options.persistentLayout && this.table.modExists(\"responsiveLayout\", true)) {\n        this.table.modules.persistence.save(\"columns\");\n      }\n\n      if (!responsiveToggle && this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n        this.table.modules.responsiveLayout.updateColumnVisibility(this, this.visible);\n      }\n\n      if (!silent) {\n        this.table.options.columnVisibilityChanged.call(this.table, this.getComponent(), true);\n      }\n    }\n  }; //hide column\n\n\n  Column.prototype.hide = function (silent, responsiveToggle) {\n    if (this.visible) {\n      this.visible = false;\n      this.element.style.display = \"none\";\n\n      this.table.columnManager._verticalAlignHeaders();\n\n      if (this.parent.isGroup) {\n        this.parent.checkColumnVisibility();\n      }\n\n      this.cells.forEach(function (cell) {\n        cell.hide();\n      });\n\n      if (this.table.options.persistentLayout && this.table.modExists(\"persistence\", true)) {\n        this.table.modules.persistence.save(\"columns\");\n      }\n\n      if (!responsiveToggle && this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n        this.table.modules.responsiveLayout.updateColumnVisibility(this, this.visible);\n      }\n\n      if (!silent) {\n        this.table.options.columnVisibilityChanged.call(this.table, this.getComponent(), false);\n      }\n    }\n  };\n\n  Column.prototype.matchChildWidths = function () {\n    var childWidth = 0;\n\n    if (this.contentElement && this.columns.length) {\n      this.columns.forEach(function (column) {\n        childWidth += column.getWidth();\n      });\n      this.contentElement.style.maxWidth = childWidth - 1 + \"px\";\n    }\n  };\n\n  Column.prototype.setWidth = function (width) {\n    this.widthFixed = true;\n    this.setWidthActual(width);\n  };\n\n  Column.prototype.setWidthActual = function (width) {\n    if (isNaN(width)) {\n      width = Math.floor(this.table.element.clientWidth / 100 * parseInt(width));\n    }\n\n    width = Math.max(this.minWidth, width);\n    this.width = width;\n    this.element.style.width = width ? width + \"px\" : \"\";\n\n    if (!this.isGroup) {\n      this.cells.forEach(function (cell) {\n        cell.setWidth(width);\n      });\n    }\n\n    if (this.parent.isGroup) {\n      this.parent.matchChildWidths();\n    } //set resizable handles\n\n\n    if (this.table.modExists(\"frozenColumns\")) {\n      this.table.modules.frozenColumns.layout();\n    }\n  };\n\n  Column.prototype.checkCellHeights = function () {\n    var rows = [];\n    this.cells.forEach(function (cell) {\n      if (cell.row.heightInitialized) {\n        if (cell.row.getElement().offsetParent !== null) {\n          rows.push(cell.row);\n          cell.row.clearCellHeight();\n        } else {\n          cell.row.heightInitialized = false;\n        }\n      }\n    });\n    rows.forEach(function (row) {\n      row.calcHeight();\n    });\n    rows.forEach(function (row) {\n      row.setCellHeight();\n    });\n  };\n\n  Column.prototype.getWidth = function () {\n    // return this.element.offsetWidth;\n    return this.width;\n  };\n\n  Column.prototype.getHeight = function () {\n    return this.element.offsetHeight;\n  };\n\n  Column.prototype.setMinWidth = function (minWidth) {\n    this.minWidth = minWidth;\n    this.element.style.minWidth = minWidth ? minWidth + \"px\" : \"\";\n    this.cells.forEach(function (cell) {\n      cell.setMinWidth(minWidth);\n    });\n  };\n\n  Column.prototype.delete = function () {\n    if (this.isGroup) {\n      this.columns.forEach(function (column) {\n        column.delete();\n      });\n    }\n\n    var cellCount = this.cells.length;\n\n    for (var i = 0; i < cellCount; i++) {\n      this.cells[0].delete();\n    }\n\n    this.element.parentNode.removeChild(this.element);\n    this.table.columnManager.deregisterColumn(this);\n  }; //////////////// Cell Management /////////////////\n  //generate cell for this column\n\n\n  Column.prototype.generateCell = function (row) {\n    var self = this;\n    var cell = new Cell(self, row);\n    this.cells.push(cell);\n    return cell;\n  };\n\n  Column.prototype.reinitializeWidth = function (force) {\n    this.widthFixed = false; //set width if present\n\n    if (typeof this.definition.width !== \"undefined\" && !force) {\n      this.setWidth(this.definition.width);\n    } //hide header filters to prevent them altering column width\n\n\n    if (this.table.modExists(\"filter\")) {\n      this.table.modules.filter.hideHeaderFilterElements();\n    }\n\n    this.fitToData(); //show header filters again after layout is complete\n\n    if (this.table.modExists(\"filter\")) {\n      this.table.modules.filter.showHeaderFilterElements();\n    }\n  }; //set column width to maximum cell width\n\n\n  Column.prototype.fitToData = function () {\n    var self = this;\n\n    if (!this.widthFixed) {\n      this.element.width = \"\";\n      self.cells.forEach(function (cell) {\n        cell.setWidth(\"\");\n      });\n    }\n\n    var maxWidth = this.element.offsetWidth;\n\n    if (!self.width || !this.widthFixed) {\n      self.cells.forEach(function (cell) {\n        var width = cell.getWidth();\n\n        if (width > maxWidth) {\n          maxWidth = width;\n        }\n      });\n\n      if (maxWidth) {\n        self.setWidthActual(maxWidth + 1);\n      }\n    }\n  };\n\n  Column.prototype.deleteCell = function (cell) {\n    var index = this.cells.indexOf(cell);\n\n    if (index > -1) {\n      this.cells.splice(index, 1);\n    }\n  }; //////////////// Event Bindings /////////////////\n  //////////////// Object Generation /////////////////\n\n\n  Column.prototype.getComponent = function () {\n    return new ColumnComponent(this);\n  };\n\n  var RowManager = function RowManager(table) {\n    this.table = table;\n    this.element = this.createHolderElement(); //containing element\n\n    this.tableElement = this.createTableElement(); //table element\n\n    this.columnManager = null; //hold column manager object\n\n    this.height = 0; //hold height of table element\n\n    this.firstRender = false; //handle first render\n\n    this.renderMode = \"classic\"; //current rendering mode\n\n    this.rows = []; //hold row data objects\n\n    this.activeRows = []; //rows currently available to on display in the table\n\n    this.activeRowsCount = 0; //count of active rows\n\n    this.displayRows = []; //rows currently on display in the table\n\n    this.displayRowsCount = 0; //count of display rows\n\n    this.scrollTop = 0;\n    this.scrollLeft = 0;\n    this.vDomRowHeight = 20; //approximation of row heights for padding\n\n    this.vDomTop = 0; //hold position for first rendered row in the virtual DOM\n\n    this.vDomBottom = 0; //hold possition for last rendered row in the virtual DOM\n\n    this.vDomScrollPosTop = 0; //last scroll position of the vDom top;\n\n    this.vDomScrollPosBottom = 0; //last scroll position of the vDom bottom;\n\n    this.vDomTopPad = 0; //hold value of padding for top of virtual DOM\n\n    this.vDomBottomPad = 0; //hold value of padding for bottom of virtual DOM\n\n    this.vDomMaxRenderChain = 90; //the maximum number of dom elements that can be rendered in 1 go\n\n    this.vDomWindowBuffer = 0; //window row buffer before removing elements, to smooth scrolling\n\n    this.vDomWindowMinTotalRows = 20; //minimum number of rows to be generated in virtual dom (prevent buffering issues on tables with tall rows)\n\n    this.vDomWindowMinMarginRows = 5; //minimum number of rows to be generated in virtual dom margin\n\n    this.vDomTopNewRows = []; //rows to normalize after appending to optimize render speed\n\n    this.vDomBottomNewRows = []; //rows to normalize after appending to optimize render speed\n  }; //////////////// Setup Functions /////////////////\n\n\n  RowManager.prototype.createHolderElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-tableHolder\");\n    el.setAttribute(\"tabindex\", 0);\n    return el;\n  };\n\n  RowManager.prototype.createTableElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-table\");\n    return el;\n  }; //return containing element\n\n\n  RowManager.prototype.getElement = function () {\n    return this.element;\n  }; //return table element\n\n\n  RowManager.prototype.getTableElement = function () {\n    return this.tableElement;\n  }; //return position of row in table\n\n\n  RowManager.prototype.getRowPosition = function (row, active) {\n    if (active) {\n      return this.activeRows.indexOf(row);\n    } else {\n      return this.rows.indexOf(row);\n    }\n  }; //link to column manager\n\n\n  RowManager.prototype.setColumnManager = function (manager) {\n    this.columnManager = manager;\n  };\n\n  RowManager.prototype.initialize = function () {\n    var self = this;\n    self.setRenderMode(); //initialize manager\n\n    self.element.appendChild(self.tableElement);\n    self.firstRender = true; //scroll header along with table body\n\n    self.element.addEventListener(\"scroll\", function () {\n      var left = self.element.scrollLeft; //handle horizontal scrolling\n\n      if (self.scrollLeft != left) {\n        self.columnManager.scrollHorizontal(left);\n\n        if (self.table.options.groupBy) {\n          self.table.modules.groupRows.scrollHeaders(left);\n        }\n\n        if (self.table.modExists(\"columnCalcs\")) {\n          self.table.modules.columnCalcs.scrollHorizontal(left);\n        }\n      }\n\n      self.scrollLeft = left;\n    }); //handle virtual dom scrolling\n\n    if (this.renderMode === \"virtual\") {\n      self.element.addEventListener(\"scroll\", function () {\n        var top = self.element.scrollTop;\n        var dir = self.scrollTop > top; //handle verical scrolling\n\n        if (self.scrollTop != top) {\n          self.scrollTop = top;\n          self.scrollVertical(dir);\n\n          if (self.table.options.ajaxProgressiveLoad == \"scroll\") {\n            self.table.modules.ajax.nextPage(self.element.scrollHeight - self.element.clientHeight - top);\n          }\n        } else {\n          self.scrollTop = top;\n        }\n      });\n    }\n  }; ////////////////// Row Manipulation //////////////////\n\n\n  RowManager.prototype.findRow = function (subject) {\n    var self = this;\n\n    if ((typeof subject === 'undefined' ? 'undefined' : _typeof(subject)) == \"object\") {\n      if (subject instanceof Row) {\n        //subject is row element\n        return subject;\n      } else if (subject instanceof RowComponent) {\n        //subject is public row component\n        return subject._getSelf() || false;\n      } else if (subject instanceof HTMLElement) {\n        //subject is a HTML element of the row\n        var match = self.rows.find(function (row) {\n          return row.element === subject;\n        });\n        return match || false;\n      }\n    } else if (typeof subject == \"undefined\" || subject === null) {\n      return false;\n    } else {\n      //subject should be treated as the index of the row\n      var _match = self.rows.find(function (row) {\n        return row.data[self.table.options.index] == subject;\n      });\n\n      return _match || false;\n    } //catch all for any other type of input\n\n\n    return false;\n  };\n\n  RowManager.prototype.getRowFromPosition = function (position, active) {\n    if (active) {\n      return this.activeRows[position];\n    } else {\n      return this.rows[position];\n    }\n  };\n\n  RowManager.prototype.scrollToRow = function (row, position, ifVisible) {\n    var _this2 = this;\n\n    var rowIndex = this.getDisplayRows().indexOf(row),\n        rowEl = row.getElement(),\n        rowTop,\n        offset = 0;\n    return new Promise(function (resolve, reject) {\n      if (rowIndex > -1) {\n        if (typeof position === \"undefined\") {\n          position = _this2.table.options.scrollToRowPosition;\n        }\n\n        if (typeof ifVisible === \"undefined\") {\n          ifVisible = _this2.table.options.scrollToRowIfVisible;\n        }\n\n        if (position === \"nearest\") {\n          switch (_this2.renderMode) {\n            case \"classic\":\n              rowTop = Tabulator.prototype.helpers.elOffset(rowEl).top;\n              position = Math.abs(_this2.element.scrollTop - rowTop) > Math.abs(_this2.element.scrollTop + _this2.element.clientHeight - rowTop) ? \"bottom\" : \"top\";\n              break;\n\n            case \"virtual\":\n              position = Math.abs(_this2.vDomTop - rowIndex) > Math.abs(_this2.vDomBottom - rowIndex) ? \"bottom\" : \"top\";\n              break;\n          }\n        } //check row visibility\n\n\n        if (!ifVisible) {\n          if (Tabulator.prototype.helpers.elVisible(rowEl)) {\n            offset = Tabulator.prototype.helpers.elOffset(rowEl).top - Tabulator.prototype.helpers.elOffset(_this2.element).top;\n\n            if (offset > 0 && offset < _this2.element.clientHeight - rowEl.offsetHeight) {\n              return false;\n            }\n          }\n        } //scroll to row\n\n\n        switch (_this2.renderMode) {\n          case \"classic\":\n            _this2.element.scrollTop = Tabulator.prototype.helpers.elOffset(rowEl).top - Tabulator.prototype.helpers.elOffset(_this2.element).top + _this2.element.scrollTop;\n            break;\n\n          case \"virtual\":\n            _this2._virtualRenderFill(rowIndex, true);\n\n            break;\n        } //align to correct position\n\n\n        switch (position) {\n          case \"middle\":\n          case \"center\":\n            _this2.element.scrollTop = _this2.element.scrollTop - _this2.element.clientHeight / 2;\n            break;\n\n          case \"bottom\":\n            _this2.element.scrollTop = _this2.element.scrollTop - _this2.element.clientHeight + rowEl.offsetHeight;\n            break;\n        }\n\n        resolve();\n      } else {\n        console.warn(\"Scroll Error - Row not visible\");\n        reject(\"Scroll Error - Row not visible\");\n      }\n    });\n  }; ////////////////// Data Handling //////////////////\n\n\n  RowManager.prototype.setData = function (data, renderInPosition) {\n    var _this3 = this;\n\n    var self = this;\n    return new Promise(function (resolve, reject) {\n      if (renderInPosition && _this3.getDisplayRows().length) {\n        if (self.table.options.pagination) {\n          self._setDataActual(data, true);\n        } else {\n          _this3.reRenderInPosition(function () {\n            self._setDataActual(data);\n          });\n        }\n      } else {\n        _this3.resetScroll();\n\n        _this3._setDataActual(data);\n      }\n\n      resolve();\n    });\n  };\n\n  RowManager.prototype._setDataActual = function (data, renderInPosition) {\n    var self = this;\n    self.table.options.dataLoading.call(this.table, data);\n    self.rows.forEach(function (row) {\n      row.wipe();\n    });\n    self.rows = [];\n\n    if (this.table.options.history && this.table.modExists(\"history\")) {\n      this.table.modules.history.clear();\n    }\n\n    if (Array.isArray(data)) {\n      if (this.table.modExists(\"selectRow\")) {\n        this.table.modules.selectRow.clearSelectionData();\n      }\n\n      data.forEach(function (def, i) {\n        if (def && (typeof def === 'undefined' ? 'undefined' : _typeof(def)) === \"object\") {\n          var row = new Row(def, self);\n          self.rows.push(row);\n        } else {\n          console.warn(\"Data Loading Warning - Invalid row data detected and ignored, expecting object but received:\", def);\n        }\n      });\n      self.table.options.dataLoaded.call(this.table, data);\n      self.refreshActiveData(false, false, renderInPosition);\n    } else {\n      console.error(\"Data Loading Error - Unable to process data due to invalid data type \\nExpecting: array \\nReceived: \", typeof data === 'undefined' ? 'undefined' : _typeof(data), \"\\nData:     \", data);\n    }\n  };\n\n  RowManager.prototype.deleteRow = function (row) {\n    var allIndex = this.rows.indexOf(row),\n        activeIndex = this.activeRows.indexOf(row);\n\n    if (activeIndex > -1) {\n      this.activeRows.splice(activeIndex, 1);\n    }\n\n    if (allIndex > -1) {\n      this.rows.splice(allIndex, 1);\n    }\n\n    this.setActiveRows(this.activeRows);\n    this.displayRowIterator(function (rows) {\n      var displayIndex = rows.indexOf(row);\n\n      if (displayIndex > -1) {\n        rows.splice(displayIndex, 1);\n      }\n    });\n    this.reRenderInPosition();\n    this.table.options.rowDeleted.call(this.table, row.getComponent());\n    this.table.options.dataEdited.call(this.table, this.getData());\n\n    if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n      this.table.modules.groupRows.updateGroupRows(true);\n    } else if (this.table.options.pagination && this.table.modExists(\"page\")) {\n      this.refreshActiveData(false, false, true);\n    } else {\n      if (this.table.options.pagination && this.table.modExists(\"page\")) {\n        this.refreshActiveData(\"page\");\n      }\n    }\n  };\n\n  RowManager.prototype.addRow = function (data, pos, index, blockRedraw) {\n    var row = this.addRowActual(data, pos, index, blockRedraw);\n\n    if (this.table.options.history && this.table.modExists(\"history\")) {\n      this.table.modules.history.action(\"rowAdd\", row, {\n        data: data,\n        pos: pos,\n        index: index\n      });\n    }\n\n    return row;\n  }; //add multiple rows\n\n\n  RowManager.prototype.addRows = function (data, pos, index) {\n    var _this4 = this;\n\n    var self = this,\n        length = 0,\n        rows = [];\n    return new Promise(function (resolve, reject) {\n      pos = _this4.findAddRowPos(pos);\n\n      if (!Array.isArray(data)) {\n        data = [data];\n      }\n\n      length = data.length - 1;\n\n      if (typeof index == \"undefined\" && pos || typeof index !== \"undefined\" && !pos) {\n        data.reverse();\n      }\n\n      data.forEach(function (item, i) {\n        var row = self.addRow(item, pos, index, true);\n        rows.push(row);\n      });\n\n      if (_this4.table.options.groupBy && _this4.table.modExists(\"groupRows\")) {\n        _this4.table.modules.groupRows.updateGroupRows(true);\n      } else if (_this4.table.options.pagination && _this4.table.modExists(\"page\")) {\n        _this4.refreshActiveData(false, false, true);\n      } else {\n        _this4.reRenderInPosition();\n      } //recalc column calculations if present\n\n\n      if (_this4.table.modExists(\"columnCalcs\")) {\n        _this4.table.modules.columnCalcs.recalc(_this4.table.rowManager.activeRows);\n      }\n\n      resolve(rows);\n    });\n  };\n\n  RowManager.prototype.findAddRowPos = function (pos) {\n    if (typeof pos === \"undefined\") {\n      pos = this.table.options.addRowPos;\n    }\n\n    if (pos === \"pos\") {\n      pos = true;\n    }\n\n    if (pos === \"bottom\") {\n      pos = false;\n    }\n\n    return pos;\n  };\n\n  RowManager.prototype.addRowActual = function (data, pos, index, blockRedraw) {\n    var row = data instanceof Row ? data : new Row(data || {}, this),\n        top = this.findAddRowPos(pos),\n        dispRows;\n\n    if (!index && this.table.options.pagination && this.table.options.paginationAddRow == \"page\") {\n      dispRows = this.getDisplayRows();\n\n      if (top) {\n        if (dispRows.length) {\n          index = dispRows[0];\n        } else {\n          if (this.activeRows.length) {\n            index = this.activeRows[this.activeRows.length - 1];\n            top = false;\n          }\n        }\n      } else {\n        if (dispRows.length) {\n          index = dispRows[dispRows.length - 1];\n          top = dispRows.length < this.table.modules.page.getPageSize() ? false : true;\n        }\n      }\n    }\n\n    if (index) {\n      index = this.findRow(index);\n    }\n\n    if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n      this.table.modules.groupRows.assignRowToGroup(row);\n      var groupRows = row.getGroup().rows;\n\n      if (groupRows.length > 1) {\n        if (!index || index && groupRows.indexOf(index) == -1) {\n          if (top) {\n            if (groupRows[0] !== row) {\n              index = groupRows[0];\n\n              this._moveRowInArray(row.getGroup().rows, row, index, top);\n            }\n          } else {\n            if (groupRows[groupRows.length - 1] !== row) {\n              index = groupRows[groupRows.length - 1];\n\n              this._moveRowInArray(row.getGroup().rows, row, index, top);\n            }\n          }\n        } else {\n          this._moveRowInArray(row.getGroup().rows, row, index, top);\n        }\n      }\n    }\n\n    if (index) {\n      var allIndex = this.rows.indexOf(index),\n          activeIndex = this.activeRows.indexOf(index);\n      this.displayRowIterator(function (rows) {\n        var displayIndex = rows.indexOf(index);\n\n        if (displayIndex > -1) {\n          rows.splice(top ? displayIndex : displayIndex + 1, 0, row);\n        }\n      });\n\n      if (activeIndex > -1) {\n        this.activeRows.splice(top ? activeIndex : activeIndex + 1, 0, row);\n      }\n\n      if (allIndex > -1) {\n        this.rows.splice(top ? allIndex : allIndex + 1, 0, row);\n      }\n    } else {\n      if (top) {\n        this.displayRowIterator(function (rows) {\n          rows.unshift(row);\n        });\n        this.activeRows.unshift(row);\n        this.rows.unshift(row);\n      } else {\n        this.displayRowIterator(function (rows) {\n          rows.push(row);\n        });\n        this.activeRows.push(row);\n        this.rows.push(row);\n      }\n    }\n\n    this.setActiveRows(this.activeRows);\n    this.table.options.rowAdded.call(this.table, row.getComponent());\n    this.table.options.dataEdited.call(this.table, this.getData());\n\n    if (!blockRedraw) {\n      this.reRenderInPosition();\n    }\n\n    return row;\n  };\n\n  RowManager.prototype.moveRow = function (from, to, after) {\n    if (this.table.options.history && this.table.modExists(\"history\")) {\n      this.table.modules.history.action(\"rowMove\", from, {\n        pos: this.getRowPosition(from),\n        to: to,\n        after: after\n      });\n    }\n\n    this.moveRowActual(from, to, after);\n    this.table.options.rowMoved.call(this.table, from.getComponent());\n  };\n\n  RowManager.prototype.moveRowActual = function (from, to, after) {\n    var self = this;\n\n    this._moveRowInArray(this.rows, from, to, after);\n\n    this._moveRowInArray(this.activeRows, from, to, after);\n\n    this.displayRowIterator(function (rows) {\n      self._moveRowInArray(rows, from, to, after);\n    });\n\n    if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n      var toGroup = to.getGroup();\n      var fromGroup = from.getGroup();\n\n      if (toGroup === fromGroup) {\n        this._moveRowInArray(toGroup.rows, from, to, after);\n      } else {\n        if (fromGroup) {\n          fromGroup.removeRow(from);\n        }\n\n        toGroup.insertRow(from, to, after);\n      }\n    }\n  };\n\n  RowManager.prototype._moveRowInArray = function (rows, from, to, after) {\n    var fromIndex, toIndex, start, end;\n\n    if (from !== to) {\n      fromIndex = rows.indexOf(from);\n\n      if (fromIndex > -1) {\n        rows.splice(fromIndex, 1);\n        toIndex = rows.indexOf(to);\n\n        if (toIndex > -1) {\n          if (after) {\n            rows.splice(toIndex + 1, 0, from);\n          } else {\n            rows.splice(toIndex, 0, from);\n          }\n        } else {\n          rows.splice(fromIndex, 0, from);\n        }\n      } //restyle rows\n\n\n      if (rows === this.getDisplayRows()) {\n        start = fromIndex < toIndex ? fromIndex : toIndex;\n        end = toIndex > fromIndex ? toIndex : fromIndex + 1;\n\n        for (var i = start; i <= end; i++) {\n          if (rows[i]) {\n            this.styleRow(rows[i], i);\n          }\n        }\n      }\n    }\n  };\n\n  RowManager.prototype.clearData = function () {\n    this.setData([]);\n  };\n\n  RowManager.prototype.getRowIndex = function (row) {\n    return this.findRowIndex(row, this.rows);\n  };\n\n  RowManager.prototype.getDisplayRowIndex = function (row) {\n    var index = this.getDisplayRows().indexOf(row);\n    return index > -1 ? index : false;\n  };\n\n  RowManager.prototype.nextDisplayRow = function (row, rowOnly) {\n    var index = this.getDisplayRowIndex(row),\n        nextRow = false;\n\n    if (index !== false && index < this.displayRowsCount - 1) {\n      nextRow = this.getDisplayRows()[index + 1];\n    }\n\n    if (nextRow && (!(nextRow instanceof Row) || nextRow.type != \"row\")) {\n      return this.nextDisplayRow(nextRow, rowOnly);\n    }\n\n    return nextRow;\n  };\n\n  RowManager.prototype.prevDisplayRow = function (row, rowOnly) {\n    var index = this.getDisplayRowIndex(row),\n        prevRow = false;\n\n    if (index) {\n      prevRow = this.getDisplayRows()[index - 1];\n    }\n\n    if (prevRow && (!(prevRow instanceof Row) || prevRow.type != \"row\")) {\n      return this.prevDisplayRow(prevRow, rowOnly);\n    }\n\n    return prevRow;\n  };\n\n  RowManager.prototype.findRowIndex = function (row, list) {\n    var rowIndex;\n    row = this.findRow(row);\n\n    if (row) {\n      rowIndex = list.indexOf(row);\n\n      if (rowIndex > -1) {\n        return rowIndex;\n      }\n    }\n\n    return false;\n  };\n\n  RowManager.prototype.getData = function (active, transform) {\n    var self = this,\n        output = [];\n    var rows = active ? self.activeRows : self.rows;\n    rows.forEach(function (row) {\n      output.push(row.getData(transform || \"data\"));\n    });\n    return output;\n  };\n\n  RowManager.prototype.getHtml = function (active) {\n    var data = this.getData(active),\n        columns = [],\n        header = \"\",\n        body = \"\",\n        table = \"\"; //build header row\n\n    this.table.columnManager.getColumns().forEach(function (column) {\n      var def = column.getDefinition();\n\n      if (column.visible && !def.hideInHtml) {\n        header += '<th>' + (def.title || \"\") + '</th>';\n        columns.push(column);\n      }\n    }); //build body rows\n\n    data.forEach(function (rowData) {\n      var row = \"\";\n      columns.forEach(function (column) {\n        var value = column.getFieldValue(rowData);\n\n        if (typeof value === \"undefined\" || value === null) {\n          value = \":\";\n        }\n\n        row += '<td>' + value + '</td>';\n      });\n      body += '<tr>' + row + '</tr>';\n    }); //build table\n\n    table = '<table>\\n\\n\\t\\t\\t<thead>\\n\\n\\t\\t\\t<tr>' + header + '</tr>\\n\\n\\t\\t\\t</thead>\\n\\n\\t\\t\\t<tbody>' + body + '</tbody>\\n\\n\\t\\t\\t</table>';\n    return table;\n  };\n\n  RowManager.prototype.getComponents = function (active) {\n    var self = this,\n        output = [];\n    var rows = active ? self.activeRows : self.rows;\n    rows.forEach(function (row) {\n      output.push(row.getComponent());\n    });\n    return output;\n  };\n\n  RowManager.prototype.getDataCount = function (active) {\n    return active ? this.rows.length : this.activeRows.length;\n  };\n\n  RowManager.prototype._genRemoteRequest = function () {\n    var self = this,\n        table = self.table,\n        options = table.options,\n        params = {};\n\n    if (table.modExists(\"page\")) {\n      //set sort data if defined\n      if (options.ajaxSorting) {\n        var sorters = self.table.modules.sort.getSort();\n        sorters.forEach(function (item) {\n          delete item.column;\n        });\n        params[self.table.modules.page.paginationDataSentNames.sorters] = sorters;\n      } //set filter data if defined\n\n\n      if (options.ajaxFiltering) {\n        var filters = self.table.modules.filter.getFilters(true, true);\n        params[self.table.modules.page.paginationDataSentNames.filters] = filters;\n      }\n\n      self.table.modules.ajax.setParams(params, true);\n    }\n\n    table.modules.ajax.sendRequest().then(function (data) {\n      self.setData(data);\n    }).catch(function (e) {});\n  }; //choose the path to refresh data after a filter update\n\n\n  RowManager.prototype.filterRefresh = function () {\n    var table = this.table,\n        options = table.options,\n        left = this.scrollLeft;\n\n    if (options.ajaxFiltering) {\n      if (options.pagination == \"remote\" && table.modExists(\"page\")) {\n        table.modules.page.reset(true);\n        table.modules.page.setPage(1);\n      } else if (options.ajaxProgressiveLoad) {\n        table.modules.ajax.loadData();\n      } else {\n        //assume data is url, make ajax call to url to get data\n        this._genRemoteRequest();\n      }\n    } else {\n      this.refreshActiveData(\"filter\");\n    }\n\n    this.scrollHorizontal(left);\n  }; //choose the path to refresh data after a sorter update\n\n\n  RowManager.prototype.sorterRefresh = function () {\n    var table = this.table,\n        options = this.table.options,\n        left = this.scrollLeft;\n\n    if (options.ajaxSorting) {\n      if ((options.pagination == \"remote\" || options.progressiveLoad) && table.modExists(\"page\")) {\n        table.modules.page.reset(true);\n        table.modules.page.setPage(1);\n      } else if (options.ajaxProgressiveLoad) {\n        table.modules.ajax.loadData();\n      } else {\n        //assume data is url, make ajax call to url to get data\n        this._genRemoteRequest();\n      }\n    } else {\n      this.refreshActiveData(\"sort\");\n    }\n\n    this.scrollHorizontal(left);\n  };\n\n  RowManager.prototype.scrollHorizontal = function (left) {\n    this.scrollLeft = left;\n    this.element.scrollLeft = left;\n\n    if (this.table.options.groupBy) {\n      this.table.modules.groupRows.scrollHeaders(left);\n    }\n\n    if (this.table.modExists(\"columnCalcs\")) {\n      this.table.modules.columnCalcs.scrollHorizontal(left);\n    }\n  }; //set active data set\n\n\n  RowManager.prototype.refreshActiveData = function (stage, skipStage, renderInPosition) {\n    var self = this,\n        table = this.table,\n        displayIndex;\n\n    if (!stage) {\n      stage = \"all\";\n    }\n\n    if (table.options.selectable && !table.options.selectablePersistence && table.modExists(\"selectRow\")) {\n      table.modules.selectRow.deselectRows();\n    } //cascade through data refresh stages\n\n\n    switch (stage) {\n      case \"all\":\n      case \"filter\":\n        if (!skipStage) {\n          if (table.modExists(\"filter\")) {\n            self.setActiveRows(table.modules.filter.filter(self.rows));\n          } else {\n            self.setActiveRows(self.rows.slice(0));\n          }\n        } else {\n          skipStage = false;\n        }\n\n      case \"sort\":\n        if (!skipStage) {\n          if (table.modExists(\"sort\")) {\n            table.modules.sort.sort();\n          }\n        } else {\n          skipStage = false;\n        }\n\n      //generic stage to allow for pipeline trigger after the data manipulation stage\n\n      case \"display\":\n        this.resetDisplayRows();\n\n      case \"freeze\":\n        if (!skipStage) {\n          if (this.table.modExists(\"frozenRows\")) {\n            if (table.modules.frozenRows.isFrozen()) {\n              if (!table.modules.frozenRows.getDisplayIndex()) {\n                table.modules.frozenRows.setDisplayIndex(this.getNextDisplayIndex());\n              }\n\n              displayIndex = table.modules.frozenRows.getDisplayIndex();\n              displayIndex = self.setDisplayRows(table.modules.frozenRows.getRows(this.getDisplayRows(displayIndex - 1)), displayIndex);\n\n              if (displayIndex !== true) {\n                table.modules.frozenRows.setDisplayIndex(displayIndex);\n              }\n            }\n          }\n        } else {\n          skipStage = false;\n        }\n\n      case \"group\":\n        if (!skipStage) {\n          if (table.options.groupBy && table.modExists(\"groupRows\")) {\n            if (!table.modules.groupRows.getDisplayIndex()) {\n              table.modules.groupRows.setDisplayIndex(this.getNextDisplayIndex());\n            }\n\n            displayIndex = table.modules.groupRows.getDisplayIndex();\n            displayIndex = self.setDisplayRows(table.modules.groupRows.getRows(this.getDisplayRows(displayIndex - 1)), displayIndex);\n\n            if (displayIndex !== true) {\n              table.modules.groupRows.setDisplayIndex(displayIndex);\n            }\n          }\n        } else {\n          skipStage = false;\n        }\n\n      case \"tree\":\n        if (!skipStage) {\n          if (table.options.dataTree && table.modExists(\"dataTree\")) {\n            if (!table.modules.dataTree.getDisplayIndex()) {\n              table.modules.dataTree.setDisplayIndex(this.getNextDisplayIndex());\n            }\n\n            displayIndex = table.modules.dataTree.getDisplayIndex();\n            displayIndex = self.setDisplayRows(table.modules.dataTree.getRows(this.getDisplayRows(displayIndex - 1)), displayIndex);\n\n            if (displayIndex !== true) {\n              table.modules.dataTree.setDisplayIndex(displayIndex);\n            }\n          }\n        } else {\n          skipStage = false;\n        }\n\n        if (table.options.pagination && table.modExists(\"page\") && !renderInPosition) {\n          if (table.modules.page.getMode() == \"local\") {\n            table.modules.page.reset();\n          }\n        }\n\n      case \"page\":\n        if (!skipStage) {\n          if (table.options.pagination && table.modExists(\"page\")) {\n            if (!table.modules.page.getDisplayIndex()) {\n              table.modules.page.setDisplayIndex(this.getNextDisplayIndex());\n            }\n\n            displayIndex = table.modules.page.getDisplayIndex();\n\n            if (table.modules.page.getMode() == \"local\") {\n              table.modules.page.setMaxRows(this.getDisplayRows(displayIndex - 1).length);\n            }\n\n            displayIndex = self.setDisplayRows(table.modules.page.getRows(this.getDisplayRows(displayIndex - 1)), displayIndex);\n\n            if (displayIndex !== true) {\n              table.modules.page.setDisplayIndex(displayIndex);\n            }\n          }\n        } else {\n          skipStage = false;\n        }\n\n    }\n\n    if (Tabulator.prototype.helpers.elVisible(self.element)) {\n      if (renderInPosition) {\n        self.reRenderInPosition();\n      } else {\n        self.renderTable();\n\n        if (table.options.layoutColumnsOnNewData) {\n          self.table.columnManager.redraw(true);\n        }\n      }\n    }\n\n    if (table.modExists(\"columnCalcs\")) {\n      table.modules.columnCalcs.recalc(this.activeRows);\n    }\n  };\n\n  RowManager.prototype.setActiveRows = function (activeRows) {\n    this.activeRows = activeRows;\n    this.activeRowsCount = this.activeRows.length;\n  }; //reset display rows array\n\n\n  RowManager.prototype.resetDisplayRows = function () {\n    this.displayRows = [];\n    this.displayRows.push(this.activeRows.slice(0));\n    this.displayRowsCount = this.displayRows[0].length;\n\n    if (this.table.modExists(\"frozenRows\")) {\n      this.table.modules.frozenRows.setDisplayIndex(0);\n    }\n\n    if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n      this.table.modules.groupRows.setDisplayIndex(0);\n    }\n\n    if (this.table.options.pagination && this.table.modExists(\"page\")) {\n      this.table.modules.page.setDisplayIndex(0);\n    }\n  };\n\n  RowManager.prototype.getNextDisplayIndex = function () {\n    return this.displayRows.length;\n  }; //set display row pipeline data\n\n\n  RowManager.prototype.setDisplayRows = function (displayRows, index) {\n    var output = true;\n\n    if (index && typeof this.displayRows[index] != \"undefined\") {\n      this.displayRows[index] = displayRows;\n      output = true;\n    } else {\n      this.displayRows.push(displayRows);\n      output = index = this.displayRows.length - 1;\n    }\n\n    if (index == this.displayRows.length - 1) {\n      this.displayRowsCount = this.displayRows[this.displayRows.length - 1].length;\n    }\n\n    return output;\n  };\n\n  RowManager.prototype.getDisplayRows = function (index) {\n    if (typeof index == \"undefined\") {\n      return this.displayRows.length ? this.displayRows[this.displayRows.length - 1] : [];\n    } else {\n      return this.displayRows[index] || [];\n    }\n  }; //repeat action accross display rows\n\n\n  RowManager.prototype.displayRowIterator = function (callback) {\n    this.displayRows.forEach(callback);\n    this.displayRowsCount = this.displayRows[this.displayRows.length - 1].length;\n  }; //return only actual rows (not group headers etc)\n\n\n  RowManager.prototype.getRows = function () {\n    return this.rows;\n  }; ///////////////// Table Rendering /////////////////\n  //trigger rerender of table in current position\n\n\n  RowManager.prototype.reRenderInPosition = function (callback) {\n    if (this.getRenderMode() == \"virtual\") {\n      var scrollTop = this.element.scrollTop;\n      var topRow = false;\n      var topOffset = false;\n      var left = this.scrollLeft;\n      var rows = this.getDisplayRows();\n\n      for (var i = this.vDomTop; i <= this.vDomBottom; i++) {\n        if (rows[i]) {\n          var diff = scrollTop - rows[i].getElement().offsetTop;\n\n          if (topOffset === false || Math.abs(diff) < topOffset) {\n            topOffset = diff;\n            topRow = i;\n          } else {\n            break;\n          }\n        }\n      }\n\n      if (callback) {\n        callback();\n      }\n\n      this._virtualRenderFill(topRow === false ? this.displayRowsCount - 1 : topRow, true, topOffset || 0);\n\n      this.scrollHorizontal(left);\n    } else {\n      this.renderTable();\n    }\n  };\n\n  RowManager.prototype.setRenderMode = function () {\n    if ((this.table.element.clientHeight || this.table.options.height) && this.table.options.virtualDom) {\n      this.renderMode = \"virtual\";\n    } else {\n      this.renderMode = \"classic\";\n    }\n  };\n\n  RowManager.prototype.getRenderMode = function () {\n    return this.renderMode;\n  };\n\n  RowManager.prototype.renderTable = function () {\n    var self = this;\n    self.table.options.renderStarted.call(this.table);\n    self.element.scrollTop = 0;\n\n    switch (self.renderMode) {\n      case \"classic\":\n        self._simpleRender();\n\n        break;\n\n      case \"virtual\":\n        self._virtualRenderFill();\n\n        break;\n    }\n\n    if (self.firstRender) {\n      if (self.displayRowsCount) {\n        self.firstRender = false;\n        self.table.modules.layout.layout();\n      } else {\n        self.renderEmptyScroll();\n      }\n    }\n\n    if (self.table.modExists(\"frozenColumns\")) {\n      self.table.modules.frozenColumns.layout();\n    }\n\n    if (!self.displayRowsCount) {\n      if (self.table.options.placeholder) {\n        if (this.renderMode) {\n          self.table.options.placeholder.setAttribute(\"tabulator-render-mode\", this.renderMode);\n        }\n\n        self.getElement().appendChild(self.table.options.placeholder);\n      }\n    }\n\n    self.table.options.renderComplete.call(this.table);\n  }; //simple render on heightless table\n\n\n  RowManager.prototype._simpleRender = function () {\n    var self = this,\n        element = this.tableElement;\n\n    self._clearVirtualDom();\n\n    if (self.displayRowsCount) {\n      var onlyGroupHeaders = true;\n      self.getDisplayRows().forEach(function (row, index) {\n        self.styleRow(row, index);\n        element.appendChild(row.getElement());\n        row.initialize(true);\n\n        if (row.type !== \"group\") {\n          onlyGroupHeaders = false;\n        }\n      });\n\n      if (onlyGroupHeaders) {\n        element.style.minWidth = self.table.columnManager.getWidth() + \"px\";\n      }\n    } else {\n      self.renderEmptyScroll();\n    }\n  }; //show scrollbars on empty table div\n\n\n  RowManager.prototype.renderEmptyScroll = function () {\n    this.tableElement.style.minWidth = this.table.columnManager.getWidth();\n    this.tableElement.style.minHeight = \"1px\"; // this.tableElement.style.visibility = \"hidden\";\n  };\n\n  RowManager.prototype._clearVirtualDom = function () {\n    var element = this.tableElement;\n\n    if (this.table.options.placeholder && this.table.options.placeholder.parentNode) {\n      this.table.options.placeholder.parentNode.removeChild(this.table.options.placeholder);\n    } // element.children.detach();\n\n\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    }\n\n    element.style.paddingTop = \"\";\n    element.style.paddingBottom = \"\";\n    element.style.minWidth = \"\";\n    element.style.minHeight = \"\";\n    element.style.visibility = \"\";\n    this.scrollTop = 0;\n    this.scrollLeft = 0;\n    this.vDomTop = 0;\n    this.vDomBottom = 0;\n    this.vDomTopPad = 0;\n    this.vDomBottomPad = 0;\n  };\n\n  RowManager.prototype.styleRow = function (row, index) {\n    var rowEl = row.getElement();\n\n    if (index % 2) {\n      rowEl.classList.add(\"tabulator-row-even\");\n      rowEl.classList.remove(\"tabulator-row-odd\");\n    } else {\n      rowEl.classList.add(\"tabulator-row-odd\");\n      rowEl.classList.remove(\"tabulator-row-even\");\n    }\n  }; //full virtual render\n\n\n  RowManager.prototype._virtualRenderFill = function (position, forceMove, offset) {\n    var self = this,\n        element = self.tableElement,\n        holder = self.element,\n        topPad = 0,\n        rowsHeight = 0,\n        topPadHeight = 0,\n        i = 0,\n        onlyGroupHeaders = true,\n        rows = self.getDisplayRows();\n    position = position || 0;\n    offset = offset || 0;\n\n    if (!position) {\n      self._clearVirtualDom();\n    } else {\n      // element.children().detach();\n      while (element.firstChild) {\n        element.removeChild(element.firstChild);\n      } //check if position is too close to bottom of table\n\n\n      var heightOccpied = (self.displayRowsCount - position + 1) * self.vDomRowHeight;\n\n      if (heightOccpied < self.height) {\n        position -= Math.ceil((self.height - heightOccpied) / self.vDomRowHeight);\n\n        if (position < 0) {\n          position = 0;\n        }\n      } //calculate initial pad\n\n\n      topPad = Math.min(Math.max(Math.floor(self.vDomWindowBuffer / self.vDomRowHeight), self.vDomWindowMinMarginRows), position);\n      position -= topPad;\n    }\n\n    if (self.displayRowsCount && Tabulator.prototype.helpers.elVisible(self.element)) {\n      self.vDomTop = position;\n      self.vDomBottom = position - 1;\n\n      while ((rowsHeight <= self.height + self.vDomWindowBuffer || i < self.vDomWindowMinTotalRows) && self.vDomBottom < self.displayRowsCount - 1) {\n        var index = self.vDomBottom + 1,\n            row = rows[index];\n        self.styleRow(row, index);\n        element.appendChild(row.getElement());\n\n        if (!row.initialized) {\n          row.initialize(true);\n        } else {\n          if (!row.heightInitialized) {\n            row.normalizeHeight(true);\n          }\n        }\n\n        if (i < topPad) {\n          topPadHeight += row.getHeight();\n        } else {\n          rowsHeight += row.getHeight();\n        }\n\n        if (row.type !== \"group\") {\n          onlyGroupHeaders = false;\n        }\n\n        self.vDomBottom++;\n        i++;\n      }\n\n      if (!position) {\n        this.vDomTopPad = 0; //adjust rowheight to match average of rendered elements\n\n        self.vDomRowHeight = Math.floor((rowsHeight + topPadHeight) / i);\n        self.vDomBottomPad = self.vDomRowHeight * (self.displayRowsCount - self.vDomBottom - 1);\n        self.vDomScrollHeight = topPadHeight + rowsHeight + self.vDomBottomPad - self.height;\n      } else {\n        self.vDomTopPad = !forceMove ? self.scrollTop - topPadHeight : self.vDomRowHeight * this.vDomTop + offset;\n        self.vDomBottomPad = self.vDomBottom == self.displayRowsCount - 1 ? 0 : Math.max(self.vDomScrollHeight - self.vDomTopPad - rowsHeight - topPadHeight, 0);\n      }\n\n      element.style.paddingTop = self.vDomTopPad + \"px\";\n      element.style.paddingBottom = self.vDomBottomPad + \"px\";\n\n      if (forceMove) {\n        this.scrollTop = self.vDomTopPad + topPadHeight + offset - (this.element.scrollWidth > this.element.clientWidth ? this.element.offsetHeight - this.element.clientHeight : 0);\n      }\n\n      this.scrollTop = Math.min(this.scrollTop, this.element.scrollHeight - this.height); //adjust for horizontal scrollbar if present (and not at top of table)\n\n      if (this.element.scrollWidth > this.element.offsetWidth && forceMove) {\n        this.scrollTop += this.element.offsetHeight - this.element.clientHeight;\n      }\n\n      this.vDomScrollPosTop = this.scrollTop;\n      this.vDomScrollPosBottom = this.scrollTop;\n      holder.scrollTop = this.scrollTop;\n      element.style.minWidth = onlyGroupHeaders ? self.table.columnManager.getWidth() + \"px\" : \"\";\n\n      if (self.table.options.groupBy) {\n        if (self.table.modules.layout.getMode() != \"fitDataFill\" && self.displayRowsCount == self.table.modules.groupRows.countGroups()) {\n          self.tableElement.style.minWidth = self.table.columnManager.getWidth();\n        }\n      }\n    } else {\n      this.renderEmptyScroll();\n    }\n  }; //handle vertical scrolling\n\n\n  RowManager.prototype.scrollVertical = function (dir) {\n    var topDiff = this.scrollTop - this.vDomScrollPosTop;\n    var bottomDiff = this.scrollTop - this.vDomScrollPosBottom;\n    var margin = this.vDomWindowBuffer * 2;\n\n    if (-topDiff > margin || bottomDiff > margin) {\n      //if big scroll redraw table;\n      var left = this.scrollLeft;\n\n      this._virtualRenderFill(Math.floor(this.element.scrollTop / this.element.scrollHeight * this.displayRowsCount));\n\n      this.scrollHorizontal(left);\n    } else {\n      if (dir) {\n        //scrolling up\n        if (topDiff < 0) {\n          this._addTopRow(-topDiff);\n        }\n\n        if (topDiff < 0) {\n          //hide bottom row if needed\n          if (this.vDomScrollHeight - this.scrollTop > this.vDomWindowBuffer) {\n            this._removeBottomRow(-bottomDiff);\n          }\n        }\n      } else {\n        //scrolling down\n        if (topDiff >= 0) {\n          //hide top row if needed\n          if (this.scrollTop > this.vDomWindowBuffer) {\n            this._removeTopRow(topDiff);\n          }\n        }\n\n        if (bottomDiff >= 0) {\n          this._addBottomRow(bottomDiff);\n        }\n      }\n    }\n  };\n\n  RowManager.prototype._addTopRow = function (topDiff) {\n    var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var table = this.tableElement,\n        rows = this.getDisplayRows();\n\n    if (this.vDomTop) {\n      var index = this.vDomTop - 1,\n          topRow = rows[index],\n          topRowHeight = topRow.getHeight() || this.vDomRowHeight; //hide top row if needed\n\n      if (topDiff >= topRowHeight) {\n        this.styleRow(topRow, index);\n        table.insertBefore(topRow.getElement(), table.firstChild);\n\n        if (!topRow.initialized || !topRow.heightInitialized) {\n          this.vDomTopNewRows.push(topRow);\n\n          if (!topRow.heightInitialized) {\n            topRow.clearCellHeight();\n          }\n        }\n\n        topRow.initialize();\n        this.vDomTopPad -= topRowHeight;\n\n        if (this.vDomTopPad < 0) {\n          this.vDomTopPad = index * this.vDomRowHeight;\n        }\n\n        if (!index) {\n          this.vDomTopPad = 0;\n        }\n\n        table.style.paddingTop = this.vDomTopPad + \"px\";\n        this.vDomScrollPosTop -= topRowHeight;\n        this.vDomTop--;\n      }\n\n      topDiff = -(this.scrollTop - this.vDomScrollPosTop);\n\n      if (i < this.vDomMaxRenderChain && this.vDomTop && topDiff >= (rows[this.vDomTop - 1].getHeight() || this.vDomRowHeight)) {\n        this._addTopRow(topDiff, i + 1);\n      } else {\n        this._quickNormalizeRowHeight(this.vDomTopNewRows);\n      }\n    }\n  };\n\n  RowManager.prototype._removeTopRow = function (topDiff) {\n    var table = this.tableElement,\n        topRow = this.getDisplayRows()[this.vDomTop],\n        topRowHeight = topRow.getHeight() || this.vDomRowHeight;\n\n    if (topDiff >= topRowHeight) {\n      var rowEl = topRow.getElement();\n      rowEl.parentNode.removeChild(rowEl);\n      this.vDomTopPad += topRowHeight;\n      table.style.paddingTop = this.vDomTopPad + \"px\";\n      this.vDomScrollPosTop += this.vDomTop ? topRowHeight : topRowHeight + this.vDomWindowBuffer;\n      this.vDomTop++;\n      topDiff = this.scrollTop - this.vDomScrollPosTop;\n\n      this._removeTopRow(topDiff);\n    }\n  };\n\n  RowManager.prototype._addBottomRow = function (bottomDiff) {\n    var i = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var table = this.tableElement,\n        rows = this.getDisplayRows();\n\n    if (this.vDomBottom < this.displayRowsCount - 1) {\n      var index = this.vDomBottom + 1,\n          bottomRow = rows[index],\n          bottomRowHeight = bottomRow.getHeight() || this.vDomRowHeight; //hide bottom row if needed\n\n      if (bottomDiff >= bottomRowHeight) {\n        this.styleRow(bottomRow, index);\n        table.appendChild(bottomRow.getElement());\n\n        if (!bottomRow.initialized || !bottomRow.heightInitialized) {\n          this.vDomBottomNewRows.push(bottomRow);\n\n          if (!bottomRow.heightInitialized) {\n            bottomRow.clearCellHeight();\n          }\n        }\n\n        bottomRow.initialize();\n        this.vDomBottomPad -= bottomRowHeight;\n\n        if (this.vDomBottomPad < 0 || index == this.displayRowsCount - 1) {\n          this.vDomBottomPad = 0;\n        }\n\n        table.style.paddingBottom = this.vDomBottomPad + \"px\";\n        this.vDomScrollPosBottom += bottomRowHeight;\n        this.vDomBottom++;\n      }\n\n      bottomDiff = this.scrollTop - this.vDomScrollPosBottom;\n\n      if (i < this.vDomMaxRenderChain && this.vDomBottom < this.displayRowsCount - 1 && bottomDiff >= (rows[this.vDomBottom + 1].getHeight() || this.vDomRowHeight)) {\n        this._addBottomRow(bottomDiff, i + 1);\n      } else {\n        this._quickNormalizeRowHeight(this.vDomBottomNewRows);\n      }\n    }\n  };\n\n  RowManager.prototype._removeBottomRow = function (bottomDiff) {\n    var table = this.tableElement,\n        bottomRow = this.getDisplayRows()[this.vDomBottom],\n        bottomRowHeight = bottomRow.getHeight() || this.vDomRowHeight;\n\n    if (bottomDiff >= bottomRowHeight) {\n      var rowEl = bottomRow.getElement();\n\n      if (rowEl.parentNode) {\n        rowEl.parentNode.removeChild(rowEl);\n      }\n\n      this.vDomBottomPad += bottomRowHeight;\n\n      if (this.vDomBottomPad < 0) {\n        this.vDomBottomPad = 0;\n      }\n\n      table.style.paddingBottom = this.vDomBottomPad + \"px\";\n      this.vDomScrollPosBottom -= bottomRowHeight;\n      this.vDomBottom--;\n      bottomDiff = -(this.scrollTop - this.vDomScrollPosBottom);\n\n      this._removeBottomRow(bottomDiff);\n    }\n  };\n\n  RowManager.prototype._quickNormalizeRowHeight = function (rows) {\n    rows.forEach(function (row) {\n      row.calcHeight();\n    });\n    rows.forEach(function (row) {\n      row.setCellHeight();\n    });\n    rows.length = 0;\n  }; //normalize height of active rows\n\n\n  RowManager.prototype.normalizeHeight = function () {\n    this.activeRows.forEach(function (row) {\n      row.normalizeHeight();\n    });\n  }; //adjust the height of the table holder to fit in the Tabulator element\n\n\n  RowManager.prototype.adjustTableSize = function () {\n    if (this.renderMode === \"virtual\") {\n      this.height = this.element.clientHeight;\n      this.vDomWindowBuffer = this.table.options.virtualDomBuffer || this.height;\n      var otherHeight = this.columnManager.getElement().offsetHeight + (this.table.footerManager && !this.table.footerManager.external ? this.table.footerManager.getElement().offsetHeight : 0);\n      this.element.style.minHeight = \"calc(100% - \" + otherHeight + \"px)\";\n      this.element.style.height = \"calc(100% - \" + otherHeight + \"px)\";\n      this.element.style.maxHeight = \"calc(100% - \" + otherHeight + \"px)\";\n    }\n  }; //renitialize all rows\n\n\n  RowManager.prototype.reinitialize = function () {\n    this.rows.forEach(function (row) {\n      row.reinitialize();\n    });\n  }; //redraw table\n\n\n  RowManager.prototype.redraw = function (force) {\n    var pos = 0,\n        left = this.scrollLeft;\n    this.adjustTableSize();\n\n    if (!force) {\n      if (self.renderMode == \"classic\") {\n        if (self.table.options.groupBy) {\n          self.refreshActiveData(\"group\", false, false);\n        } else {\n          this._simpleRender();\n        }\n      } else {\n        this.reRenderInPosition();\n        this.scrollHorizontal(left);\n      }\n\n      if (!this.displayRowsCount) {\n        if (this.table.options.placeholder) {\n          this.getElement().appendChild(this.table.options.placeholder);\n        }\n      }\n    } else {\n      this.renderTable();\n    }\n  };\n\n  RowManager.prototype.resetScroll = function () {\n    this.element.scrollLeft = 0;\n    this.element.scrollTop = 0;\n\n    if (this.table.browser === \"ie\") {\n      var event = document.createEvent(\"Event\");\n      event.initEvent(\"scroll\", false, true);\n      this.element.dispatchEvent(event);\n    } else {\n      this.element.dispatchEvent(new Event('scroll'));\n    }\n  }; //public row object\n\n\n  var RowComponent = function RowComponent(row) {\n    this._row = row;\n  };\n\n  RowComponent.prototype.getData = function (transform) {\n    return this._row.getData(transform);\n  };\n\n  RowComponent.prototype.getElement = function () {\n    return this._row.getElement();\n  };\n\n  RowComponent.prototype.getCells = function () {\n    var cells = [];\n\n    this._row.getCells().forEach(function (cell) {\n      cells.push(cell.getComponent());\n    });\n\n    return cells;\n  };\n\n  RowComponent.prototype.getCell = function (column) {\n    var cell = this._row.getCell(column);\n\n    return cell ? cell.getComponent() : false;\n  };\n\n  RowComponent.prototype.getIndex = function () {\n    return this._row.getData(\"data\")[this._row.table.options.index];\n  };\n\n  RowComponent.prototype.getPosition = function (active) {\n    return this._row.table.rowManager.getRowPosition(this._row, active);\n  };\n\n  RowComponent.prototype.delete = function () {\n    return this._row.delete();\n  };\n\n  RowComponent.prototype.scrollTo = function () {\n    return this._row.table.rowManager.scrollToRow(this._row);\n  };\n\n  RowComponent.prototype.update = function (data) {\n    return this._row.updateData(data);\n  };\n\n  RowComponent.prototype.normalizeHeight = function () {\n    this._row.normalizeHeight(true);\n  };\n\n  RowComponent.prototype.select = function () {\n    this._row.table.modules.selectRow.selectRows(this._row);\n  };\n\n  RowComponent.prototype.deselect = function () {\n    this._row.table.modules.selectRow.deselectRows(this._row);\n  };\n\n  RowComponent.prototype.toggleSelect = function () {\n    this._row.table.modules.selectRow.toggleRow(this._row);\n  };\n\n  RowComponent.prototype.isSelected = function () {\n    return this._row.table.modules.selectRow.isRowSelected(this._row);\n  };\n\n  RowComponent.prototype._getSelf = function () {\n    return this._row;\n  };\n\n  RowComponent.prototype.freeze = function () {\n    if (this._row.table.modExists(\"frozenRows\", true)) {\n      this._row.table.modules.frozenRows.freezeRow(this._row);\n    }\n  };\n\n  RowComponent.prototype.unfreeze = function () {\n    if (this._row.table.modExists(\"frozenRows\", true)) {\n      this._row.table.modules.frozenRows.unfreezeRow(this._row);\n    }\n  };\n\n  RowComponent.prototype.treeCollapse = function () {\n    if (this._row.table.modExists(\"dataTree\", true)) {\n      this._row.table.modules.dataTree.collapseRow(this._row);\n    }\n  };\n\n  RowComponent.prototype.treeExpand = function () {\n    if (this._row.table.modExists(\"dataTree\", true)) {\n      this._row.table.modules.dataTree.expandRow(this._row);\n    }\n  };\n\n  RowComponent.prototype.treeToggle = function () {\n    if (this._row.table.modExists(\"dataTree\", true)) {\n      this._row.table.modules.dataTree.toggleRow(this._row);\n    }\n  };\n\n  RowComponent.prototype.getTreeParent = function () {\n    if (this._row.table.modExists(\"dataTree\", true)) {\n      return this._row.table.modules.dataTree.getTreeParent(this._row);\n    }\n\n    return false;\n  };\n\n  RowComponent.prototype.getTreeChildren = function () {\n    if (this._row.table.modExists(\"dataTree\", true)) {\n      return this._row.table.modules.dataTree.getTreeChildren(this._row);\n    }\n\n    return false;\n  };\n\n  RowComponent.prototype.reformat = function () {\n    return this._row.reinitialize();\n  };\n\n  RowComponent.prototype.getGroup = function () {\n    return this._row.getGroup().getComponent();\n  };\n\n  RowComponent.prototype.getTable = function () {\n    return this._row.table;\n  };\n\n  RowComponent.prototype.getNextRow = function () {\n    return this._row.nextRow();\n  };\n\n  RowComponent.prototype.getPrevRow = function () {\n    return this._row.prevRow();\n  };\n\n  var Row = function Row(data, parent) {\n    this.table = parent.table;\n    this.parent = parent;\n    this.data = {};\n    this.type = \"row\"; //type of element\n\n    this.element = this.createElement();\n    this.modules = {}; //hold module variables;\n\n    this.cells = [];\n    this.height = 0; //hold element height\n\n    this.outerHeight = 0; //holde lements outer height\n\n    this.initialized = false; //element has been rendered\n\n    this.heightInitialized = false; //element has resized cells to fit\n\n    this.setData(data);\n    this.generateElement();\n  };\n\n  Row.prototype.createElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-row\");\n    el.setAttribute(\"role\", \"row\");\n    return el;\n  };\n\n  Row.prototype.getElement = function () {\n    return this.element;\n  };\n\n  Row.prototype.detachElement = function () {\n    if (this.element && this.element.parentNode) {\n      this.element.parentNode.removeChild(this.element);\n    }\n  };\n\n  Row.prototype.generateElement = function () {\n    var self = this,\n        dblTap,\n        tapHold,\n        tap; //set row selection characteristics\n\n    if (self.table.options.selectable !== false && self.table.modExists(\"selectRow\")) {\n      self.table.modules.selectRow.initializeRow(this);\n    } //setup movable rows\n\n\n    if (self.table.options.movableRows !== false && self.table.modExists(\"moveRow\")) {\n      self.table.modules.moveRow.initializeRow(this);\n    } //setup data tree\n\n\n    if (self.table.options.dataTree !== false && self.table.modExists(\"dataTree\")) {\n      self.table.modules.dataTree.initializeRow(this);\n    } //handle row click events\n\n\n    if (self.table.options.rowClick) {\n      self.element.addEventListener(\"click\", function (e) {\n        self.table.options.rowClick(e, self.getComponent());\n      });\n    }\n\n    if (self.table.options.rowDblClick) {\n      self.element.addEventListener(\"dblclick\", function (e) {\n        self.table.options.rowDblClick(e, self.getComponent());\n      });\n    }\n\n    if (self.table.options.rowContext) {\n      self.element.addEventListener(\"contextmenu\", function (e) {\n        self.table.options.rowContext(e, self.getComponent());\n      });\n    }\n\n    if (self.table.options.rowTap) {\n      tap = false;\n      self.element.addEventListener(\"touchstart\", function (e) {\n        tap = true;\n      });\n      self.element.addEventListener(\"touchend\", function (e) {\n        if (tap) {\n          self.table.options.rowTap(e, self.getComponent());\n        }\n\n        tap = false;\n      });\n    }\n\n    if (self.table.options.rowDblTap) {\n      dblTap = null;\n      self.element.addEventListener(\"touchend\", function (e) {\n        if (dblTap) {\n          clearTimeout(dblTap);\n          dblTap = null;\n          self.table.options.rowDblTap(e, self.getComponent());\n        } else {\n          dblTap = setTimeout(function () {\n            clearTimeout(dblTap);\n            dblTap = null;\n          }, 300);\n        }\n      });\n    }\n\n    if (self.table.options.rowTapHold) {\n      tapHold = null;\n      self.element.addEventListener(\"touchstart\", function (e) {\n        clearTimeout(tapHold);\n        tapHold = setTimeout(function () {\n          clearTimeout(tapHold);\n          tapHold = null;\n          tap = false;\n          self.table.options.rowTapHold(e, self.getComponent());\n        }, 1000);\n      });\n      self.element.addEventListener(\"touchend\", function (e) {\n        clearTimeout(tapHold);\n        tapHold = null;\n      });\n    }\n  };\n\n  Row.prototype.generateCells = function () {\n    this.cells = this.table.columnManager.generateCells(this);\n  }; //functions to setup on first render\n\n\n  Row.prototype.initialize = function (force) {\n    var self = this;\n\n    if (!self.initialized || force) {\n      self.deleteCells();\n\n      while (self.element.firstChild) {\n        self.element.removeChild(self.element.firstChild);\n      } //handle frozen cells\n\n\n      if (this.table.modExists(\"frozenColumns\")) {\n        this.table.modules.frozenColumns.layoutRow(this);\n      }\n\n      this.generateCells();\n      self.cells.forEach(function (cell) {\n        self.element.appendChild(cell.getElement());\n        cell.cellRendered();\n      });\n\n      if (force) {\n        self.normalizeHeight();\n      } //setup movable rows\n\n\n      if (self.table.options.dataTree && self.table.modExists(\"dataTree\")) {\n        self.table.modules.dataTree.layoutRow(this);\n      } //setup movable rows\n\n\n      if (self.table.options.responsiveLayout === \"collapse\" && self.table.modExists(\"responsiveLayout\")) {\n        self.table.modules.responsiveLayout.layoutRow(this);\n      }\n\n      if (self.table.options.rowFormatter) {\n        self.table.options.rowFormatter(self.getComponent());\n      } //set resizable handles\n\n\n      if (self.table.options.resizableRows && self.table.modExists(\"resizeRows\")) {\n        self.table.modules.resizeRows.initializeRow(self);\n      }\n\n      self.initialized = true;\n    }\n  };\n\n  Row.prototype.reinitializeHeight = function () {\n    this.heightInitialized = false;\n\n    if (this.element.offsetParent !== null) {\n      this.normalizeHeight(true);\n    }\n  };\n\n  Row.prototype.reinitialize = function () {\n    this.initialized = false;\n    this.heightInitialized = false;\n    this.height = 0;\n\n    if (this.element.offsetParent !== null) {\n      this.initialize(true);\n    }\n  }; //get heights when doing bulk row style calcs in virtual DOM\n\n\n  Row.prototype.calcHeight = function () {\n    var maxHeight = 0,\n        minHeight = this.table.options.resizableRows ? this.element.clientHeight : 0;\n    this.cells.forEach(function (cell) {\n      var height = cell.getHeight();\n\n      if (height > maxHeight) {\n        maxHeight = height;\n      }\n    });\n    this.height = Math.max(maxHeight, minHeight);\n    this.outerHeight = this.element.offsetHeight;\n  }; //set of cells\n\n\n  Row.prototype.setCellHeight = function () {\n    var height = this.height;\n    this.cells.forEach(function (cell) {\n      cell.setHeight(height);\n    });\n    this.heightInitialized = true;\n  };\n\n  Row.prototype.clearCellHeight = function () {\n    this.cells.forEach(function (cell) {\n      cell.clearHeight();\n    });\n  }; //normalize the height of elements in the row\n\n\n  Row.prototype.normalizeHeight = function (force) {\n    if (force) {\n      this.clearCellHeight();\n    }\n\n    this.calcHeight();\n    this.setCellHeight();\n  };\n\n  Row.prototype.setHeight = function (height) {\n    this.height = height;\n    this.setCellHeight();\n  }; //set height of rows\n\n\n  Row.prototype.setHeight = function (height, force) {\n    if (this.height != height || force) {\n      this.height = height;\n      this.setCellHeight(); // this.outerHeight = this.element.outerHeight();\n\n      this.outerHeight = this.element.offsetHeight;\n    }\n  }; //return rows outer height\n\n\n  Row.prototype.getHeight = function () {\n    return this.outerHeight;\n  }; //return rows outer Width\n\n\n  Row.prototype.getWidth = function () {\n    return this.element.offsetWidth;\n  }; //////////////// Cell Management /////////////////\n\n\n  Row.prototype.deleteCell = function (cell) {\n    var index = this.cells.indexOf(cell);\n\n    if (index > -1) {\n      this.cells.splice(index, 1);\n    }\n  }; //////////////// Data Management /////////////////\n\n\n  Row.prototype.setData = function (data) {\n    var self = this;\n\n    if (self.table.modExists(\"mutator\")) {\n      self.data = self.table.modules.mutator.transformRow(data, \"data\");\n    } else {\n      self.data = data;\n    }\n  }; //update the rows data\n\n\n  Row.prototype.updateData = function (data) {\n    var _this5 = this;\n\n    var self = this;\n    return new Promise(function (resolve, reject) {\n      if (typeof data === \"string\") {\n        data = JSON.parse(data);\n      } //mutate incomming data if needed\n\n\n      if (self.table.modExists(\"mutator\")) {\n        data = self.table.modules.mutator.transformRow(data, \"data\", true);\n      } //set data\n\n\n      for (var attrname in data) {\n        self.data[attrname] = data[attrname];\n      } //update affected cells only\n\n\n      for (var attrname in data) {\n        var cell = _this5.getCell(attrname);\n\n        if (cell) {\n          if (cell.getValue() != data[attrname]) {\n            cell.setValueProcessData(data[attrname]);\n          }\n        }\n      } //Partial reinitialization if visible\n\n\n      if (Tabulator.prototype.helpers.elVisible(_this5.element)) {\n        self.normalizeHeight();\n\n        if (self.table.options.rowFormatter) {\n          self.table.options.rowFormatter(self.getComponent());\n        }\n      } else {\n        _this5.initialized = false;\n        _this5.height = 0;\n      } //self.reinitialize();\n\n\n      self.table.options.rowUpdated.call(_this5.table, self.getComponent());\n      resolve();\n    });\n  };\n\n  Row.prototype.getData = function (transform) {\n    var self = this;\n\n    if (transform) {\n      if (self.table.modExists(\"accessor\")) {\n        return self.table.modules.accessor.transformRow(self.data, transform);\n      }\n    } else {\n      return this.data;\n    }\n  };\n\n  Row.prototype.getCell = function (column) {\n    var match = false;\n    column = this.table.columnManager.findColumn(column);\n    match = this.cells.find(function (cell) {\n      return cell.column === column;\n    });\n    return match;\n  };\n\n  Row.prototype.getCellIndex = function (findCell) {\n    return this.cells.findIndex(function (cell) {\n      return cell === findCell;\n    });\n  };\n\n  Row.prototype.findNextEditableCell = function (index) {\n    var nextCell = false;\n\n    if (index < this.cells.length - 1) {\n      for (var i = index + 1; i < this.cells.length; i++) {\n        var cell = this.cells[i];\n\n        if (cell.column.modules.edit && Tabulator.prototype.helpers.elVisible(cell.getElement())) {\n          var allowEdit = true;\n\n          if (typeof cell.column.modules.edit.check == \"function\") {\n            allowEdit = cell.column.modules.edit.check(cell.getComponent());\n          }\n\n          if (allowEdit) {\n            nextCell = cell;\n            break;\n          }\n        }\n      }\n    }\n\n    return nextCell;\n  };\n\n  Row.prototype.findPrevEditableCell = function (index) {\n    var prevCell = false;\n\n    if (index > 0) {\n      for (var i = index - 1; i >= 0; i--) {\n        var cell = this.cells[i],\n            allowEdit = true;\n\n        if (cell.column.modules.edit && Tabulator.prototype.helpers.elVisible(cell.getElement())) {\n          if (typeof cell.column.modules.edit.check == \"function\") {\n            allowEdit = cell.column.modules.edit.check(cell.getComponent());\n          }\n\n          if (allowEdit) {\n            prevCell = cell;\n            break;\n          }\n        }\n      }\n    }\n\n    return prevCell;\n  };\n\n  Row.prototype.getCells = function () {\n    return this.cells;\n  };\n\n  Row.prototype.nextRow = function () {\n    var row = this.table.rowManager.nextDisplayRow(this, true);\n    return row ? row.getComponent() : false;\n  };\n\n  Row.prototype.prevRow = function () {\n    var row = this.table.rowManager.prevDisplayRow(this, true);\n    return row ? row.getComponent() : false;\n  }; ///////////////////// Actions  /////////////////////\n\n\n  Row.prototype.delete = function () {\n    var _this6 = this;\n\n    return new Promise(function (resolve, reject) {\n      var index = _this6.table.rowManager.getRowIndex(_this6);\n\n      _this6.deleteActual();\n\n      if (_this6.table.options.history && _this6.table.modExists(\"history\")) {\n        if (index) {\n          index = _this6.table.rowManager.rows[index - 1];\n        }\n\n        _this6.table.modules.history.action(\"rowDelete\", _this6, {\n          data: _this6.getData(),\n          pos: !index,\n          index: index\n        });\n      }\n\n      resolve();\n    });\n  };\n\n  Row.prototype.deleteActual = function () {\n    var index = this.table.rowManager.getRowIndex(this); //deselect row if it is selected\n\n    if (this.table.modExists(\"selectRow\")) {\n      this.table.modules.selectRow._deselectRow(this, true);\n    } // if(this.table.options.dataTree && this.table.modExists(\"dataTree\")){\n    // \tthis.table.modules.dataTree.collapseRow(this, true);\n    // }\n\n\n    this.table.rowManager.deleteRow(this);\n    this.deleteCells();\n    this.initialized = false;\n    this.heightInitialized = false; //remove from group\n\n    if (this.modules.group) {\n      this.modules.group.removeRow(this);\n    } //recalc column calculations if present\n\n\n    if (this.table.modExists(\"columnCalcs\")) {\n      if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n        this.table.modules.columnCalcs.recalcRowGroup(this);\n      } else {\n        this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n      }\n    }\n  };\n\n  Row.prototype.deleteCells = function () {\n    var cellCount = this.cells.length;\n\n    for (var i = 0; i < cellCount; i++) {\n      this.cells[0].delete();\n    }\n  };\n\n  Row.prototype.wipe = function () {\n    this.deleteCells(); // this.element.children().each(function(){\n    // \t$(this).remove();\n    // })\n    // this.element.empty();\n\n    while (this.element.firstChild) {\n      this.element.removeChild(this.element.firstChild);\n    } // this.element.remove();\n\n\n    if (this.element.parentNode) {\n      this.element.parentNode.removeChild(this.element);\n    }\n  };\n\n  Row.prototype.getGroup = function () {\n    return this.modules.group || false;\n  }; //////////////// Object Generation /////////////////\n\n\n  Row.prototype.getComponent = function () {\n    return new RowComponent(this);\n  }; //public row object\n\n\n  var CellComponent = function CellComponent(cell) {\n    this._cell = cell;\n  };\n\n  CellComponent.prototype.getValue = function () {\n    return this._cell.getValue();\n  };\n\n  CellComponent.prototype.getOldValue = function () {\n    return this._cell.getOldValue();\n  };\n\n  CellComponent.prototype.getElement = function () {\n    return this._cell.getElement();\n  };\n\n  CellComponent.prototype.getRow = function () {\n    return this._cell.row.getComponent();\n  };\n\n  CellComponent.prototype.getData = function () {\n    return this._cell.row.getData();\n  };\n\n  CellComponent.prototype.getField = function () {\n    return this._cell.column.getField();\n  };\n\n  CellComponent.prototype.getColumn = function () {\n    return this._cell.column.getComponent();\n  };\n\n  CellComponent.prototype.setValue = function (value, mutate) {\n    if (typeof mutate == \"undefined\") {\n      mutate = true;\n    }\n\n    this._cell.setValue(value, mutate);\n  };\n\n  CellComponent.prototype.restoreOldValue = function () {\n    this._cell.setValueActual(this._cell.getOldValue());\n  };\n\n  CellComponent.prototype.edit = function (force) {\n    return this._cell.edit(force);\n  };\n\n  CellComponent.prototype.cancelEdit = function () {\n    this._cell.cancelEdit();\n  };\n\n  CellComponent.prototype.nav = function () {\n    return this._cell.nav();\n  };\n\n  CellComponent.prototype.checkHeight = function () {\n    this._cell.checkHeight();\n  };\n\n  CellComponent.prototype.getTable = function () {\n    return this._cell.table;\n  };\n\n  CellComponent.prototype._getSelf = function () {\n    return this._cell;\n  };\n\n  var Cell = function Cell(column, row) {\n    this.table = column.table;\n    this.column = column;\n    this.row = row;\n    this.element = null;\n    this.value = null;\n    this.oldValue = null;\n    this.height = null;\n    this.width = null;\n    this.minWidth = null;\n    this.build();\n  }; //////////////// Setup Functions /////////////////\n  //generate element\n\n\n  Cell.prototype.build = function () {\n    this.generateElement();\n    this.setWidth(this.column.width);\n\n    this._configureCell();\n\n    this.setValueActual(this.column.getFieldValue(this.row.data));\n  };\n\n  Cell.prototype.generateElement = function () {\n    this.element = document.createElement('div');\n    this.element.className = \"tabulator-cell\";\n    this.element.setAttribute(\"role\", \"gridcell\");\n    this.element = this.element;\n  };\n\n  Cell.prototype._configureCell = function () {\n    var self = this,\n        cellEvents = self.column.cellEvents,\n        element = self.element,\n        field = this.column.getField(),\n        dblTap,\n        tapHold,\n        tap; //set text alignment\n\n    element.style.textAlign = self.column.hozAlign;\n\n    if (field) {\n      element.setAttribute(\"tabulator-field\", field);\n    }\n\n    if (self.column.definition.cssClass) {\n      element.classList.add(self.column.definition.cssClass);\n    } //set event bindings\n\n\n    if (cellEvents.cellClick || self.table.options.cellClick) {\n      self.element.addEventListener(\"click\", function (e) {\n        var component = self.getComponent();\n\n        if (cellEvents.cellClick) {\n          cellEvents.cellClick.call(self.table, e, component);\n        }\n\n        if (self.table.options.cellClick) {\n          self.table.options.cellClick.call(self.table, e, component);\n        }\n      });\n    }\n\n    if (cellEvents.cellDblClick || this.table.options.cellDblClick) {\n      element.addEventListener(\"dblclick\", function (e) {\n        var component = self.getComponent();\n\n        if (cellEvents.cellDblClick) {\n          cellEvents.cellDblClick.call(self.table, e, component);\n        }\n\n        if (self.table.options.cellDblClick) {\n          self.table.options.cellDblClick.call(self.table, e, component);\n        }\n      });\n    }\n\n    if (cellEvents.cellContext || this.table.options.cellContext) {\n      element.addEventListener(\"contextmenu\", function (e) {\n        var component = self.getComponent();\n\n        if (cellEvents.cellContext) {\n          cellEvents.cellContext.call(self.table, e, component);\n        }\n\n        if (self.table.options.cellContext) {\n          self.table.options.cellContext.call(self.table, e, component);\n        }\n      });\n    }\n\n    if (this.table.options.tooltipGenerationMode === \"hover\") {\n      //update tooltip on mouse enter\n      element.addEventListener(\"mouseenter\", function (e) {\n        self._generateTooltip();\n      });\n    }\n\n    if (cellEvents.cellTap || this.table.options.cellTap) {\n      tap = false;\n      element.addEventListener(\"touchstart\", function (e) {\n        tap = true;\n      });\n      element.addEventListener(\"touchend\", function (e) {\n        if (tap) {\n          var component = self.getComponent();\n\n          if (cellEvents.cellTap) {\n            cellEvents.cellTap.call(self.table, e, component);\n          }\n\n          if (self.table.options.cellTap) {\n            self.table.options.cellTap.call(self.table, e, component);\n          }\n        }\n\n        tap = false;\n      });\n    }\n\n    if (cellEvents.cellDblTap || this.table.options.cellDblTap) {\n      dblTap = null;\n      element.addEventListener(\"touchend\", function (e) {\n        if (dblTap) {\n          clearTimeout(dblTap);\n          dblTap = null;\n          var component = self.getComponent();\n\n          if (cellEvents.cellDblTap) {\n            cellEvents.cellDblTap.call(self.table, e, component);\n          }\n\n          if (self.table.options.cellDblTap) {\n            self.table.options.cellDblTap.call(self.table, e, component);\n          }\n        } else {\n          dblTap = setTimeout(function () {\n            clearTimeout(dblTap);\n            dblTap = null;\n          }, 300);\n        }\n      });\n    }\n\n    if (cellEvents.cellTapHold || this.table.options.cellTapHold) {\n      tapHold = null;\n      element.addEventListener(\"touchstart\", function (e) {\n        clearTimeout(tapHold);\n        tapHold = setTimeout(function () {\n          clearTimeout(tapHold);\n          tapHold = null;\n          tap = false;\n          var component = self.getComponent();\n\n          if (cellEvents.cellTapHold) {\n            cellEvents.cellTapHold.call(self.table, e, component);\n          }\n\n          if (self.table.options.cellTapHold) {\n            self.table.options.cellTapHold.call(self.table, e, component);\n          }\n        }, 1000);\n      });\n      element.addEventListener(\"touchend\", function (e) {\n        clearTimeout(tapHold);\n        tapHold = null;\n      });\n    }\n\n    if (self.column.modules.edit) {\n      self.table.modules.edit.bindEditor(self);\n    }\n\n    if (self.column.definition.rowHandle && self.table.options.movableRows !== false && self.table.modExists(\"moveRow\")) {\n      self.table.modules.moveRow.initializeCell(self);\n    } //hide cell if not visible\n\n\n    if (!self.column.visible) {\n      self.hide();\n    }\n  }; //generate cell contents\n\n\n  Cell.prototype._generateContents = function () {\n    var val;\n\n    if (this.table.modExists(\"format\")) {\n      val = this.table.modules.format.formatValue(this);\n    } else {\n      val = this.element.innerHTML = this.value;\n    }\n\n    switch (typeof val === 'undefined' ? 'undefined' : _typeof(val)) {\n      case \"object\":\n        if (val instanceof Node) {\n          this.element.appendChild(val);\n        } else {\n          this.element.innerHTML = \"\";\n          console.warn(\"Format Error - Formatter has returned a type of object, the only valid formatter object return is an instance of Node, the formatter returned:\", val);\n        }\n\n        break;\n\n      case \"undefined\":\n      case \"null\":\n        this.element.innerHTML = \"\";\n        break;\n\n      default:\n        this.element.innerHTML = val;\n    }\n  };\n\n  Cell.prototype.cellRendered = function () {\n    if (this.table.modExists(\"format\") && this.table.modules.format.cellRendered) {\n      this.table.modules.format.cellRendered(this);\n    }\n  }; //generate tooltip text\n\n\n  Cell.prototype._generateTooltip = function () {\n    var tooltip = this.column.tooltip;\n\n    if (tooltip) {\n      if (tooltip === true) {\n        tooltip = this.value;\n      } else if (typeof tooltip == \"function\") {\n        tooltip = tooltip(this.getComponent());\n\n        if (tooltip === false) {\n          tooltip = \"\";\n        }\n      }\n\n      if (typeof tooltip === \"undefined\") {\n        tooltip = \"\";\n      }\n\n      this.element.setAttribute(\"title\", tooltip);\n    } else {\n      this.element.setAttribute(\"title\", \"\");\n    }\n  }; //////////////////// Getters ////////////////////\n\n\n  Cell.prototype.getElement = function () {\n    return this.element;\n  };\n\n  Cell.prototype.getValue = function () {\n    return this.value;\n  };\n\n  Cell.prototype.getOldValue = function () {\n    return this.oldValue;\n  }; //////////////////// Actions ////////////////////\n\n\n  Cell.prototype.setValue = function (value, mutate) {\n    var changed = this.setValueProcessData(value, mutate),\n        component;\n\n    if (changed) {\n      if (this.table.options.history && this.table.modExists(\"history\")) {\n        this.table.modules.history.action(\"cellEdit\", this, {\n          oldValue: this.oldValue,\n          newValue: this.value\n        });\n      }\n\n      component = this.getComponent();\n\n      if (this.column.cellEvents.cellEdited) {\n        this.column.cellEvents.cellEdited.call(this.table, component);\n      }\n\n      this.table.options.cellEdited.call(this.table, component);\n      this.table.options.dataEdited.call(this.table, this.table.rowManager.getData());\n    }\n\n    if (this.table.modExists(\"columnCalcs\")) {\n      if (this.column.definition.topCalc || this.column.definition.bottomCalc) {\n        if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n          this.table.modules.columnCalcs.recalcRowGroup(this.row);\n        } else {\n          this.table.modules.columnCalcs.recalc(this.table.rowManager.activeRows);\n        }\n      }\n    }\n  };\n\n  Cell.prototype.setValueProcessData = function (value, mutate) {\n    var changed = false;\n\n    if (this.value != value) {\n      changed = true;\n\n      if (mutate) {\n        if (this.column.modules.mutate) {\n          value = this.table.modules.mutator.transformCell(this, value);\n        }\n      }\n    }\n\n    this.setValueActual(value);\n    return changed;\n  };\n\n  Cell.prototype.setValueActual = function (value) {\n    this.oldValue = this.value;\n    this.value = value;\n    this.column.setFieldValue(this.row.data, value);\n\n    this._generateContents();\n\n    this._generateTooltip(); //set resizable handles\n\n\n    if (this.table.options.resizableColumns && this.table.modExists(\"resizeColumns\")) {\n      this.table.modules.resizeColumns.initializeColumn(\"cell\", this.column, this.element);\n    } //handle frozen cells\n\n\n    if (this.table.modExists(\"frozenColumns\")) {\n      this.table.modules.frozenColumns.layoutElement(this.element, this.column);\n    }\n  };\n\n  Cell.prototype.setWidth = function (width) {\n    this.width = width; // this.element.css(\"width\", width || \"\");\n\n    this.element.style.width = width ? width + \"px\" : \"\";\n  };\n\n  Cell.prototype.getWidth = function () {\n    return this.width || this.element.offsetWidth;\n  };\n\n  Cell.prototype.setMinWidth = function (minWidth) {\n    this.minWidth = minWidth;\n    this.element.style.minWidth = minWidth ? minWidth + \"px\" : \"\";\n  };\n\n  Cell.prototype.checkHeight = function () {\n    // var height = this.element.css(\"height\");\n    this.row.reinitializeHeight();\n  };\n\n  Cell.prototype.clearHeight = function () {\n    this.element.style.height = \"\";\n    this.height = null;\n  };\n\n  Cell.prototype.setHeight = function (height) {\n    this.height = height;\n    this.element.style.height = height ? height + \"px\" : \"\";\n  };\n\n  Cell.prototype.getHeight = function () {\n    return this.height || this.element.offsetHeight;\n  };\n\n  Cell.prototype.show = function () {\n    this.element.style.display = \"\";\n  };\n\n  Cell.prototype.hide = function () {\n    this.element.style.display = \"none\";\n  };\n\n  Cell.prototype.edit = function (force) {\n    if (this.table.modExists(\"edit\", true)) {\n      return this.table.modules.edit.editCell(this, force);\n    }\n  };\n\n  Cell.prototype.cancelEdit = function () {\n    if (this.table.modExists(\"edit\", true)) {\n      var editing = this.table.modules.edit.getCurrentCell();\n\n      if (editing && editing._getSelf() === this) {\n        this.table.modules.edit.cancelEdit();\n      } else {\n        console.warn(\"Cancel Editor Error - This cell is not currently being edited \");\n      }\n    }\n  };\n\n  Cell.prototype.delete = function () {\n    this.element.parentNode.removeChild(this.element);\n    this.column.deleteCell(this);\n    this.row.deleteCell(this);\n  }; //////////////// Navigation /////////////////\n\n\n  Cell.prototype.nav = function () {\n    var self = this,\n        nextCell = false,\n        index = this.row.getCellIndex(this);\n    return {\n      next: function next() {\n        var nextCell = this.right(),\n            nextRow;\n\n        if (!nextCell) {\n          nextRow = self.table.rowManager.nextDisplayRow(self.row, true);\n\n          if (nextRow) {\n            nextCell = nextRow.findNextEditableCell(-1);\n\n            if (nextCell) {\n              nextCell.edit();\n              return true;\n            }\n          }\n        } else {\n          return true;\n        }\n\n        return false;\n      },\n      prev: function prev() {\n        var nextCell = this.left(),\n            prevRow;\n\n        if (!nextCell) {\n          prevRow = self.table.rowManager.prevDisplayRow(self.row, true);\n\n          if (prevRow) {\n            nextCell = prevRow.findPrevEditableCell(prevRow.cells.length);\n\n            if (nextCell) {\n              nextCell.edit();\n              return true;\n            }\n          }\n        } else {\n          return true;\n        }\n\n        return false;\n      },\n      left: function left() {\n        nextCell = self.row.findPrevEditableCell(index);\n\n        if (nextCell) {\n          nextCell.edit();\n          return true;\n        } else {\n          return false;\n        }\n      },\n      right: function right() {\n        nextCell = self.row.findNextEditableCell(index);\n\n        if (nextCell) {\n          nextCell.edit();\n          return true;\n        } else {\n          return false;\n        }\n      },\n      up: function up() {\n        var nextRow = self.table.rowManager.prevDisplayRow(self.row, true);\n\n        if (nextRow) {\n          nextRow.cells[index].edit();\n        }\n      },\n      down: function down() {\n        var nextRow = self.table.rowManager.nextDisplayRow(self.row, true);\n\n        if (nextRow) {\n          nextRow.cells[index].edit();\n        }\n      }\n    };\n  };\n\n  Cell.prototype.getIndex = function () {\n    this.row.getCellIndex(this);\n  }; //////////////// Object Generation /////////////////\n\n\n  Cell.prototype.getComponent = function () {\n    return new CellComponent(this);\n  };\n\n  var FooterManager = function FooterManager(table) {\n    this.table = table;\n    this.active = false;\n    this.element = this.createElement(); //containing element\n\n    this.external = false;\n    this.links = [];\n\n    this._initialize();\n  };\n\n  FooterManager.prototype.createElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-footer\");\n    return el;\n  };\n\n  FooterManager.prototype._initialize = function (element) {\n    if (this.table.options.footerElement) {\n      switch (_typeof(this.table.options.footerElement)) {\n        case \"string\":\n          if (this.table.options.footerElement[0] === \"<\") {\n            this.element.innerHTML = this.table.options.footerElement;\n          } else {\n            this.external = true;\n            this.element = document.querySelector(this.table.options.footerElement);\n          }\n\n          break;\n\n        default:\n          this.element = this.table.options.footerElement;\n          break;\n      }\n    }\n  };\n\n  FooterManager.prototype.getElement = function () {\n    return this.element;\n  };\n\n  FooterManager.prototype.append = function (element, parent) {\n    this.activate(parent);\n    this.element.appendChild(element);\n    this.table.rowManager.adjustTableSize();\n  };\n\n  FooterManager.prototype.prepend = function (element, parent) {\n    this.activate(parent);\n    this.element.insertBefore(element, this.element.firstChild);\n    this.table.rowManager.adjustTableSize();\n  };\n\n  FooterManager.prototype.remove = function (element) {\n    element.parentNode.removeChild(element);\n    this.deactivate();\n  };\n\n  FooterManager.prototype.deactivate = function (force) {\n    if (!this.element.firstChild || force) {\n      if (!this.external) {\n        this.element.parentNode.removeChild(this.element);\n      }\n\n      this.active = false;\n    } // this.table.rowManager.adjustTableSize();\n\n  };\n\n  FooterManager.prototype.activate = function (parent) {\n    if (!this.active) {\n      this.active = true;\n\n      if (!this.external) {\n        this.table.element.appendChild(this.getElement());\n        this.table.element.style.display = '';\n      }\n    }\n\n    if (parent) {\n      this.links.push(parent);\n    }\n  };\n\n  FooterManager.prototype.redraw = function () {\n    this.links.forEach(function (link) {\n      link.footerRedraw();\n    });\n  };\n\n  var Tabulator = function Tabulator(element, options) {\n    this.options = {};\n    this.columnManager = null; // hold Column Manager\n\n    this.rowManager = null; //hold Row Manager\n\n    this.footerManager = null; //holder Footer Manager\n\n    this.browser = \"\"; //hold current browser type\n\n    this.browserSlow = false; //handle reduced functionality for slower browsers\n\n    this.modules = {}; //hold all modules bound to this table\n\n    this.initializeElement(element);\n    this.initializeOptions(options || {});\n\n    this._create();\n\n    Tabulator.prototype.comms.register(this); //register table for inderdevice communication\n  }; //default setup options\n\n\n  Tabulator.prototype.defaultOptions = {\n    height: false,\n    //height of tabulator\n    layout: \"fitData\",\n    ///layout type \"fitColumns\" | \"fitData\"\n    layoutColumnsOnNewData: false,\n    //update column widths on setData\n    columnMinWidth: 40,\n    //minimum global width for a column\n    columnVertAlign: \"top\",\n    //vertical alignment of column headers\n    resizableColumns: true,\n    //resizable columns\n    resizableRows: false,\n    //resizable rows\n    autoResize: true,\n    //auto resize table\n    columns: [],\n    //store for colum header info\n    data: [],\n    //default starting data\n    nestedFieldSeparator: \".\",\n    //seperatpr for nested data\n    tooltips: false,\n    //Tool tip value\n    tooltipsHeader: false,\n    //Tool tip for headers\n    tooltipGenerationMode: \"load\",\n    //when to generate tooltips\n    initialSort: false,\n    //initial sorting criteria\n    initialFilter: false,\n    //initial filtering criteria\n    columnHeaderSortMulti: true,\n    //multiple or single column sorting\n    sortOrderReverse: false,\n    //reverse internal sort ordering\n    footerElement: false,\n    //hold footer element\n    index: \"id\",\n    //filed for row index\n    keybindings: [],\n    //array for keybindings\n    clipboard: false,\n    //enable clipboard\n    clipboardCopyStyled: true,\n    //formatted table data\n    clipboardCopySelector: \"active\",\n    //method of chosing which data is coppied to the clipboard\n    clipboardCopyFormatter: \"table\",\n    //convert data to a clipboard string\n    clipboardPasteParser: \"table\",\n    //convert pasted clipboard data to rows\n    clipboardPasteAction: \"insert\",\n    //how to insert pasted data into the table\n    clipboardCopyConfig: false,\n    //clipboard config\n    clipboardCopied: function clipboardCopied() {},\n    //data has been copied to the clipboard\n    clipboardPasted: function clipboardPasted() {},\n    //data has been pasted into the table\n    clipboardPasteError: function clipboardPasteError() {},\n    //data has not successfully been pasted into the table\n    downloadDataFormatter: false,\n    //function to manipulate table data before it is downloaded\n    downloadReady: function downloadReady(data, blob) {\n      return blob;\n    },\n    //function to manipulate download data\n    downloadComplete: false,\n    //function to manipulate download data\n    downloadConfig: false,\n    //download config\n    dataTree: false,\n    //enable data tree\n    dataTreeBranchElement: true,\n    //show data tree branch element\n    dataTreeChildIndent: 9,\n    //data tree child indent in px\n    dataTreeChildField: \"_children\",\n    //data tre column field to look for child rows\n    dataTreeCollapseElement: false,\n    //data tree row collapse element\n    dataTreeExpandElement: false,\n    //data tree row expand element\n    dataTreeStartExpanded: false,\n    dataTreeRowExpanded: function dataTreeRowExpanded() {},\n    //row has been expanded\n    dataTreeRowCollapsed: function dataTreeRowCollapsed() {},\n    //row has been collapsed\n    addRowPos: \"bottom\",\n    //position to insert blank rows, top|bottom\n    selectable: \"highlight\",\n    //highlight rows on hover\n    selectableRangeMode: \"drag\",\n    //highlight rows on hover\n    selectableRollingSelection: true,\n    //roll selection once maximum number of selectable rows is reached\n    selectablePersistence: true,\n    // maintain selection when table view is updated\n    selectableCheck: function selectableCheck(data, row) {\n      return true;\n    },\n    //check wheather row is selectable\n    headerFilterPlaceholder: false,\n    //placeholder text to display in header filters\n    history: false,\n    //enable edit history\n    locale: false,\n    //current system language\n    langs: {},\n    virtualDom: true,\n    //enable DOM virtualization\n    persistentLayout: false,\n    //store column layout in memory\n    persistentSort: false,\n    //store sorting in memory\n    persistentFilter: false,\n    //store filters in memory\n    persistenceID: \"\",\n    //key for persistent storage\n    persistenceMode: true,\n    //mode for storing persistence information\n    responsiveLayout: false,\n    //responsive layout flags\n    responsiveLayoutCollapseStartOpen: true,\n    //start showing collapsed data\n    responsiveLayoutCollapseUseFormatters: true,\n    //responsive layout collapse formatter\n    responsiveLayoutCollapseFormatter: false,\n    //responsive layout collapse formatter\n    pagination: false,\n    //set pagination type\n    paginationSize: false,\n    //set number of rows to a page\n    paginationButtonCount: 5,\n    // set count of page button\n    paginationElement: false,\n    //element to hold pagination numbers\n    paginationDataSent: {},\n    //pagination data sent to the server\n    paginationDataReceived: {},\n    //pagination data received from the server\n    paginationAddRow: \"page\",\n    //add rows on table or page\n    ajaxURL: false,\n    //url for ajax loading\n    ajaxURLGenerator: false,\n    ajaxParams: {},\n    //params for ajax loading\n    ajaxConfig: \"get\",\n    //ajax request type\n    ajaxContentType: \"form\",\n    //ajax request type\n    ajaxRequestFunc: false,\n    //promise function\n    ajaxLoader: true,\n    //show loader\n    ajaxLoaderLoading: false,\n    //loader element\n    ajaxLoaderError: false,\n    //loader element\n    ajaxFiltering: false,\n    ajaxSorting: false,\n    ajaxProgressiveLoad: false,\n    //progressive loading\n    ajaxProgressiveLoadDelay: 0,\n    //delay between requests\n    ajaxProgressiveLoadScrollMargin: 0,\n    //margin before scroll begins\n    groupBy: false,\n    //enable table grouping and set field to group by\n    groupStartOpen: true,\n    //starting state of group\n    groupValues: false,\n    groupHeader: false,\n    //header generation function\n    movableColumns: false,\n    //enable movable columns\n    movableRows: false,\n    //enable movable rows\n    movableRowsConnectedTables: false,\n    //tables for movable rows to be connected to\n    movableRowsSender: false,\n    movableRowsReceiver: \"insert\",\n    movableRowsSendingStart: function movableRowsSendingStart() {},\n    movableRowsSent: function movableRowsSent() {},\n    movableRowsSentFailed: function movableRowsSentFailed() {},\n    movableRowsSendingStop: function movableRowsSendingStop() {},\n    movableRowsReceivingStart: function movableRowsReceivingStart() {},\n    movableRowsReceived: function movableRowsReceived() {},\n    movableRowsReceivedFailed: function movableRowsReceivedFailed() {},\n    movableRowsReceivingStop: function movableRowsReceivingStop() {},\n    scrollToRowPosition: \"top\",\n    scrollToRowIfVisible: true,\n    scrollToColumnPosition: \"left\",\n    scrollToColumnIfVisible: true,\n    rowFormatter: false,\n    placeholder: false,\n    //table building callbacks\n    tableBuilding: function tableBuilding() {},\n    tableBuilt: function tableBuilt() {},\n    //render callbacks\n    renderStarted: function renderStarted() {},\n    renderComplete: function renderComplete() {},\n    //row callbacks\n    rowClick: false,\n    rowDblClick: false,\n    rowContext: false,\n    rowTap: false,\n    rowDblTap: false,\n    rowTapHold: false,\n    rowAdded: function rowAdded() {},\n    rowDeleted: function rowDeleted() {},\n    rowMoved: function rowMoved() {},\n    rowUpdated: function rowUpdated() {},\n    rowSelectionChanged: function rowSelectionChanged() {},\n    rowSelected: function rowSelected() {},\n    rowDeselected: function rowDeselected() {},\n    rowResized: function rowResized() {},\n    //cell callbacks\n    //row callbacks\n    cellClick: false,\n    cellDblClick: false,\n    cellContext: false,\n    cellTap: false,\n    cellDblTap: false,\n    cellTapHold: false,\n    cellEditing: function cellEditing() {},\n    cellEdited: function cellEdited() {},\n    cellEditCancelled: function cellEditCancelled() {},\n    //column callbacks\n    columnMoved: false,\n    columnResized: function columnResized() {},\n    columnTitleChanged: function columnTitleChanged() {},\n    columnVisibilityChanged: function columnVisibilityChanged() {},\n    //HTML iport callbacks\n    htmlImporting: function htmlImporting() {},\n    htmlImported: function htmlImported() {},\n    //data callbacks\n    dataLoading: function dataLoading() {},\n    dataLoaded: function dataLoaded() {},\n    dataEdited: function dataEdited() {},\n    //ajax callbacks\n    ajaxRequesting: function ajaxRequesting() {},\n    ajaxResponse: false,\n    ajaxError: function ajaxError() {},\n    //filtering callbacks\n    dataFiltering: false,\n    dataFiltered: false,\n    //sorting callbacks\n    dataSorting: function dataSorting() {},\n    dataSorted: function dataSorted() {},\n    //grouping callbacks\n    groupToggleElement: \"arrow\",\n    groupClosedShowCalcs: false,\n    dataGrouping: function dataGrouping() {},\n    dataGrouped: false,\n    groupVisibilityChanged: function groupVisibilityChanged() {},\n    groupClick: false,\n    groupDblClick: false,\n    groupContext: false,\n    groupTap: false,\n    groupDblTap: false,\n    groupTapHold: false,\n    columnCalcs: true,\n    //pagination callbacks\n    pageLoaded: function pageLoaded() {},\n    //localization callbacks\n    localized: function localized() {},\n    //validation has failed\n    validationFailed: function validationFailed() {},\n    //history callbacks\n    historyUndo: function historyUndo() {},\n    historyRedo: function historyRedo() {}\n  };\n\n  Tabulator.prototype.initializeOptions = function (options) {\n    for (var key in this.defaultOptions) {\n      if (key in options) {\n        this.options[key] = options[key];\n      } else {\n        if (Array.isArray(this.defaultOptions[key])) {\n          this.options[key] = [];\n        } else if (_typeof(this.defaultOptions[key]) === \"object\") {\n          this.options[key] = {};\n        } else {\n          this.options[key] = this.defaultOptions[key];\n        }\n      }\n    }\n  };\n\n  Tabulator.prototype.initializeElement = function (element) {\n    if (element instanceof HTMLElement) {\n      this.element = element;\n      return true;\n    } else if (typeof element === \"string\") {\n      this.element = document.querySelector(element);\n\n      if (this.element) {\n        return true;\n      } else {\n        console.error(\"Tabulator Creation Error - no element found matching selector: \", element);\n        return false;\n      }\n    } else {\n      console.error(\"Tabulator Creation Error - Invalid element provided:\", element);\n      return false;\n    }\n  }; //convert depricated functionality to new functions\n\n\n  Tabulator.prototype._mapDepricatedFunctionality = function () {}; //concreate table\n\n\n  Tabulator.prototype._create = function () {\n    this._clearObjectPointers();\n\n    this._mapDepricatedFunctionality();\n\n    this.bindModules();\n\n    if (this.element.tagName === \"TABLE\") {\n      if (this.modExists(\"htmlTableImport\", true)) {\n        this.modules.htmlTableImport.parseTable();\n      }\n    }\n\n    this.columnManager = new ColumnManager(this);\n    this.rowManager = new RowManager(this);\n    this.footerManager = new FooterManager(this);\n    this.columnManager.setRowManager(this.rowManager);\n    this.rowManager.setColumnManager(this.columnManager);\n\n    this._buildElement();\n\n    this._loadInitialData();\n  }; //clear pointers to objects in default config object\n\n\n  Tabulator.prototype._clearObjectPointers = function () {\n    this.options.columns = this.options.columns.slice(0);\n    this.options.data = this.options.data.slice(0);\n  }; //build tabulator element\n\n\n  Tabulator.prototype._buildElement = function () {\n    var element = this.element,\n        mod = this.modules,\n        options = this.options;\n    options.tableBuilding.call(this);\n    element.classList.add(\"tabulator\");\n    element.setAttribute(\"role\", \"grid\"); //empty element\n\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    } //set table height\n\n\n    if (options.height) {\n      options.height = isNaN(options.height) ? options.height : options.height + \"px\";\n      element.style.height = options.height;\n    }\n\n    this.rowManager.initialize();\n\n    this._detectBrowser();\n\n    if (this.modExists(\"layout\", true)) {\n      mod.layout.initialize(options.layout);\n    } //set localization\n\n\n    if (options.headerFilterPlaceholder !== false) {\n      mod.localize.setHeaderFilterPlaceholder(options.headerFilterPlaceholder);\n    }\n\n    for (var locale in options.langs) {\n      mod.localize.installLang(locale, options.langs[locale]);\n    }\n\n    mod.localize.setLocale(options.locale); //configure placeholder element\n\n    if (typeof options.placeholder == \"string\") {\n      var el = document.createElement(\"div\");\n      el.classList.add(\"tabulator-placeholder\");\n      var span = document.createElement(\"span\");\n      span.innerHTML = options.placeholder;\n      el.appendChild(span);\n      options.placeholder = el;\n    } //build table elements\n\n\n    element.appendChild(this.columnManager.getElement());\n    element.appendChild(this.rowManager.getElement());\n\n    if (options.footerElement) {\n      this.footerManager.activate();\n    }\n\n    if (options.dataTree && this.modExists(\"dataTree\", true)) {\n      mod.dataTree.initialize();\n    }\n\n    if ((options.persistentLayout || options.persistentSort || options.persistentFilter) && this.modExists(\"persistence\", true)) {\n      mod.persistence.initialize(options.persistenceMode, options.persistenceID);\n    }\n\n    if (options.persistentLayout && this.modExists(\"persistence\", true)) {\n      options.columns = mod.persistence.load(\"columns\", options.columns);\n    }\n\n    if (options.movableRows && this.modExists(\"moveRow\")) {\n      mod.moveRow.initialize();\n    }\n\n    if (this.modExists(\"columnCalcs\")) {\n      mod.columnCalcs.initialize();\n    }\n\n    this.columnManager.setColumns(options.columns);\n\n    if (this.modExists(\"frozenRows\")) {\n      this.modules.frozenRows.initialize();\n    }\n\n    if ((options.persistentSort || options.initialSort) && this.modExists(\"sort\", true)) {\n      var sorters = [];\n\n      if (options.persistentSort && this.modExists(\"persistence\", true)) {\n        sorters = mod.persistence.load(\"sort\");\n\n        if (sorters === false && options.initialSort) {\n          sorters = options.initialSort;\n        }\n      } else if (options.initialSort) {\n        sorters = options.initialSort;\n      }\n\n      mod.sort.setSort(sorters);\n    }\n\n    if ((options.persistentFilter || options.initialFilter) && this.modExists(\"filter\", true)) {\n      var filters = [];\n\n      if (options.persistentFilter && this.modExists(\"persistence\", true)) {\n        filters = mod.persistence.load(\"filter\");\n\n        if (filters === false && options.initialFilter) {\n          filters = options.initialFilter;\n        }\n      } else if (options.initialFilter) {\n        filters = options.initialFilter;\n      }\n\n      mod.filter.setFilter(filters); // this.setFilter(filters);\n    }\n\n    if (this.modExists(\"ajax\")) {\n      mod.ajax.initialize();\n    }\n\n    if (options.pagination && this.modExists(\"page\", true)) {\n      mod.page.initialize();\n    }\n\n    if (options.groupBy && this.modExists(\"groupRows\", true)) {\n      mod.groupRows.initialize();\n    }\n\n    if (this.modExists(\"keybindings\")) {\n      mod.keybindings.initialize();\n    }\n\n    if (this.modExists(\"selectRow\")) {\n      mod.selectRow.clearSelectionData(true);\n    }\n\n    if (options.autoResize && this.modExists(\"resizeTable\")) {\n      mod.resizeTable.initialize();\n    }\n\n    if (this.modExists(\"clipboard\")) {\n      mod.clipboard.initialize();\n    }\n\n    options.tableBuilt.call(this);\n  };\n\n  Tabulator.prototype._loadInitialData = function () {\n    var self = this;\n\n    if (self.options.pagination && self.modExists(\"page\")) {\n      self.modules.page.reset(true);\n\n      if (self.options.pagination == \"local\") {\n        if (self.options.data.length) {\n          self.rowManager.setData(self.options.data);\n        } else {\n          if ((self.options.ajaxURL || self.options.ajaxURLGenerator) && self.modExists(\"ajax\")) {\n            self.modules.ajax.loadData();\n          } else {\n            self.rowManager.setData(self.options.data);\n          }\n        }\n      } else {\n        self.modules.page.setPage(1);\n      }\n    } else {\n      if (self.options.data.length) {\n        self.rowManager.setData(self.options.data);\n      } else {\n        if ((self.options.ajaxURL || self.options.ajaxURLGenerator) && self.modExists(\"ajax\")) {\n          self.modules.ajax.loadData();\n        } else {\n          self.rowManager.setData(self.options.data);\n        }\n      }\n    }\n  }; //deconstructor\n\n\n  Tabulator.prototype.destroy = function () {\n    var element = this.element;\n    Tabulator.prototype.comms.deregister(this); //deregister table from inderdevice communication\n    //clear row data\n\n    this.rowManager.rows.forEach(function (row) {\n      row.wipe();\n    });\n    this.rowManager.rows = [];\n    this.rowManager.activeRows = [];\n    this.rowManager.displayRows = []; //clear event bindings\n\n    if (this.options.autoResize && this.modExists(\"resizeTable\")) {\n      this.modules.resizeTable.clearBindings();\n    }\n\n    if (this.modExists(\"keybindings\")) {\n      this.modules.keybindings.clearBindings();\n    } //clear DOM\n\n\n    while (element.firstChild) {\n      element.removeChild(element.firstChild);\n    }\n\n    element.classList.remove(\"tabulator\");\n  };\n\n  Tabulator.prototype._detectBrowser = function () {\n    var ua = navigator.userAgent;\n\n    if (ua.indexOf(\"Trident\") > -1) {\n      this.browser = \"ie\";\n      this.browserSlow = true;\n    } else if (ua.indexOf(\"Edge\") > -1) {\n      this.browser = \"edge\";\n      this.browserSlow = true;\n    } else if (ua.indexOf(\"Firefox\") > -1) {\n      this.browser = \"firefox\";\n      this.browserSlow = false;\n    } else {\n      this.browser = \"other\";\n      this.browserSlow = false;\n    }\n  }; ////////////////// Data Handling //////////////////\n  //load data\n\n\n  Tabulator.prototype.setData = function (data, params, config) {\n    if (this.modExists(\"ajax\")) {\n      this.modules.ajax.blockActiveRequest();\n    }\n\n    return this._setData(data, params, config);\n  };\n\n  Tabulator.prototype._setData = function (data, params, config, inPosition) {\n    var self = this;\n\n    if (typeof data === \"string\") {\n      if (data.indexOf(\"{\") == 0 || data.indexOf(\"[\") == 0) {\n        //data is a json encoded string\n        return self.rowManager.setData(JSON.parse(data), inPosition);\n      } else {\n        if (self.modExists(\"ajax\", true)) {\n          if (params) {\n            self.modules.ajax.setParams(params);\n          }\n\n          if (config) {\n            self.modules.ajax.setConfig(config);\n          }\n\n          self.modules.ajax.setUrl(data);\n\n          if (self.options.pagination == \"remote\" && self.modExists(\"page\", true)) {\n            self.modules.page.reset(true);\n            return self.modules.page.setPage(1);\n          } else {\n            //assume data is url, make ajax call to url to get data\n            return self.modules.ajax.loadData(inPosition);\n          }\n        }\n      }\n    } else {\n      if (data) {\n        //asume data is already an object\n        return self.rowManager.setData(data, inPosition);\n      } else {\n        //no data provided, check if ajaxURL is present;\n        if (self.modExists(\"ajax\") && (self.modules.ajax.getUrl || self.options.ajaxURLGenerator)) {\n          if (self.options.pagination == \"remote\" && self.modExists(\"page\", true)) {\n            self.modules.page.reset(true);\n            return self.modules.page.setPage(1);\n          } else {\n            return self.modules.ajax.loadData(inPosition);\n          }\n        } else {\n          //empty data\n          return self.rowManager.setData([], inPosition);\n        }\n      }\n    }\n  }; //clear data\n\n\n  Tabulator.prototype.clearData = function () {\n    if (this.modExists(\"ajax\")) {\n      this.modules.ajax.blockActiveRequest();\n    }\n\n    this.rowManager.clearData();\n  }; //get table data array\n\n\n  Tabulator.prototype.getData = function (active) {\n    return this.rowManager.getData(active);\n  }; //get table data array count\n\n\n  Tabulator.prototype.getDataCount = function (active) {\n    return this.rowManager.getDataCount(active);\n  }; //search for specific row components\n\n\n  Tabulator.prototype.searchRows = function (field, type, value) {\n    if (this.modExists(\"filter\", true)) {\n      return this.modules.filter.search(\"rows\", field, type, value);\n    }\n  }; //search for specific data\n\n\n  Tabulator.prototype.searchData = function (field, type, value) {\n    if (this.modExists(\"filter\", true)) {\n      return this.modules.filter.search(\"data\", field, type, value);\n    }\n  }; //get table html\n\n\n  Tabulator.prototype.getHtml = function (active) {\n    return this.rowManager.getHtml(active);\n  }; //retrieve Ajax URL\n\n\n  Tabulator.prototype.getAjaxUrl = function () {\n    if (this.modExists(\"ajax\", true)) {\n      return this.modules.ajax.getUrl();\n    }\n  }; //replace data, keeping table in position with same sort\n\n\n  Tabulator.prototype.replaceData = function (data, params, config) {\n    if (this.modExists(\"ajax\")) {\n      this.modules.ajax.blockActiveRequest();\n    }\n\n    return this._setData(data, params, config, true);\n  }; //update table data\n\n\n  Tabulator.prototype.updateData = function (data) {\n    var _this7 = this;\n\n    var self = this;\n    var responses = 0;\n    return new Promise(function (resolve, reject) {\n      if (_this7.modExists(\"ajax\")) {\n        _this7.modules.ajax.blockActiveRequest();\n      }\n\n      if (typeof data === \"string\") {\n        data = JSON.parse(data);\n      }\n\n      if (data) {\n        data.forEach(function (item) {\n          var row = self.rowManager.findRow(item[self.options.index]);\n\n          if (row) {\n            responses++;\n            row.updateData(item).then(function () {\n              responses--;\n\n              if (!responses) {\n                resolve();\n              }\n            });\n          }\n        });\n      } else {\n        console.warn(\"Update Error - No data provided\");\n        reject(\"Update Error - No data provided\");\n      }\n    });\n  };\n\n  Tabulator.prototype.addData = function (data, pos, index) {\n    var _this8 = this;\n\n    return new Promise(function (resolve, reject) {\n      if (_this8.modExists(\"ajax\")) {\n        _this8.modules.ajax.blockActiveRequest();\n      }\n\n      if (typeof data === \"string\") {\n        data = JSON.parse(data);\n      }\n\n      if (data) {\n        _this8.rowManager.addRows(data, pos, index).then(function (rows) {\n          var output = [];\n          rows.forEach(function (row) {\n            output.push(row.getComponent());\n          });\n          resolve(output);\n        });\n      } else {\n        console.warn(\"Update Error - No data provided\");\n        reject(\"Update Error - No data provided\");\n      }\n    });\n  }; //update table data\n\n\n  Tabulator.prototype.updateOrAddData = function (data) {\n    var _this9 = this;\n\n    var self = this,\n        rows = [],\n        responses = 0;\n    return new Promise(function (resolve, reject) {\n      if (_this9.modExists(\"ajax\")) {\n        _this9.modules.ajax.blockActiveRequest();\n      }\n\n      if (typeof data === \"string\") {\n        data = JSON.parse(data);\n      }\n\n      if (data) {\n        data.forEach(function (item) {\n          var row = self.rowManager.findRow(item[self.options.index]);\n          responses++;\n\n          if (row) {\n            row.updateData(item).then(function () {\n              responses--;\n              rows.push(row.getComponent());\n\n              if (!responses) {\n                resolve(rows);\n              }\n            });\n          } else {\n            self.rowManager.addRows(item).then(function (newRows) {\n              responses--;\n              rows.push(newRows[0].getComponent());\n\n              if (!responses) {\n                resolve(rows);\n              }\n            });\n          }\n        });\n      } else {\n        console.warn(\"Update Error - No data provided\");\n        reject(\"Update Error - No data provided\");\n      }\n    });\n  }; //get row object\n\n\n  Tabulator.prototype.getRow = function (index) {\n    var row = this.rowManager.findRow(index);\n\n    if (row) {\n      return row.getComponent();\n    } else {\n      console.warn(\"Find Error - No matching row found:\", index);\n      return false;\n    }\n  }; //get row object\n\n\n  Tabulator.prototype.getRowFromPosition = function (position, active) {\n    var row = this.rowManager.getRowFromPosition(position, active);\n\n    if (row) {\n      return row.getComponent();\n    } else {\n      console.warn(\"Find Error - No matching row found:\", position);\n      return false;\n    }\n  }; //delete row from table\n\n\n  Tabulator.prototype.deleteRow = function (index) {\n    var _this10 = this;\n\n    return new Promise(function (resolve, reject) {\n      var row = _this10.rowManager.findRow(index);\n\n      if (row) {\n        row.delete().then(function () {\n          resolve();\n        }).catch(function (err) {\n          reject(err);\n        });\n      } else {\n        console.warn(\"Delete Error - No matching row found:\", index);\n        reject(\"Delete Error - No matching row found\");\n      }\n    });\n  }; //add row to table\n\n\n  Tabulator.prototype.addRow = function (data, pos, index) {\n    var _this11 = this;\n\n    return new Promise(function (resolve, reject) {\n      if (typeof data === \"string\") {\n        data = JSON.parse(data);\n      }\n\n      _this11.rowManager.addRows(data, pos, index).then(function (rows) {\n        //recalc column calculations if present\n        if (_this11.modExists(\"columnCalcs\")) {\n          _this11.modules.columnCalcs.recalc(_this11.rowManager.activeRows);\n        }\n\n        resolve(rows[0].getComponent());\n      });\n    });\n  }; //update a row if it exitsts otherwise create it\n\n\n  Tabulator.prototype.updateOrAddRow = function (index, data) {\n    var _this12 = this;\n\n    return new Promise(function (resolve, reject) {\n      var row = _this12.rowManager.findRow(index);\n\n      if (typeof data === \"string\") {\n        data = JSON.parse(data);\n      }\n\n      if (row) {\n        row.updateData(data).then(function () {\n          //recalc column calculations if present\n          if (_this12.modExists(\"columnCalcs\")) {\n            _this12.modules.columnCalcs.recalc(_this12.rowManager.activeRows);\n          }\n\n          resolve(row.getComponent());\n        }).catch(function (err) {\n          reject(err);\n        });\n      } else {\n        row = _this12.rowManager.addRows(data).then(function (rows) {\n          //recalc column calculations if present\n          if (_this12.modExists(\"columnCalcs\")) {\n            _this12.modules.columnCalcs.recalc(_this12.rowManager.activeRows);\n          }\n\n          resolve(rows[0].getComponent());\n        }).catch(function (err) {\n          reject(err);\n        });\n      }\n    });\n  }; //update row data\n\n\n  Tabulator.prototype.updateRow = function (index, data) {\n    var _this13 = this;\n\n    return new Promise(function (resolve, reject) {\n      var row = _this13.rowManager.findRow(index);\n\n      if (typeof data === \"string\") {\n        data = JSON.parse(data);\n      }\n\n      if (row) {\n        row.updateData(data).then(function () {\n          resolve(row.getComponent());\n        }).catch(function (err) {\n          reject(err);\n        });\n      } else {\n        console.warn(\"Update Error - No matching row found:\", index);\n        reject(\"Update Error - No matching row found\");\n      }\n    });\n  }; //scroll to row in DOM\n\n\n  Tabulator.prototype.scrollToRow = function (index, position, ifVisible) {\n    var _this14 = this;\n\n    return new Promise(function (resolve, reject) {\n      var row = _this14.rowManager.findRow(index);\n\n      if (row) {\n        _this14.rowManager.scrollToRow(row, position, ifVisible).then(function () {\n          resolve();\n        }).catch(function (err) {\n          reject(err);\n        });\n      } else {\n        console.warn(\"Scroll Error - No matching row found:\", index);\n        reject(\"Scroll Error - No matching row found\");\n      }\n    });\n  };\n\n  Tabulator.prototype.getRows = function (active) {\n    return this.rowManager.getComponents(active);\n  }; //get position of row in table\n\n\n  Tabulator.prototype.getRowPosition = function (index, active) {\n    var row = this.rowManager.findRow(index);\n\n    if (row) {\n      return this.rowManager.getRowPosition(row, active);\n    } else {\n      console.warn(\"Position Error - No matching row found:\", index);\n      return false;\n    }\n  }; //copy table data to clipboard\n\n\n  Tabulator.prototype.copyToClipboard = function (selector, selectorParams, formatter, formatterParams) {\n    if (this.modExists(\"clipboard\", true)) {\n      this.modules.clipboard.copy(selector, selectorParams, formatter, formatterParams);\n    }\n  }; /////////////// Column Functions  ///////////////\n\n\n  Tabulator.prototype.setColumns = function (definition) {\n    this.columnManager.setColumns(definition);\n  };\n\n  Tabulator.prototype.getColumns = function (structured) {\n    return this.columnManager.getComponents(structured);\n  };\n\n  Tabulator.prototype.getColumn = function (field) {\n    var col = this.columnManager.findColumn(field);\n\n    if (col) {\n      return col.getComponent();\n    } else {\n      console.warn(\"Find Error - No matching column found:\", field);\n      return false;\n    }\n  };\n\n  Tabulator.prototype.getColumnDefinitions = function () {\n    return this.columnManager.getDefinitionTree();\n  };\n\n  Tabulator.prototype.getColumnLayout = function () {\n    if (this.modExists(\"persistence\", true)) {\n      return this.modules.persistence.parseColumns(this.columnManager.getColumns());\n    }\n  };\n\n  Tabulator.prototype.setColumnLayout = function (layout) {\n    if (this.modExists(\"persistence\", true)) {\n      this.columnManager.setColumns(this.modules.persistence.mergeDefinition(this.options.columns, layout));\n      return true;\n    }\n\n    return false;\n  };\n\n  Tabulator.prototype.showColumn = function (field) {\n    var column = this.columnManager.findColumn(field);\n\n    if (column) {\n      column.show();\n\n      if (this.options.responsiveLayout && this.modExists(\"responsiveLayout\", true)) {\n        this.modules.responsiveLayout.update();\n      }\n    } else {\n      console.warn(\"Column Show Error - No matching column found:\", field);\n      return false;\n    }\n  };\n\n  Tabulator.prototype.hideColumn = function (field) {\n    var column = this.columnManager.findColumn(field);\n\n    if (column) {\n      column.hide();\n\n      if (this.options.responsiveLayout && this.modExists(\"responsiveLayout\", true)) {\n        this.modules.responsiveLayout.update();\n      }\n    } else {\n      console.warn(\"Column Hide Error - No matching column found:\", field);\n      return false;\n    }\n  };\n\n  Tabulator.prototype.toggleColumn = function (field) {\n    var column = this.columnManager.findColumn(field);\n\n    if (column) {\n      if (column.visible) {\n        column.hide();\n      } else {\n        column.show();\n      }\n    } else {\n      console.warn(\"Column Visibility Toggle Error - No matching column found:\", field);\n      return false;\n    }\n  };\n\n  Tabulator.prototype.addColumn = function (definition, before, field) {\n    var column = this.columnManager.findColumn(field);\n    this.columnManager.addColumn(definition, before, column);\n  };\n\n  Tabulator.prototype.deleteColumn = function (field) {\n    var column = this.columnManager.findColumn(field);\n\n    if (column) {\n      column.delete();\n    } else {\n      console.warn(\"Column Delete Error - No matching column found:\", field);\n      return false;\n    }\n  }; //scroll to column in DOM\n\n\n  Tabulator.prototype.scrollToColumn = function (field, position, ifVisible) {\n    var _this15 = this;\n\n    return new Promise(function (resolve, reject) {\n      var column = _this15.columnManager.findColumn(field);\n\n      if (column) {\n        _this15.columnManager.scrollToColumn(column, position, ifVisible).then(function () {\n          resolve();\n        }).catch(function (err) {\n          reject(err);\n        });\n      } else {\n        console.warn(\"Scroll Error - No matching column found:\", field);\n        reject(\"Scroll Error - No matching column found\");\n      }\n    });\n  }; //////////// Localization Functions  ////////////\n\n\n  Tabulator.prototype.setLocale = function (locale) {\n    this.modules.localize.setLocale(locale);\n  };\n\n  Tabulator.prototype.getLocale = function () {\n    return this.modules.localize.getLocale();\n  };\n\n  Tabulator.prototype.getLang = function (locale) {\n    return this.modules.localize.getLang(locale);\n  }; //////////// General Public Functions ////////////\n  //redraw list without updating data\n\n\n  Tabulator.prototype.redraw = function (force) {\n    this.columnManager.redraw(force);\n    this.rowManager.redraw(force);\n  };\n\n  Tabulator.prototype.setHeight = function (height) {\n    this.options.height = isNaN(height) ? height : height + \"px\";\n    this.element.style.height = this.options.height;\n    this.rowManager.redraw();\n  }; ///////////////////// Sorting ////////////////////\n  //trigger sort\n\n\n  Tabulator.prototype.setSort = function (sortList, dir) {\n    if (this.modExists(\"sort\", true)) {\n      this.modules.sort.setSort(sortList, dir);\n      this.rowManager.sorterRefresh();\n    }\n  };\n\n  Tabulator.prototype.getSorters = function () {\n    if (this.modExists(\"sort\", true)) {\n      return this.modules.sort.getSort();\n    }\n  };\n\n  Tabulator.prototype.clearSort = function () {\n    if (this.modExists(\"sort\", true)) {\n      this.modules.sort.clear();\n      this.rowManager.sorterRefresh();\n    }\n  }; ///////////////////// Filtering ////////////////////\n  //set standard filters\n\n\n  Tabulator.prototype.setFilter = function (field, type, value) {\n    if (this.modExists(\"filter\", true)) {\n      this.modules.filter.setFilter(field, type, value);\n      this.rowManager.filterRefresh();\n    }\n  }; //add filter to array\n\n\n  Tabulator.prototype.addFilter = function (field, type, value) {\n    if (this.modExists(\"filter\", true)) {\n      this.modules.filter.addFilter(field, type, value);\n      this.rowManager.filterRefresh();\n    }\n  }; //get all filters\n\n\n  Tabulator.prototype.getFilters = function (all) {\n    if (this.modExists(\"filter\", true)) {\n      return this.modules.filter.getFilters(all);\n    }\n  };\n\n  Tabulator.prototype.setHeaderFilterFocus = function (field) {\n    if (this.modExists(\"filter\", true)) {\n      var column = this.columnManager.findColumn(field);\n\n      if (column) {\n        this.modules.filter.setHeaderFilterFocus(column);\n      } else {\n        console.warn(\"Column Filter Focus Error - No matching column found:\", field);\n        return false;\n      }\n    }\n  };\n\n  Tabulator.prototype.setHeaderFilterValue = function (field, value) {\n    if (this.modExists(\"filter\", true)) {\n      var column = this.columnManager.findColumn(field);\n\n      if (column) {\n        this.modules.filter.setHeaderFilterValue(column, value);\n      } else {\n        console.warn(\"Column Filter Error - No matching column found:\", field);\n        return false;\n      }\n    }\n  };\n\n  Tabulator.prototype.getHeaderFilters = function () {\n    if (this.modExists(\"filter\", true)) {\n      return this.modules.filter.getHeaderFilters();\n    }\n  }; //remove filter from array\n\n\n  Tabulator.prototype.removeFilter = function (field, type, value) {\n    if (this.modExists(\"filter\", true)) {\n      this.modules.filter.removeFilter(field, type, value);\n      this.rowManager.filterRefresh();\n    }\n  }; //clear filters\n\n\n  Tabulator.prototype.clearFilter = function (all) {\n    if (this.modExists(\"filter\", true)) {\n      this.modules.filter.clearFilter(all);\n      this.rowManager.filterRefresh();\n    }\n  }; //clear header filters\n\n\n  Tabulator.prototype.clearHeaderFilter = function () {\n    if (this.modExists(\"filter\", true)) {\n      this.modules.filter.clearHeaderFilter();\n      this.rowManager.filterRefresh();\n    }\n  }; ///////////////////// Filtering ////////////////////\n\n\n  Tabulator.prototype.selectRow = function (rows) {\n    if (this.modExists(\"selectRow\", true)) {\n      this.modules.selectRow.selectRows(rows);\n    }\n  };\n\n  Tabulator.prototype.deselectRow = function (rows) {\n    if (this.modExists(\"selectRow\", true)) {\n      this.modules.selectRow.deselectRows(rows);\n    }\n  };\n\n  Tabulator.prototype.toggleSelectRow = function (row) {\n    if (this.modExists(\"selectRow\", true)) {\n      this.modules.selectRow.toggleRow(row);\n    }\n  };\n\n  Tabulator.prototype.getSelectedRows = function () {\n    if (this.modExists(\"selectRow\", true)) {\n      return this.modules.selectRow.getSelectedRows();\n    }\n  };\n\n  Tabulator.prototype.getSelectedData = function () {\n    if (this.modExists(\"selectRow\", true)) {\n      return this.modules.selectRow.getSelectedData();\n    }\n  }; //////////// Pagination Functions  ////////////\n\n\n  Tabulator.prototype.setMaxPage = function (max) {\n    if (this.options.pagination && this.modExists(\"page\")) {\n      this.modules.page.setMaxPage(max);\n    } else {\n      return false;\n    }\n  };\n\n  Tabulator.prototype.setPage = function (page) {\n    if (this.options.pagination && this.modExists(\"page\")) {\n      this.modules.page.setPage(page);\n    } else {\n      return false;\n    }\n  };\n\n  Tabulator.prototype.setPageSize = function (size) {\n    if (this.options.pagination && this.modExists(\"page\")) {\n      this.modules.page.setPageSize(size);\n      this.modules.page.setPage(1);\n    } else {\n      return false;\n    }\n  };\n\n  Tabulator.prototype.getPageSize = function () {\n    if (this.options.pagination && this.modExists(\"page\", true)) {\n      return this.modules.page.getPageSize();\n    }\n  };\n\n  Tabulator.prototype.previousPage = function () {\n    if (this.options.pagination && this.modExists(\"page\")) {\n      this.modules.page.previousPage();\n    } else {\n      return false;\n    }\n  };\n\n  Tabulator.prototype.nextPage = function () {\n    if (this.options.pagination && this.modExists(\"page\")) {\n      this.modules.page.nextPage();\n    } else {\n      return false;\n    }\n  };\n\n  Tabulator.prototype.getPage = function () {\n    if (this.options.pagination && this.modExists(\"page\")) {\n      return this.modules.page.getPage();\n    } else {\n      return false;\n    }\n  };\n\n  Tabulator.prototype.getPageMax = function () {\n    if (this.options.pagination && this.modExists(\"page\")) {\n      return this.modules.page.getPageMax();\n    } else {\n      return false;\n    }\n  }; ///////////////// Grouping Functions ///////////////\n\n\n  Tabulator.prototype.setGroupBy = function (groups) {\n    if (this.modExists(\"groupRows\", true)) {\n      this.options.groupBy = groups;\n      this.modules.groupRows.initialize();\n      this.rowManager.refreshActiveData(\"display\");\n    } else {\n      return false;\n    }\n  };\n\n  Tabulator.prototype.setGroupStartOpen = function (values) {\n    if (this.modExists(\"groupRows\", true)) {\n      this.options.groupStartOpen = values;\n      this.modules.groupRows.initialize();\n\n      if (this.options.groupBy) {\n        this.rowManager.refreshActiveData(\"group\");\n      } else {\n        console.warn(\"Grouping Update - cant refresh view, no groups have been set\");\n      }\n    } else {\n      return false;\n    }\n  };\n\n  Tabulator.prototype.setGroupHeader = function (values) {\n    if (this.modExists(\"groupRows\", true)) {\n      this.options.groupHeader = values;\n      this.modules.groupRows.initialize();\n\n      if (this.options.groupBy) {\n        this.rowManager.refreshActiveData(\"group\");\n      } else {\n        console.warn(\"Grouping Update - cant refresh view, no groups have been set\");\n      }\n    } else {\n      return false;\n    }\n  };\n\n  Tabulator.prototype.getGroups = function (values) {\n    if (this.modExists(\"groupRows\", true)) {\n      return this.modules.groupRows.getGroups(true);\n    } else {\n      return false;\n    }\n  }; // get grouped table data in the same format as getData()\n\n\n  Tabulator.prototype.getGroupedData = function () {\n    if (this.modExists(\"groupRows\", true)) {\n      return this.options.groupBy ? this.modules.groupRows.getGroupedData() : this.getData();\n    }\n  }; ///////////////// Column Calculation Functions ///////////////\n\n\n  Tabulator.prototype.getCalcResults = function () {\n    if (this.modExists(\"columnCalcs\", true)) {\n      return this.modules.columnCalcs.getResults();\n    } else {\n      return false;\n    }\n  }; /////////////// Navigation Management //////////////\n\n\n  Tabulator.prototype.navigatePrev = function () {\n    var cell = false;\n\n    if (this.modExists(\"edit\", true)) {\n      cell = this.modules.edit.currentCell;\n\n      if (cell) {\n        e.preventDefault();\n        return cell.nav().prev();\n      }\n    }\n\n    return false;\n  };\n\n  Tabulator.prototype.navigateNext = function () {\n    var cell = false;\n\n    if (this.modExists(\"edit\", true)) {\n      cell = this.modules.edit.currentCell;\n\n      if (cell) {\n        e.preventDefault();\n        return cell.nav().next();\n      }\n    }\n\n    return false;\n  };\n\n  Tabulator.prototype.navigateLeft = function () {\n    var cell = false;\n\n    if (this.modExists(\"edit\", true)) {\n      cell = this.modules.edit.currentCell;\n\n      if (cell) {\n        e.preventDefault();\n        return cell.nav().left();\n      }\n    }\n\n    return false;\n  };\n\n  Tabulator.prototype.navigateRight = function () {\n    var cell = false;\n\n    if (this.modExists(\"edit\", true)) {\n      cell = this.modules.edit.currentCell;\n\n      if (cell) {\n        e.preventDefault();\n        return cell.nav().right();\n      }\n    }\n\n    return false;\n  };\n\n  Tabulator.prototype.navigateUp = function () {\n    var cell = false;\n\n    if (this.modExists(\"edit\", true)) {\n      cell = this.modules.edit.currentCell;\n\n      if (cell) {\n        e.preventDefault();\n        return cell.nav().up();\n      }\n    }\n\n    return false;\n  };\n\n  Tabulator.prototype.navigateDown = function () {\n    var cell = false;\n\n    if (this.modExists(\"edit\", true)) {\n      cell = this.modules.edit.currentCell;\n\n      if (cell) {\n        e.preventDefault();\n        return cell.nav().dpwn();\n      }\n    }\n\n    return false;\n  }; /////////////// History Management //////////////\n\n\n  Tabulator.prototype.undo = function () {\n    if (this.options.history && this.modExists(\"history\", true)) {\n      return this.modules.history.undo();\n    } else {\n      return false;\n    }\n  };\n\n  Tabulator.prototype.redo = function () {\n    if (this.options.history && this.modExists(\"history\", true)) {\n      return this.modules.history.redo();\n    } else {\n      return false;\n    }\n  };\n\n  Tabulator.prototype.getHistoryUndoSize = function () {\n    if (this.options.history && this.modExists(\"history\", true)) {\n      return this.modules.history.getHistoryUndoSize();\n    } else {\n      return false;\n    }\n  };\n\n  Tabulator.prototype.getHistoryRedoSize = function () {\n    if (this.options.history && this.modExists(\"history\", true)) {\n      return this.modules.history.getHistoryRedoSize();\n    } else {\n      return false;\n    }\n  }; /////////////// Download Management //////////////\n\n\n  Tabulator.prototype.download = function (type, filename, options) {\n    if (this.modExists(\"download\", true)) {\n      this.modules.download.download(type, filename, options);\n    }\n  }; /////////// Inter Table Communications ///////////\n\n\n  Tabulator.prototype.tableComms = function (table, module, action, data) {\n    this.modules.comms.receive(table, module, action, data);\n  }; ////////////// Extension Management //////////////\n  //object to hold module\n\n\n  Tabulator.prototype.moduleBindings = {}; //extend module\n\n  Tabulator.prototype.extendModule = function (name, property, values) {\n    if (Tabulator.prototype.moduleBindings[name]) {\n      var source = Tabulator.prototype.moduleBindings[name].prototype[property];\n\n      if (source) {\n        if ((typeof values === 'undefined' ? 'undefined' : _typeof(values)) == \"object\") {\n          for (var key in values) {\n            source[key] = values[key];\n          }\n        } else {\n          console.warn(\"Module Error - Invalid value type, it must be an object\");\n        }\n      } else {\n        console.warn(\"Module Error - property does not exist:\", property);\n      }\n    } else {\n      console.warn(\"Module Error - module does not exist:\", name);\n    }\n  }; //add module to tabulator\n\n\n  Tabulator.prototype.registerModule = function (name, module) {\n    var self = this;\n    Tabulator.prototype.moduleBindings[name] = module;\n  }; //ensure that module are bound to instantiated function\n\n\n  Tabulator.prototype.bindModules = function () {\n    this.modules = {};\n\n    for (var name in Tabulator.prototype.moduleBindings) {\n      this.modules[name] = new Tabulator.prototype.moduleBindings[name](this);\n    }\n  }; //Check for module\n\n\n  Tabulator.prototype.modExists = function (plugin, required) {\n    if (this.modules[plugin]) {\n      return true;\n    } else {\n      if (required) {\n        console.error(\"Tabulator Module Not Installed: \" + plugin);\n      }\n\n      return false;\n    }\n  };\n\n  Tabulator.prototype.helpers = {\n    elVisible: function elVisible(el) {\n      return !(el.offsetWidth <= 0 && el.offsetHeight <= 0);\n    },\n    elOffset: function elOffset(el) {\n      var box = el.getBoundingClientRect();\n      return {\n        top: box.top + window.pageYOffset - document.documentElement.clientTop,\n        left: box.left + window.pageXOffset - document.documentElement.clientLeft\n      };\n    },\n    deepClone: function deepClone(obj) {\n      var clone = Array.isArray(obj) ? [] : {};\n\n      for (var i in obj) {\n        if (obj[i] != null && _typeof(obj[i]) === \"object\") {\n          if (obj[i] instanceof Date) {\n            clone[i] = new Date(obj[i]);\n          } else {\n            clone[i] = this.deepClone(obj[i]);\n          }\n        } else {\n          clone[i] = obj[i];\n        }\n      }\n\n      return clone;\n    }\n  };\n  Tabulator.prototype.comms = {\n    tables: [],\n    register: function register(table) {\n      Tabulator.prototype.comms.tables.push(table);\n    },\n    deregister: function deregister(table) {\n      var index = Tabulator.prototype.comms.tables.indexOf(table);\n\n      if (index > -1) {\n        Tabulator.prototype.comms.tables.splice(index, 1);\n      }\n    },\n    lookupTable: function lookupTable(query) {\n      var results = [],\n          matches,\n          match;\n\n      if (typeof query === \"string\") {\n        matches = document.querySelectorAll(query);\n\n        if (matches.length) {\n          for (var i = 0; i < matches.length; i++) {\n            match = Tabulator.prototype.comms.matchElement(matches[i]);\n\n            if (match) {\n              results.push(match);\n            }\n          }\n        }\n      } else if (query instanceof HTMLElement || query instanceof Tabulator) {\n        match = Tabulator.prototype.comms.matchElement(query);\n\n        if (match) {\n          results.push(match);\n        }\n      } else if (Array.isArray(query)) {\n        query.forEach(function (item) {\n          results = results.concat(Tabulator.prototype.comms.lookupTable(item));\n        });\n      } else {\n        console.warn(\"Table Connection Error - Invalid Selector\", query);\n      }\n\n      return results;\n    },\n    matchElement: function matchElement(element) {\n      return Tabulator.prototype.comms.tables.find(function (table) {\n        return element instanceof Tabulator ? table === element : table.element === element;\n      });\n    }\n  };\n\n  var Layout = function Layout(table) {\n    this.table = table;\n    this.mode = null;\n  }; //initialize layout system\n\n\n  Layout.prototype.initialize = function (layout) {\n    if (this.modes[layout]) {\n      this.mode = layout;\n    } else {\n      console.warn(\"Layout Error - invalid mode set, defaulting to 'fitData' : \" + layout);\n      this.mode = 'fitData';\n    }\n\n    this.table.element.setAttribute(\"tabulator-layout\", this.mode);\n  };\n\n  Layout.prototype.getMode = function () {\n    return this.mode;\n  }; //trigger table layout\n\n\n  Layout.prototype.layout = function () {\n    this.modes[this.mode].call(this, this.table.columnManager.columnsByIndex);\n  }; //layout render functions\n\n\n  Layout.prototype.modes = {\n    //resize columns to fit data the contain\n    \"fitData\": function fitData(columns) {\n      columns.forEach(function (column) {\n        column.reinitializeWidth();\n      });\n\n      if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n        this.table.modules.responsiveLayout.update();\n      }\n    },\n    //resize columns to fit data the contain\n    \"fitDataFill\": function fitDataFill(columns) {\n      columns.forEach(function (column) {\n        column.reinitializeWidth();\n      });\n\n      if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n        this.table.modules.responsiveLayout.update();\n      }\n    },\n    //resize columns to fit\n    \"fitColumns\": function fitColumns(columns) {\n      var self = this;\n      var totalWidth = self.table.element.clientWidth; //table element width\n\n      var fixedWidth = 0; //total width of columns with a defined width\n\n      var flexWidth = 0; //total width available to flexible columns\n\n      var flexGrowUnits = 0; //total number of widthGrow blocks accross all columns\n\n      var flexColWidth = 0; //desired width of flexible columns\n\n      var flexColumns = []; //array of flexible width columns\n\n      var fixedShrinkColumns = []; //array of fixed width columns that can shrink\n\n      var flexShrinkUnits = 0; //total number of widthShrink blocks accross all columns\n\n      var overflowWidth = 0; //horizontal overflow width\n\n      var gapFill = 0; //number of pixels to be added to final column to close and half pixel gaps\n\n      function calcWidth(width) {\n        var colWidth;\n\n        if (typeof width == \"string\") {\n          if (width.indexOf(\"%\") > -1) {\n            colWidth = totalWidth / 100 * parseInt(width);\n          } else {\n            colWidth = parseInt(width);\n          }\n        } else {\n          colWidth = width;\n        }\n\n        return colWidth;\n      } //ensure columns resize to take up the correct amount of space\n\n\n      function scaleColumns(columns, freeSpace, colWidth, shrinkCols) {\n        var oversizeCols = [],\n            oversizeSpace = 0,\n            remainingSpace = 0,\n            nextColWidth = 0,\n            gap = 0,\n            changeUnits = 0,\n            undersizeCols = [];\n\n        function calcGrow(col) {\n          return colWidth * (col.column.definition.widthGrow || 1);\n        }\n\n        function calcShrink(col) {\n          return calcWidth(col.width) - colWidth * (col.column.definition.widthShrink || 0);\n        }\n\n        columns.forEach(function (col, i) {\n          var width = shrinkCols ? calcShrink(col) : calcGrow(col);\n\n          if (col.column.minWidth >= width) {\n            oversizeCols.push(col);\n          } else {\n            undersizeCols.push(col);\n            changeUnits += shrinkCols ? col.column.definition.widthShrink || 1 : col.column.definition.widthGrow || 1;\n          }\n        });\n\n        if (oversizeCols.length) {\n          oversizeCols.forEach(function (col) {\n            oversizeSpace += shrinkCols ? col.width - col.column.minWidth : col.column.minWidth;\n            col.width = col.column.minWidth;\n          });\n          remainingSpace = freeSpace - oversizeSpace;\n          nextColWidth = changeUnits ? Math.floor(remainingSpace / changeUnits) : remainingSpace;\n          gap = remainingSpace - nextColWidth * changeUnits;\n          gap += scaleColumns(undersizeCols, remainingSpace, nextColWidth, shrinkCols);\n        } else {\n          gap = changeUnits ? freeSpace - Math.floor(freeSpace / changeUnits) * changeUnits : freeSpace;\n          undersizeCols.forEach(function (column) {\n            column.width = shrinkCols ? calcShrink(column) : calcGrow(column);\n          });\n        }\n\n        return gap;\n      }\n\n      if (this.table.options.responsiveLayout && this.table.modExists(\"responsiveLayout\", true)) {\n        this.table.modules.responsiveLayout.update();\n      } //adjust for vertical scrollbar if present\n\n\n      if (this.table.rowManager.element.scrollHeight > this.table.rowManager.element.clientHeight) {\n        totalWidth -= this.table.rowManager.element.offsetWidth - this.table.rowManager.element.clientWidth;\n      }\n\n      columns.forEach(function (column) {\n        var width, minWidth, colWidth;\n\n        if (column.visible) {\n          width = column.definition.width;\n          minWidth = parseInt(column.minWidth);\n\n          if (width) {\n            colWidth = calcWidth(width);\n            fixedWidth += colWidth > minWidth ? colWidth : minWidth;\n\n            if (column.definition.widthShrink) {\n              fixedShrinkColumns.push({\n                column: column,\n                width: colWidth > minWidth ? colWidth : minWidth\n              });\n              flexShrinkUnits += column.definition.widthShrink;\n            }\n          } else {\n            flexColumns.push({\n              column: column,\n              width: 0\n            });\n            flexGrowUnits += column.definition.widthGrow || 1;\n          }\n        }\n      }); //calculate available space\n\n      flexWidth = totalWidth - fixedWidth; //calculate correct column size\n\n      flexColWidth = Math.floor(flexWidth / flexGrowUnits); //generate column widths\n\n      var gapFill = scaleColumns(flexColumns, flexWidth, flexColWidth, false); //increase width of last column to account for rounding errors\n\n      if (flexColumns.length && gapFill > 0) {\n        flexColumns[flexColumns.length - 1].width += +gapFill;\n      } //caculate space for columns to be shrunk into\n\n\n      flexColumns.forEach(function (col) {\n        flexWidth -= col.width;\n      });\n      overflowWidth = Math.abs(gapFill) + flexWidth; //shrink oversize columns if there is no available space\n\n      if (overflowWidth > 0 && flexShrinkUnits) {\n        gapFill = scaleColumns(fixedShrinkColumns, overflowWidth, Math.floor(overflowWidth / flexShrinkUnits), true);\n      } //decrease width of last column to account for rounding errors\n\n\n      if (fixedShrinkColumns.length) {\n        fixedShrinkColumns[fixedShrinkColumns.length - 1].width -= gapFill;\n      }\n\n      flexColumns.forEach(function (col) {\n        col.column.setWidth(col.width);\n      });\n      fixedShrinkColumns.forEach(function (col) {\n        col.column.setWidth(col.width);\n      });\n    }\n  };\n  Tabulator.prototype.registerModule(\"layout\", Layout);\n\n  var Localize = function Localize(table) {\n    this.table = table; //hold Tabulator object\n\n    this.locale = \"default\"; //current locale\n\n    this.lang = false; //current language\n\n    this.bindings = {}; //update events to call when locale is changed\n  }; //set header placehoder\n\n\n  Localize.prototype.setHeaderFilterPlaceholder = function (placeholder) {\n    this.langs.default.headerFilters.default = placeholder;\n  }; //set header filter placeholder by column\n\n\n  Localize.prototype.setHeaderFilterColumnPlaceholder = function (column, placeholder) {\n    this.langs.default.headerFilters.columns[column] = placeholder;\n\n    if (this.lang && !this.lang.headerFilters.columns[column]) {\n      this.lang.headerFilters.columns[column] = placeholder;\n    }\n  }; //setup a lang description object\n\n\n  Localize.prototype.installLang = function (locale, lang) {\n    if (this.langs[locale]) {\n      this._setLangProp(this.langs[locale], lang);\n    } else {\n      this.langs[locale] = lang;\n    }\n  };\n\n  Localize.prototype._setLangProp = function (lang, values) {\n    for (var key in values) {\n      if (lang[key] && _typeof(lang[key]) == \"object\") {\n        this._setLangProp(lang[key], values[key]);\n      } else {\n        lang[key] = values[key];\n      }\n    }\n  }; //set current locale\n\n\n  Localize.prototype.setLocale = function (desiredLocale) {\n    var self = this;\n    desiredLocale = desiredLocale || \"default\"; //fill in any matching languge values\n\n    function traverseLang(trans, path) {\n      for (var prop in trans) {\n        if (_typeof(trans[prop]) == \"object\") {\n          if (!path[prop]) {\n            path[prop] = {};\n          }\n\n          traverseLang(trans[prop], path[prop]);\n        } else {\n          path[prop] = trans[prop];\n        }\n      }\n    } //determing correct locale to load\n\n\n    if (desiredLocale === true && navigator.language) {\n      //get local from system\n      desiredLocale = navigator.language.toLowerCase();\n    }\n\n    if (desiredLocale) {\n      //if locale is not set, check for matching top level locale else use default\n      if (!self.langs[desiredLocale]) {\n        var prefix = desiredLocale.split(\"-\")[0];\n\n        if (self.langs[prefix]) {\n          console.warn(\"Localization Error - Exact matching locale not found, using closest match: \", desiredLocale, prefix);\n          desiredLocale = prefix;\n        } else {\n          console.warn(\"Localization Error - Matching locale not found, using default: \", desiredLocale);\n          desiredLocale = \"default\";\n        }\n      }\n    }\n\n    self.locale = desiredLocale; //load default lang template\n\n    self.lang = Tabulator.prototype.helpers.deepClone(self.langs.default || {});\n\n    if (desiredLocale != \"default\") {\n      traverseLang(self.langs[desiredLocale], self.lang);\n    }\n\n    self.table.options.localized.call(self.table, self.locale, self.lang);\n\n    self._executeBindings();\n  }; //get current locale\n\n\n  Localize.prototype.getLocale = function (locale) {\n    return self.locale;\n  }; //get lang object for given local or current if none provided\n\n\n  Localize.prototype.getLang = function (locale) {\n    return locale ? this.langs[locale] : this.lang;\n  }; //get text for current locale\n\n\n  Localize.prototype.getText = function (path, value) {\n    var path = value ? path + \"|\" + value : path,\n        pathArray = path.split(\"|\"),\n        text = this._getLangElement(pathArray, this.locale); // if(text === false){\n    // \tconsole.warn(\"Localization Error - Matching localized text not found for given path: \", path);\n    // }\n\n\n    return text || \"\";\n  }; //traverse langs object and find localized copy\n\n\n  Localize.prototype._getLangElement = function (path, locale) {\n    var self = this;\n    var root = self.lang;\n    path.forEach(function (level) {\n      var rootPath;\n\n      if (root) {\n        rootPath = root[level];\n\n        if (typeof rootPath != \"undefined\") {\n          root = rootPath;\n        } else {\n          root = false;\n        }\n      }\n    });\n    return root;\n  }; //set update binding\n\n\n  Localize.prototype.bind = function (path, callback) {\n    if (!this.bindings[path]) {\n      this.bindings[path] = [];\n    }\n\n    this.bindings[path].push(callback);\n    callback(this.getText(path), this.lang);\n  }; //itterate through bindings and trigger updates\n\n\n  Localize.prototype._executeBindings = function () {\n    var self = this;\n\n    var _loop = function _loop(path) {\n      self.bindings[path].forEach(function (binding) {\n        binding(self.getText(path), self.lang);\n      });\n    };\n\n    for (var path in self.bindings) {\n      _loop(path);\n    }\n  }; //Localized text listings\n\n\n  Localize.prototype.langs = {\n    \"default\": {\n      //hold default locale text\n      \"groups\": {\n        \"item\": \"item\",\n        \"items\": \"items\"\n      },\n      \"columns\": {},\n      \"ajax\": {\n        \"loading\": \"Loading\",\n        \"error\": \"Error\"\n      },\n      \"pagination\": {\n        \"first\": \"First\",\n        \"first_title\": \"First Page\",\n        \"last\": \"Last\",\n        \"last_title\": \"Last Page\",\n        \"prev\": \"Prev\",\n        \"prev_title\": \"Prev Page\",\n        \"next\": \"Next\",\n        \"next_title\": \"Next Page\"\n      },\n      \"headerFilters\": {\n        \"default\": \"filter column...\",\n        \"columns\": {}\n      }\n    }\n  };\n  Tabulator.prototype.registerModule(\"localize\", Localize);\n\n  var Comms = function Comms(table) {\n    this.table = table;\n  };\n\n  Comms.prototype.getConnections = function (selectors) {\n    var self = this,\n        connections = [],\n        connection;\n    connection = Tabulator.prototype.comms.lookupTable(selectors);\n    connection.forEach(function (con) {\n      if (self.table !== con) {\n        connections.push(con);\n      }\n    });\n    return connections;\n  };\n\n  Comms.prototype.send = function (selectors, module, action, data) {\n    var self = this,\n        connections = this.getConnections(selectors);\n    connections.forEach(function (connection) {\n      connection.tableComms(self.table.element, module, action, data);\n    });\n\n    if (!connections.length && selectors) {\n      console.warn(\"Table Connection Error - No tables matching selector found\", selectors);\n    }\n  };\n\n  Comms.prototype.receive = function (table, module, action, data) {\n    if (this.table.modExists(module)) {\n      return this.table.modules[module].commsReceived(table, action, data);\n    } else {\n      console.warn(\"Inter-table Comms Error - no such module:\", module);\n    }\n  };\n\n  Tabulator.prototype.registerModule(\"comms\", Comms);\n\n  var Accessor = function Accessor(table) {\n    this.table = table; //hold Tabulator object\n\n    this.allowedTypes = [\"\", \"data\", \"download\", \"clipboard\"]; //list of accessor types\n  }; //initialize column accessor\n\n\n  Accessor.prototype.initializeColumn = function (column) {\n    var self = this,\n        match = false,\n        config = {};\n    this.allowedTypes.forEach(function (type) {\n      var key = \"accessor\" + (type.charAt(0).toUpperCase() + type.slice(1)),\n          accessor;\n\n      if (column.definition[key]) {\n        accessor = self.lookupAccessor(column.definition[key]);\n\n        if (accessor) {\n          match = true;\n          config[key] = {\n            accessor: accessor,\n            params: column.definition[key + \"Params\"] || {}\n          };\n        }\n      }\n    });\n\n    if (match) {\n      column.modules.accessor = config;\n    }\n  }, Accessor.prototype.lookupAccessor = function (value) {\n    var accessor = false; //set column accessor\n\n    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n      case \"string\":\n        if (this.accessors[value]) {\n          accessor = this.accessors[value];\n        } else {\n          console.warn(\"Accessor Error - No such accessor found, ignoring: \", value);\n        }\n\n        break;\n\n      case \"function\":\n        accessor = value;\n        break;\n    }\n\n    return accessor;\n  }; //apply accessor to row\n\n  Accessor.prototype.transformRow = function (dataIn, type) {\n    var self = this,\n        key = \"accessor\" + (type.charAt(0).toUpperCase() + type.slice(1)); //clone data object with deep copy to isolate internal data from returned result\n\n    var data = Tabulator.prototype.helpers.deepClone(dataIn || {});\n    self.table.columnManager.traverse(function (column) {\n      var value, accessor, params, component;\n\n      if (column.modules.accessor) {\n        accessor = column.modules.accessor[key] || column.modules.accessor.accessor || false;\n\n        if (accessor) {\n          value = column.getFieldValue(data);\n\n          if (value != \"undefined\") {\n            component = column.getComponent();\n            params = typeof accessor.params === \"function\" ? accessor.params(value, data, type, component) : accessor.params;\n            column.setFieldValue(data, accessor.accessor(value, data, type, params, component));\n          }\n        }\n      }\n    });\n    return data;\n  }, //default accessors\n  Accessor.prototype.accessors = {};\n  Tabulator.prototype.registerModule(\"accessor\", Accessor);\n\n  var Ajax = function Ajax(table) {\n    this.table = table; //hold Tabulator object\n\n    this.config = false; //hold config object for ajax request\n\n    this.url = \"\"; //request URL\n\n    this.urlGenerator = false;\n    this.params = false; //request parameters\n\n    this.loaderElement = this.createLoaderElement(); //loader message div\n\n    this.msgElement = this.createMsgElement(); //message element\n\n    this.loadingElement = false;\n    this.errorElement = false;\n    this.loaderPromise = false;\n    this.progressiveLoad = false;\n    this.loading = false;\n    this.requestOrder = 0; //prevent requests comming out of sequence if overridden by another load request\n  }; //initialize setup options\n\n\n  Ajax.prototype.initialize = function () {\n    this.loaderElement.appendChild(this.msgElement);\n\n    if (this.table.options.ajaxLoaderLoading) {\n      this.loadingElement = this.table.options.ajaxLoaderLoading;\n    }\n\n    this.loaderPromise = this.table.options.ajaxRequestFunc || this.defaultLoaderPromise;\n    this.urlGenerator = this.table.options.ajaxURLGenerator || this.defaultURLGenerator;\n\n    if (this.table.options.ajaxLoaderError) {\n      this.errorElement = this.table.options.ajaxLoaderError;\n    }\n\n    if (this.table.options.ajaxParams) {\n      this.setParams(this.table.options.ajaxParams);\n    }\n\n    if (this.table.options.ajaxConfig) {\n      this.setConfig(this.table.options.ajaxConfig);\n    }\n\n    if (this.table.options.ajaxURL) {\n      this.setUrl(this.table.options.ajaxURL);\n    }\n\n    if (this.table.options.ajaxProgressiveLoad) {\n      if (this.table.options.pagination) {\n        this.progressiveLoad = false;\n        console.error(\"Progressive Load Error - Pagination and progressive load cannot be used at the same time\");\n      } else {\n        if (this.table.modExists(\"page\")) {\n          this.progressiveLoad = this.table.options.ajaxProgressiveLoad;\n          this.table.modules.page.initializeProgressive(this.progressiveLoad);\n        } else {\n          console.error(\"Pagination plugin is required for progressive ajax loading\");\n        }\n      }\n    }\n  };\n\n  Ajax.prototype.createLoaderElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-loader\");\n    return el;\n  };\n\n  Ajax.prototype.createMsgElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-loader-msg\");\n    el.setAttribute(\"role\", \"alert\");\n    return el;\n  }; //set ajax params\n\n\n  Ajax.prototype.setParams = function (params, update) {\n    if (update) {\n      this.params = this.params || {};\n\n      for (var key in params) {\n        this.params[key] = params[key];\n      }\n    } else {\n      this.params = params;\n    }\n  };\n\n  Ajax.prototype.getParams = function () {\n    return this.params || {};\n  }; //load config object\n\n\n  Ajax.prototype.setConfig = function (config) {\n    this._loadDefaultConfig();\n\n    if (typeof config == \"string\") {\n      this.config.method = config;\n    } else {\n      for (var key in config) {\n        this.config[key] = config[key];\n      }\n    }\n  }; //create config object from default\n\n\n  Ajax.prototype._loadDefaultConfig = function (force) {\n    var self = this;\n\n    if (!self.config || force) {\n      self.config = {}; //load base config from defaults\n\n      for (var key in self.defaultConfig) {\n        self.config[key] = self.defaultConfig[key];\n      }\n    }\n  }; //set request url\n\n\n  Ajax.prototype.setUrl = function (url) {\n    this.url = url;\n  }; //get request url\n\n\n  Ajax.prototype.getUrl = function () {\n    return this.url;\n  }; //lstandard loading function\n\n\n  Ajax.prototype.loadData = function (inPosition) {\n    var self = this;\n\n    if (this.progressiveLoad) {\n      return this._loadDataProgressive();\n    } else {\n      return this._loadDataStandard(inPosition);\n    }\n  };\n\n  Ajax.prototype.nextPage = function (diff) {\n    var margin;\n\n    if (!this.loading) {\n      margin = this.table.options.ajaxProgressiveLoadScrollMargin || this.table.rowManager.getElement().clientHeight * 2;\n\n      if (diff < margin) {\n        this.table.modules.page.nextPage().then(function () {}).catch(function () {});\n      }\n    }\n  };\n\n  Ajax.prototype.blockActiveRequest = function () {\n    this.requestOrder++;\n  };\n\n  Ajax.prototype._loadDataProgressive = function () {\n    this.table.rowManager.setData([]);\n    return this.table.modules.page.setPage(1);\n  };\n\n  Ajax.prototype._loadDataStandard = function (inPosition) {\n    var _this16 = this;\n\n    return new Promise(function (resolve, reject) {\n      _this16.sendRequest(inPosition).then(function (data) {\n        _this16.table.rowManager.setData(data, inPosition);\n\n        resolve();\n      }).catch(function (e) {\n        reject();\n      });\n    });\n  };\n\n  Ajax.prototype.generateParamsList = function (data, prefix) {\n    var self = this,\n        output = [];\n    prefix = prefix || \"\";\n\n    if (Array.isArray(data)) {\n      data.forEach(function (item, i) {\n        output = output.concat(self.generateParamsList(item, prefix ? prefix + \"[\" + i + \"]\" : i));\n      });\n    } else if ((typeof data === 'undefined' ? 'undefined' : _typeof(data)) === \"object\") {\n      for (var key in data) {\n        output = output.concat(self.generateParamsList(data[key], prefix ? prefix + \"[\" + key + \"]\" : key));\n      }\n    } else {\n      output.push({\n        key: prefix,\n        value: data\n      });\n    }\n\n    return output;\n  };\n\n  Ajax.prototype.serializeParams = function (params) {\n    var output = this.generateParamsList(params),\n        encoded = [];\n    output.forEach(function (item) {\n      encoded.push(encodeURIComponent(item.key) + \"=\" + encodeURIComponent(item.value));\n    });\n    return encoded.join(\"&\");\n  }; //send ajax request\n\n\n  Ajax.prototype.sendRequest = function (silent) {\n    var _this17 = this;\n\n    var self = this,\n        url = self.url,\n        requestNo,\n        esc,\n        query;\n    self.requestOrder++;\n    requestNo = self.requestOrder;\n\n    self._loadDefaultConfig();\n\n    return new Promise(function (resolve, reject) {\n      if (self.table.options.ajaxRequesting.call(_this17.table, self.url, self.params) !== false) {\n        self.loading = true;\n\n        if (!silent) {\n          self.showLoader();\n        }\n\n        _this17.loaderPromise(url, self.config, self.params).then(function (data) {\n          if (requestNo === self.requestOrder) {\n            if (self.table.options.ajaxResponse) {\n              data = self.table.options.ajaxResponse.call(self.table, self.url, self.params, data);\n            }\n\n            resolve(data);\n          } else {\n            console.warn(\"Ajax Response Blocked - An active ajax request was blocked by an attempt to change table data while the request was being made\");\n          }\n\n          self.hideLoader();\n          self.loading = false;\n        }).catch(function (error) {\n          console.error(\"Ajax Load Error: \", error);\n          self.table.options.ajaxError.call(self.table, error);\n          self.showError();\n          setTimeout(function () {\n            self.hideLoader();\n          }, 3000);\n          self.loading = false;\n          reject();\n        });\n      } else {\n        reject();\n      }\n    });\n  };\n\n  Ajax.prototype.showLoader = function () {\n    var shouldLoad = typeof this.table.options.ajaxLoader === \"function\" ? this.table.options.ajaxLoader() : this.table.options.ajaxLoader;\n\n    if (shouldLoad) {\n      this.hideLoader();\n\n      while (this.msgElement.firstChild) {\n        this.msgElement.removeChild(this.msgElement.firstChild);\n      }\n\n      this.msgElement.classList.remove(\"tabulator-error\");\n      this.msgElement.classList.add(\"tabulator-loading\");\n\n      if (this.loadingElement) {\n        this.msgElement.appendChild(this.loadingElement);\n      } else {\n        this.msgElement.innerHTML = this.table.modules.localize.getText(\"ajax|loading\");\n      }\n\n      this.table.element.appendChild(this.loaderElement);\n    }\n  };\n\n  Ajax.prototype.showError = function () {\n    this.hideLoader();\n\n    while (this.msgElement.firstChild) {\n      this.msgElement.removeChild(this.msgElement.firstChild);\n    }\n\n    this.msgElement.classList.remove(\"tabulator-loading\");\n    this.msgElement.classList.add(\"tabulator-error\");\n\n    if (this.errorElement) {\n      this.msgElement.appendChild(this.errorElement);\n    } else {\n      this.msgElement.innerHTML = this.table.modules.localize.getText(\"ajax|error\");\n    }\n\n    this.table.element.appendChild(this.loaderElement);\n  };\n\n  Ajax.prototype.hideLoader = function () {\n    if (this.loaderElement.parentNode) {\n      this.loaderElement.parentNode.removeChild(this.loaderElement);\n    }\n  }; //default ajax config object\n\n\n  Ajax.prototype.defaultConfig = {\n    method: \"GET\"\n  };\n\n  Ajax.prototype.defaultURLGenerator = function (url, config, params) {\n    if (params && Object.keys(params).length) {\n      if (!config.method || config.method.toLowerCase() == \"get\") {\n        config.method = \"get\";\n        url += \"?\" + this.serializeParams(params);\n      }\n    }\n\n    return url;\n  };\n\n  Ajax.prototype.defaultLoaderPromise = function (url, config, params) {\n    var self = this,\n        contentType;\n    return new Promise(function (resolve, reject) {\n      //set url\n      url = self.urlGenerator(url, config, params); //set body content if not GET request\n\n      if (config.method != \"get\") {\n        contentType = _typeof(self.table.options.ajaxContentType) === \"object\" ? self.table.options.ajaxContentType : self.contentTypeFormatters[self.table.options.ajaxContentType];\n\n        if (contentType) {\n          for (var key in contentType.headers) {\n            if (!config.headers) {\n              config.headers = {};\n            }\n\n            if (typeof config.headers[key] === \"undefined\") {\n              config.headers[key] = contentType.headers[key];\n            }\n          }\n\n          config.body = contentType.body.call(self, url, config, params);\n        } else {\n          console.warn(\"Ajax Error - Invalid ajaxContentType value:\", self.table.options.ajaxContentType);\n        }\n      }\n\n      if (url) {\n        //configure headers\n        if (typeof config.credentials === \"undefined\") {\n          config.credentials = 'include';\n        }\n\n        if (typeof config.headers === \"undefined\") {\n          config.headers = {};\n        }\n\n        if (typeof config.headers.Accept === \"undefined\") {\n          config.headers.Accept = \"application/json\";\n        }\n\n        if (typeof config.headers[\"X-Requested-With\"] === \"undefined\") {\n          config.headers[\"X-Requested-With\"] = \"XMLHttpRequest\";\n        } //send request\n\n\n        fetch(url, config).then(function (response) {\n          if (response.ok) {\n            response.json().then(function (data) {\n              resolve(data);\n            }).catch(function (error) {\n              reject(error);\n              console.warn(\"Ajax Load Error - Invalid JSON returned\", error);\n            });\n          } else {\n            console.error(\"Ajax Load Error - Connection Error: \" + response.status, response.statusText);\n            reject(response);\n          }\n        }).catch(function (error) {\n          console.error(\"Ajax Load Error - Connection Error: \", error);\n          reject(error);\n        });\n      } else {\n        reject(\"No URL Set\");\n      }\n    });\n  };\n\n  Ajax.prototype.contentTypeFormatters = {\n    \"json\": {\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: function body(url, config, params) {\n        return JSON.stringify(params);\n      }\n    },\n    \"form\": {\n      headers: {},\n      body: function body(url, config, params) {\n        var output = this.generateParamsList(params),\n            form = new FormData();\n        output.forEach(function (item) {\n          form.append(item.key, item.value);\n        });\n        return form;\n      }\n    }\n  };\n  Tabulator.prototype.registerModule(\"ajax\", Ajax);\n\n  var ColumnCalcs = function ColumnCalcs(table) {\n    this.table = table; //hold Tabulator object\n\n    this.topCalcs = [];\n    this.botCalcs = [];\n    this.genColumn = false;\n    this.topElement = this.createElement();\n    this.botElement = this.createElement();\n    this.topRow = false;\n    this.botRow = false;\n    this.topInitialized = false;\n    this.botInitialized = false;\n    this.initialize();\n  };\n\n  ColumnCalcs.prototype.createElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-calcs-holder\");\n    return el;\n  };\n\n  ColumnCalcs.prototype.initialize = function () {\n    this.genColumn = new Column({\n      field: \"value\"\n    }, this);\n  }; //dummy functions to handle being mock column manager\n\n\n  ColumnCalcs.prototype.registerColumnField = function () {}; //initialize column calcs\n\n\n  ColumnCalcs.prototype.initializeColumn = function (column) {\n    var def = column.definition;\n    var config = {\n      topCalcParams: def.topCalcParams || {},\n      botCalcParams: def.bottomCalcParams || {}\n    };\n\n    if (def.topCalc) {\n      switch (_typeof(def.topCalc)) {\n        case \"string\":\n          if (this.calculations[def.topCalc]) {\n            config.topCalc = this.calculations[def.topCalc];\n          } else {\n            console.warn(\"Column Calc Error - No such calculation found, ignoring: \", def.topCalc);\n          }\n\n          break;\n\n        case \"function\":\n          config.topCalc = def.topCalc;\n          break;\n      }\n\n      if (config.topCalc) {\n        column.modules.columnCalcs = config;\n        this.topCalcs.push(column);\n\n        if (this.table.options.columnCalcs != \"group\") {\n          this.initializeTopRow();\n        }\n      }\n    }\n\n    if (def.bottomCalc) {\n      switch (_typeof(def.bottomCalc)) {\n        case \"string\":\n          if (this.calculations[def.bottomCalc]) {\n            config.botCalc = this.calculations[def.bottomCalc];\n          } else {\n            console.warn(\"Column Calc Error - No such calculation found, ignoring: \", def.bottomCalc);\n          }\n\n          break;\n\n        case \"function\":\n          config.botCalc = def.bottomCalc;\n          break;\n      }\n\n      if (config.botCalc) {\n        column.modules.columnCalcs = config;\n        this.botCalcs.push(column);\n\n        if (this.table.options.columnCalcs != \"group\") {\n          this.initializeBottomRow();\n        }\n      }\n    }\n  };\n\n  ColumnCalcs.prototype.removeCalcs = function () {\n    var changed = false;\n\n    if (this.topInitialized) {\n      this.topInitialized = false;\n      this.topElement.parentNode.removeChild(this.topElement);\n      changed = true;\n    }\n\n    if (this.botInitialized) {\n      this.botInitialized = false;\n      this.table.footerManager.remove(this.botElement);\n      changed = true;\n    }\n\n    if (changed) {\n      this.table.rowManager.adjustTableSize();\n    }\n  };\n\n  ColumnCalcs.prototype.initializeTopRow = function () {\n    if (!this.topInitialized) {\n      // this.table.columnManager.headersElement.after(this.topElement);\n      this.table.columnManager.getElement().insertBefore(this.topElement, this.table.columnManager.headersElement.nextSibling);\n      this.topInitialized = true;\n    }\n  };\n\n  ColumnCalcs.prototype.initializeBottomRow = function () {\n    if (!this.botInitialized) {\n      this.table.footerManager.prepend(this.botElement);\n      this.botInitialized = true;\n    }\n  };\n\n  ColumnCalcs.prototype.scrollHorizontal = function (left) {\n    var hozAdjust = 0,\n        scrollWidth = this.table.columnManager.getElement().scrollWidth - this.table.element.clientWidth;\n\n    if (this.botInitialized) {\n      this.botRow.getElement().style.marginLeft = -left + \"px\";\n    }\n  };\n\n  ColumnCalcs.prototype.recalc = function (rows) {\n    var data, row;\n\n    if (this.topInitialized || this.botInitialized) {\n      data = this.rowsToData(rows);\n\n      if (this.topInitialized) {\n        row = this.generateRow(\"top\", this.rowsToData(rows));\n        this.topRow = row;\n\n        while (this.topElement.firstChild) {\n          this.topElement.removeChild(this.topElement.firstChild);\n        }\n\n        this.topElement.appendChild(row.getElement());\n        row.initialize(true);\n      }\n\n      if (this.botInitialized) {\n        row = this.generateRow(\"bottom\", this.rowsToData(rows));\n        this.botRow = row;\n\n        while (this.botElement.firstChild) {\n          this.botElement.removeChild(this.botElement.firstChild);\n        }\n\n        this.botElement.appendChild(row.getElement());\n        row.initialize(true);\n      }\n\n      this.table.rowManager.adjustTableSize(); //set resizable handles\n\n      if (this.table.modExists(\"frozenColumns\")) {\n        this.table.modules.frozenColumns.layout();\n      }\n    }\n  };\n\n  ColumnCalcs.prototype.recalcRowGroup = function (row) {\n    this.recalcGroup(this.table.modules.groupRows.getRowGroup(row));\n  };\n\n  ColumnCalcs.prototype.recalcGroup = function (group) {\n    var data, rowData;\n\n    if (group) {\n      if (group.calcs) {\n        if (group.calcs.bottom) {\n          data = this.rowsToData(group.rows);\n          rowData = this.generateRowData(\"bottom\", data);\n          group.calcs.bottom.updateData(rowData);\n          group.calcs.bottom.reinitialize();\n        }\n\n        if (group.calcs.top) {\n          data = this.rowsToData(group.rows);\n          rowData = this.generateRowData(\"top\", data);\n          group.calcs.top.updateData(rowData);\n          group.calcs.top.reinitialize();\n        }\n      }\n    }\n  }; //generate top stats row\n\n\n  ColumnCalcs.prototype.generateTopRow = function (rows) {\n    return this.generateRow(\"top\", this.rowsToData(rows));\n  }; //generate bottom stats row\n\n\n  ColumnCalcs.prototype.generateBottomRow = function (rows) {\n    return this.generateRow(\"bottom\", this.rowsToData(rows));\n  };\n\n  ColumnCalcs.prototype.rowsToData = function (rows) {\n    var data = [];\n    rows.forEach(function (row) {\n      data.push(row.getData());\n    });\n    return data;\n  }; //generate stats row\n\n\n  ColumnCalcs.prototype.generateRow = function (pos, data) {\n    var self = this,\n        rowData = this.generateRowData(pos, data),\n        row;\n\n    if (self.table.modExists(\"mutator\")) {\n      self.table.modules.mutator.disable();\n    }\n\n    row = new Row(rowData, this);\n\n    if (self.table.modExists(\"mutator\")) {\n      self.table.modules.mutator.enable();\n    }\n\n    row.getElement().classList.add(\"tabulator-calcs\", \"tabulator-calcs-\" + pos);\n    row.type = \"calc\";\n\n    row.generateCells = function () {\n      var cells = [];\n      self.table.columnManager.columnsByIndex.forEach(function (column) {\n        if (column.visible) {\n          //set field name of mock column\n          self.genColumn.setField(column.getField());\n          self.genColumn.hozAlign = column.hozAlign;\n\n          if (column.definition[pos + \"CalcFormatter\"] && self.table.modExists(\"format\")) {\n            self.genColumn.modules.format = {\n              formatter: self.table.modules.format.getFormatter(column.definition[pos + \"CalcFormatter\"]),\n              params: column.definition[pos + \"CalcFormatterParams\"]\n            };\n          } else {\n            self.genColumn.modules.format = {\n              formatter: self.table.modules.format.getFormatter(\"plaintext\"),\n              params: {}\n            };\n          } //generate cell and assign to correct column\n\n\n          var cell = new Cell(self.genColumn, row);\n          cell.column = column;\n          cell.setWidth(column.width);\n          column.cells.push(cell);\n          cells.push(cell);\n        }\n      });\n      this.cells = cells;\n    };\n\n    return row;\n  }; //generate stats row\n\n\n  ColumnCalcs.prototype.generateRowData = function (pos, data) {\n    var rowData = {},\n        calcs = pos == \"top\" ? this.topCalcs : this.botCalcs,\n        type = pos == \"top\" ? \"topCalc\" : \"botCalc\",\n        params,\n        paramKey;\n    calcs.forEach(function (column) {\n      var values = [];\n\n      if (column.modules.columnCalcs && column.modules.columnCalcs[type]) {\n        data.forEach(function (item) {\n          values.push(column.getFieldValue(item));\n        });\n        paramKey = type + \"Params\";\n        params = typeof column.modules.columnCalcs[paramKey] === \"function\" ? column.modules.columnCalcs[paramKey](value, data) : column.modules.columnCalcs[paramKey];\n        column.setFieldValue(rowData, column.modules.columnCalcs[type](values, data, params));\n      }\n    });\n    return rowData;\n  };\n\n  ColumnCalcs.prototype.hasTopCalcs = function () {\n    return !!this.topCalcs.length;\n  }, ColumnCalcs.prototype.hasBottomCalcs = function () {\n    return !!this.botCalcs.length;\n  }, //handle table redraw\n  ColumnCalcs.prototype.redraw = function () {\n    if (this.topRow) {\n      this.topRow.normalizeHeight(true);\n    }\n\n    if (this.botRow) {\n      this.botRow.normalizeHeight(true);\n    }\n  }; //return the calculated\n\n  ColumnCalcs.prototype.getResults = function () {\n    var self = this,\n        results = {},\n        groups;\n\n    if (this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n      groups = this.table.modules.groupRows.getGroups(true);\n      groups.forEach(function (group) {\n        results[group.getKey()] = self.getGroupResults(group);\n      });\n    } else {\n      results = {\n        top: this.topRow ? this.topRow.getData() : {},\n        bottom: this.botRow ? this.botRow.getData() : {}\n      };\n    }\n\n    return results;\n  }; //get results from a group\n\n\n  ColumnCalcs.prototype.getGroupResults = function (group) {\n    var self = this,\n        groupObj = group._getSelf(),\n        subGroups = group.getSubGroups(),\n        subGroupResults = {},\n        results = {};\n\n    subGroups.forEach(function (subgroup) {\n      subGroupResults[subgroup.getKey()] = self.getGroupResults(subgroup);\n    });\n    results = {\n      top: groupObj.calcs.top ? groupObj.calcs.top.getData() : {},\n      bottom: groupObj.calcs.bottom ? groupObj.calcs.bottom.getData() : {},\n      groups: subGroupResults\n    };\n    return results;\n  }; //default calculations\n\n\n  ColumnCalcs.prototype.calculations = {\n    \"avg\": function avg(values, data, calcParams) {\n      var output = 0,\n          precision = typeof calcParams.precision !== \"undefined\" ? calcParams.precision : 2;\n\n      if (values.length) {\n        output = values.reduce(function (sum, value) {\n          value = Number(value);\n          return sum + value;\n        });\n        output = output / values.length;\n        output = precision !== false ? output.toFixed(precision) : output;\n      }\n\n      return parseFloat(output).toString();\n    },\n    \"max\": function max(values, data, calcParams) {\n      var output = null,\n          precision = typeof calcParams.precision !== \"undefined\" ? calcParams.precision : false;\n      values.forEach(function (value) {\n        value = Number(value);\n\n        if (value > output || output === null) {\n          output = value;\n        }\n      });\n      return output !== null ? precision !== false ? output.toFixed(precision) : output : \"\";\n    },\n    \"min\": function min(values, data, calcParams) {\n      var output = null,\n          precision = typeof calcParams.precision !== \"undefined\" ? calcParams.precision : false;\n      values.forEach(function (value) {\n        value = Number(value);\n\n        if (value < output || output === null) {\n          output = value;\n        }\n      });\n      return output !== null ? precision !== false ? output.toFixed(precision) : output : \"\";\n    },\n    \"sum\": function sum(values, data, calcParams) {\n      var output = 0,\n          precision = typeof calcParams.precision !== \"undefined\" ? calcParams.precision : false;\n\n      if (values.length) {\n        values.forEach(function (value) {\n          value = Number(value);\n          output += !isNaN(value) ? Number(value) : 0;\n        });\n      }\n\n      return precision !== false ? output.toFixed(precision) : output;\n    },\n    \"concat\": function concat(values, data, calcParams) {\n      var output = 0;\n\n      if (values.length) {\n        output = values.reduce(function (sum, value) {\n          return String(sum) + String(value);\n        });\n      }\n\n      return output;\n    },\n    \"count\": function count(values, data, calcParams) {\n      var output = 0;\n\n      if (values.length) {\n        values.forEach(function (value) {\n          if (value) {\n            output++;\n          }\n        });\n      }\n\n      return output;\n    }\n  };\n  Tabulator.prototype.registerModule(\"columnCalcs\", ColumnCalcs);\n\n  var Clipboard = function Clipboard(table) {\n    this.table = table;\n    this.mode = true;\n    this.copySelector = false;\n    this.copySelectorParams = {};\n    this.copyFormatter = false;\n    this.copyFormatterParams = {};\n\n    this.pasteParser = function () {};\n\n    this.pasteAction = function () {};\n\n    this.htmlElement = false;\n    this.config = {};\n    this.blocked = true; //block copy actions not originating from this command\n  };\n\n  Clipboard.prototype.initialize = function () {\n    var self = this;\n    this.mode = this.table.options.clipboard;\n\n    if (this.mode === true || this.mode === \"copy\") {\n      this.table.element.addEventListener(\"copy\", function (e) {\n        var data;\n        self.processConfig();\n\n        if (!self.blocked) {\n          e.preventDefault();\n          data = self.generateContent();\n\n          if (window.clipboardData && window.clipboardData.setData) {\n            window.clipboardData.setData('Text', data);\n          } else if (e.clipboardData && e.clipboardData.setData) {\n            e.clipboardData.setData('text/plain', data);\n\n            if (self.htmlElement) {\n              e.clipboardData.setData('text/html', self.htmlElement.outerHTML);\n            }\n          } else if (e.originalEvent && e.originalEvent.clipboardData.setData) {\n            e.originalEvent.clipboardData.setData('text/plain', data);\n\n            if (self.htmlElement) {\n              e.originalEvent.clipboardData.setData('text/html', self.htmlElement.outerHTML);\n            }\n          }\n\n          self.table.options.clipboardCopied.call(this.table, data);\n          self.reset();\n        }\n      });\n    }\n\n    if (this.mode === true || this.mode === \"paste\") {\n      this.table.element.addEventListener(\"paste\", function (e) {\n        self.paste(e);\n      });\n    }\n\n    this.setPasteParser(this.table.options.clipboardPasteParser);\n    this.setPasteAction(this.table.options.clipboardPasteAction);\n  };\n\n  Clipboard.prototype.processConfig = function () {\n    var config = {\n      columnHeaders: \"groups\",\n      rowGroups: true\n    };\n\n    if (typeof this.table.options.clipboardCopyHeader !== \"undefined\") {\n      config.columnHeaders = this.table.options.clipboardCopyHeader;\n      console.warn(\"DEPRECATION WANRING - clipboardCopyHeader option has been depricated, please use the columnHeaders property on the clipboardCopyConfig option\");\n    }\n\n    if (this.table.options.clipboardCopyConfig) {\n      for (var key in this.table.options.clipboardCopyConfig) {\n        config[key] = this.table.options.clipboardCopyConfig[key];\n      }\n    }\n\n    if (config.rowGroups && this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n      this.config.rowGroups = true;\n    }\n\n    if (config.columnHeaders) {\n      if ((config.columnHeaders === \"groups\" || config === true) && this.table.columnManager.columns.length != this.table.columnManager.columnsByIndex.length) {\n        this.config.columnHeaders = \"groups\";\n      } else {\n        this.config.columnHeaders = \"columns\";\n      }\n    } else {\n      this.config.columnHeaders = false;\n    }\n  };\n\n  Clipboard.prototype.reset = function () {\n    this.blocked = false;\n    this.originalSelectionText = \"\";\n  };\n\n  Clipboard.prototype.setPasteAction = function (action) {\n    switch (typeof action === 'undefined' ? 'undefined' : _typeof(action)) {\n      case \"string\":\n        this.pasteAction = this.pasteActions[action];\n\n        if (!this.pasteAction) {\n          console.warn(\"Clipboard Error - No such paste action found:\", action);\n        }\n\n        break;\n\n      case \"function\":\n        this.pasteAction = action;\n        break;\n    }\n  };\n\n  Clipboard.prototype.setPasteParser = function (parser) {\n    switch (typeof parser === 'undefined' ? 'undefined' : _typeof(parser)) {\n      case \"string\":\n        this.pasteParser = this.pasteParsers[parser];\n\n        if (!this.pasteParser) {\n          console.warn(\"Clipboard Error - No such paste parser found:\", parser);\n        }\n\n        break;\n\n      case \"function\":\n        this.pasteParser = parser;\n        break;\n    }\n  };\n\n  Clipboard.prototype.paste = function (e) {\n    var data, rowData, rows;\n\n    if (this.checkPaseOrigin(e)) {\n      data = this.getPasteData(e);\n      rowData = this.pasteParser.call(this, data);\n\n      if (rowData) {\n        e.preventDefault();\n\n        if (this.table.modExists(\"mutator\")) {\n          rowData = this.mutateData(rowData);\n        }\n\n        rows = this.pasteAction.call(this, rowData);\n        this.table.options.clipboardPasted.call(this.table, data, rowData, rows);\n      } else {\n        this.table.options.clipboardPasteError.call(this.table, data);\n      }\n    }\n  };\n\n  Clipboard.prototype.mutateData = function (data) {\n    var self = this,\n        output = [];\n\n    if (Array.isArray(data)) {\n      data.forEach(function (row) {\n        output.push(self.table.modules.mutator.transformRow(row, \"clipboard\"));\n      });\n    } else {\n      output = data;\n    }\n\n    return output;\n  };\n\n  Clipboard.prototype.checkPaseOrigin = function (e) {\n    var valid = true;\n\n    if (e.target.tagName != \"DIV\" || this.table.modules.edit.currentCell) {\n      valid = false;\n    }\n\n    return valid;\n  };\n\n  Clipboard.prototype.getPasteData = function (e) {\n    var data;\n\n    if (window.clipboardData && window.clipboardData.getData) {\n      data = window.clipboardData.getData('Text');\n    } else if (e.clipboardData && e.clipboardData.getData) {\n      data = e.clipboardData.getData('text/plain');\n    } else if (e.originalEvent && e.originalEvent.clipboardData.getData) {\n      data = e.originalEvent.clipboardData.getData('text/plain');\n    }\n\n    return data;\n  };\n\n  Clipboard.prototype.copy = function (selector, selectorParams, formatter, formatterParams, internal) {\n    var range, sel;\n    this.blocked = false;\n\n    if (this.mode === true || this.mode === \"copy\") {\n      if (typeof window.getSelection != \"undefined\" && typeof document.createRange != \"undefined\") {\n        range = document.createRange();\n        range.selectNodeContents(this.table.element);\n        sel = window.getSelection();\n\n        if (sel.toString() && internal) {\n          selector = \"userSelection\";\n          formatter = \"raw\";\n          selectorParams = sel.toString();\n        }\n\n        sel.removeAllRanges();\n        sel.addRange(range);\n      } else if (typeof document.selection != \"undefined\" && typeof document.body.createTextRange != \"undefined\") {\n        textRange = document.body.createTextRange();\n        textRange.moveToElementText(this.table.element);\n        textRange.select();\n      }\n\n      this.setSelector(selector);\n      this.copySelectorParams = typeof selectorParams != \"undefined\" && selectorParams != null ? selectorParams : this.config.columnHeaders;\n      this.setFormatter(formatter);\n      this.copyFormatterParams = typeof formatterParams != \"undefined\" && formatterParams != null ? formatterParams : {};\n      document.execCommand('copy');\n\n      if (sel) {\n        sel.removeAllRanges();\n      }\n    }\n  };\n\n  Clipboard.prototype.setSelector = function (selector) {\n    selector = selector || this.table.options.clipboardCopySelector;\n\n    switch (typeof selector === 'undefined' ? 'undefined' : _typeof(selector)) {\n      case \"string\":\n        if (this.copySelectors[selector]) {\n          this.copySelector = this.copySelectors[selector];\n        } else {\n          console.warn(\"Clipboard Error - No such selector found:\", selector);\n        }\n\n        break;\n\n      case \"function\":\n        this.copySelector = selector;\n        break;\n    }\n  };\n\n  Clipboard.prototype.setFormatter = function (formatter) {\n    formatter = formatter || this.table.options.clipboardCopyFormatter;\n\n    switch (typeof formatter === 'undefined' ? 'undefined' : _typeof(formatter)) {\n      case \"string\":\n        if (this.copyFormatters[formatter]) {\n          this.copyFormatter = this.copyFormatters[formatter];\n        } else {\n          console.warn(\"Clipboard Error - No such formatter found:\", formatter);\n        }\n\n        break;\n\n      case \"function\":\n        this.copyFormatter = formatter;\n        break;\n    }\n  };\n\n  Clipboard.prototype.generateContent = function () {\n    var data;\n    this.htmlElement = false;\n    data = this.copySelector.call(this, this.config, this.copySelectorParams);\n    return this.copyFormatter.call(this, data, this.config, this.copyFormatterParams);\n  };\n\n  Clipboard.prototype.generateSimpleHeaders = function (columns) {\n    var headers = [];\n    columns.forEach(function (column) {\n      headers.push(column.definition.title);\n    });\n    return headers;\n  };\n\n  Clipboard.prototype.generateColumnGroupHeaders = function (columns) {\n    var _this18 = this;\n\n    var output = [];\n    this.table.columnManager.columns.forEach(function (column) {\n      var colData = _this18.processColumnGroup(column);\n\n      if (colData) {\n        output.push(colData);\n      }\n    });\n    return output;\n  };\n\n  Clipboard.prototype.processColumnGroup = function (column) {\n    var _this19 = this;\n\n    var subGroups = column.columns;\n    var groupData = {\n      type: \"group\",\n      title: column.definition.title,\n      column: column\n    };\n\n    if (subGroups.length) {\n      groupData.subGroups = [];\n      groupData.width = 0;\n      subGroups.forEach(function (subGroup) {\n        var subGroupData = _this19.processColumnGroup(subGroup);\n\n        if (subGroupData) {\n          groupData.width += subGroupData.width;\n          groupData.subGroups.push(subGroupData);\n        }\n      });\n\n      if (!groupData.width) {\n        return false;\n      }\n    } else {\n      if (column.field && column.visible) {\n        groupData.width = 1;\n      } else {\n        return false;\n      }\n    }\n\n    return groupData;\n  };\n\n  Clipboard.prototype.groupHeadersToRows = function (columns) {\n    var headers = [];\n\n    function parseColumnGroup(column, level) {\n      if (typeof headers[level] === \"undefined\") {\n        headers[level] = [];\n      }\n\n      headers[level].push(column.title);\n\n      if (column.subGroups) {\n        column.subGroups.forEach(function (subGroup) {\n          parseColumnGroup(subGroup, level + 1);\n        });\n      } else {\n        padColumnheaders();\n      }\n    }\n\n    function padColumnheaders() {\n      var max = 0;\n      headers.forEach(function (title) {\n        var len = title.length;\n\n        if (len > max) {\n          max = len;\n        }\n      });\n      headers.forEach(function (title) {\n        var len = title.length;\n\n        if (len < max) {\n          for (var i = len; i < max; i++) {\n            title.push(\"\");\n          }\n        }\n      });\n    }\n\n    columns.forEach(function (column) {\n      parseColumnGroup(column, 0);\n    });\n    return headers;\n  };\n\n  Clipboard.prototype.rowsToData = function (rows, config, params) {\n    var columns = this.table.columnManager.columnsByIndex,\n        data = [];\n    rows.forEach(function (row) {\n      var rowArray = [],\n          rowData = row.getData(\"clipboard\");\n      columns.forEach(function (column) {\n        var value = column.getFieldValue(rowData);\n\n        switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n          case \"object\":\n            value = JSON.stringify(value);\n            break;\n\n          case \"undefined\":\n          case \"null\":\n            value = \"\";\n            break;\n\n          default:\n            value = value;\n        }\n\n        rowArray.push(value);\n      });\n      data.push(rowArray);\n    });\n    return data;\n  };\n\n  Clipboard.prototype.buildComplexRows = function (config) {\n    var _this20 = this;\n\n    var output = [],\n        groups = this.table.modules.groupRows.getGroups();\n    groups.forEach(function (group) {\n      output.push(_this20.processGroupData(group));\n    });\n    return output;\n  };\n\n  Clipboard.prototype.processGroupData = function (group) {\n    var _this21 = this;\n\n    var subGroups = group.getSubGroups();\n    var groupData = {\n      type: \"group\",\n      key: group.key\n    };\n\n    if (subGroups.length) {\n      groupData.subGroups = [];\n      subGroups.forEach(function (subGroup) {\n        groupData.subGroups.push(_this21.processGroupData(subGroup));\n      });\n    } else {\n      groupData.rows = group.getRows(true);\n    }\n\n    return groupData;\n  };\n\n  Clipboard.prototype.buildOutput = function (rows, config, params) {\n    var _this22 = this;\n\n    var output = [],\n        columns = this.table.columnManager.columnsByIndex;\n\n    if (config.columnHeaders) {\n      if (config.columnHeaders == \"groups\") {\n        columns = this.generateColumnGroupHeaders(this.table.columnManager.columns);\n        output = output.concat(this.groupHeadersToRows(columns));\n      } else {\n        output.push(this.generateSimpleHeaders(columns));\n      }\n    } //generate styled content\n\n\n    if (this.table.options.clipboardCopyStyled) {\n      this.generateHTML(rows, columns, config, params);\n    } //generate unstyled content\n\n\n    if (config.rowGroups) {\n      rows.forEach(function (row) {\n        output = output.concat(_this22.parseRowGroupData(row, config, params));\n      });\n    } else {\n      output = output.concat(this.rowsToData(rows, config, params));\n    }\n\n    return output;\n  };\n\n  Clipboard.prototype.parseRowGroupData = function (group, config, params) {\n    var _this23 = this;\n\n    var groupData = [];\n    groupData.push([group.key]);\n\n    if (group.subGroups) {\n      group.subGroups.forEach(function (subGroup) {\n        groupData = groupData.concat(_this23.parseRowGroupData(subGroup, config, params));\n      });\n    } else {\n      groupData = groupData.concat(this.rowsToData(group.rows, config, params));\n    }\n\n    return groupData;\n  };\n\n  Clipboard.prototype.generateHTML = function (rows, columns, config, params) {\n    var self = this,\n        data = [],\n        headers = [],\n        body,\n        oddRow,\n        evenRow,\n        firstRow,\n        firstCell,\n        firstGroup,\n        lastCell,\n        styleCells; //create table element\n\n    this.htmlElement = document.createElement(\"table\");\n    self.mapElementStyles(this.table.element, this.htmlElement, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\"]);\n\n    function generateSimpleHeaders() {\n      var headerEl = document.createElement(\"tr\");\n      columns.forEach(function (column) {\n        var columnEl = document.createElement(\"th\");\n        columnEl.innerHTML = column.definition.title;\n        self.mapElementStyles(column.getElement(), columnEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"background-color\", \"color\", \"font-weight\", \"font-family\", \"font-size\"]);\n        headerEl.appendChild(columnEl);\n      });\n      self.mapElementStyles(self.table.columnManager.getHeadersElement(), headerEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"background-color\", \"color\", \"font-weight\", \"font-family\", \"font-size\"]);\n      self.htmlElement.appendChild(document.createElement(\"thead\").appendChild(headerEl));\n    }\n\n    function generateHeaders(headers) {\n      var headerHolderEl = document.createElement(\"thead\");\n      headers.forEach(function (columns) {\n        var headerEl = document.createElement(\"tr\");\n        columns.forEach(function (column) {\n          var columnEl = document.createElement(\"th\");\n\n          if (column.width > 1) {\n            columnEl.colSpan = column.width;\n          }\n\n          if (column.height > 1) {\n            columnEl.rowSpan = column.height;\n          }\n\n          columnEl.innerHTML = column.title;\n          self.mapElementStyles(column.element, columnEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"background-color\", \"color\", \"font-weight\", \"font-family\", \"font-size\"]);\n          headerEl.appendChild(columnEl);\n        });\n        self.mapElementStyles(self.table.columnManager.getHeadersElement(), headerEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"background-color\", \"color\", \"font-weight\", \"font-family\", \"font-size\"]);\n        headerHolderEl.appendChild(headerEl);\n      });\n      self.htmlElement.appendChild(headerHolderEl);\n    }\n\n    function parseColumnGroup(column, level) {\n      if (typeof headers[level] === \"undefined\") {\n        headers[level] = [];\n      }\n\n      headers[level].push({\n        title: column.title,\n        width: column.width,\n        height: 1,\n        children: !!column.subGroups,\n        element: column.column.getElement()\n      });\n\n      if (column.subGroups) {\n        column.subGroups.forEach(function (subGroup) {\n          parseColumnGroup(subGroup, level + 1);\n        });\n      }\n    }\n\n    function padVerticalColumnheaders() {\n      headers.forEach(function (row, index) {\n        row.forEach(function (header) {\n          if (!header.children) {\n            header.height = headers.length - index;\n          }\n        });\n      });\n    } //create headers if needed\n\n\n    if (config.columnHeaders) {\n      if (config.columnHeaders == \"groups\") {\n        columns.forEach(function (column) {\n          parseColumnGroup(column, 0);\n        });\n        padVerticalColumnheaders();\n        generateHeaders(headers);\n      } else {\n        generateSimpleHeaders();\n      }\n    }\n\n    columns = this.table.columnManager.columnsByIndex; //create table body\n\n    body = document.createElement(\"tbody\"); //lookup row styles\n\n    if (window.getComputedStyle) {\n      oddRow = this.table.element.querySelector(\".tabulator-row-odd:not(.tabulator-group):not(.tabulator-calcs)\");\n      evenRow = this.table.element.querySelector(\".tabulator-row-even:not(.tabulator-group):not(.tabulator-calcs)\");\n      firstRow = this.table.element.querySelector(\".tabulator-row:not(.tabulator-group):not(.tabulator-calcs)\");\n      firstGroup = this.table.element.getElementsByClassName(\"tabulator-group\")[0];\n\n      if (firstRow) {\n        styleCells = firstRow.getElementsByClassName(\"tabulator-cell\");\n        firstCell = styleCells[0];\n        lastCell = styleCells[styleCells.length - 1];\n      }\n    }\n\n    function processRows(rowArray) {\n      //add rows to table\n      rowArray.forEach(function (row, i) {\n        var rowEl = document.createElement(\"tr\"),\n            rowData = row.getData(\"clipboard\"),\n            styleRow = firstRow;\n        columns.forEach(function (column, j) {\n          var cellEl = document.createElement(\"td\"),\n              value = column.getFieldValue(rowData);\n\n          switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n            case \"object\":\n              value = JSON.stringify(value);\n              break;\n\n            case \"undefined\":\n            case \"null\":\n              value = \"\";\n              break;\n\n            default:\n              value = value;\n          }\n\n          cellEl.innerHTML = value;\n\n          if (column.definition.align) {\n            cellEl.style.textAlign = column.definition.align;\n          }\n\n          if (j < columns.length - 1) {\n            if (firstCell) {\n              self.mapElementStyles(firstCell, cellEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"color\", \"font-weight\", \"font-family\", \"font-size\"]);\n            }\n          } else {\n            if (firstCell) {\n              self.mapElementStyles(firstCell, cellEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"color\", \"font-weight\", \"font-family\", \"font-size\"]);\n            }\n          }\n\n          rowEl.appendChild(cellEl);\n        });\n\n        if (!(i % 2) && oddRow) {\n          styleRow = oddRow;\n        }\n\n        if (i % 2 && evenRow) {\n          styleRow = evenRow;\n        }\n\n        if (styleRow) {\n          self.mapElementStyles(styleRow, rowEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"color\", \"font-weight\", \"font-family\", \"font-size\", \"background-color\"]);\n        }\n\n        body.appendChild(rowEl);\n      });\n    }\n\n    function processGroup(group) {\n      var groupEl = document.createElement(\"tr\"),\n          groupCellEl = document.createElement(\"td\");\n      groupCellEl.colSpan = columns.length;\n      groupCellEl.innerHTML = group.key;\n      groupEl.appendChild(groupCellEl);\n      body.appendChild(groupEl);\n      self.mapElementStyles(firstGroup, groupEl, [\"border-top\", \"border-left\", \"border-right\", \"border-bottom\", \"color\", \"font-weight\", \"font-family\", \"font-size\", \"background-color\"]);\n\n      if (group.subGroups) {\n        group.subGroups.forEach(function (subGroup) {\n          processGroup(subGroup);\n        });\n      } else {\n        processRows(group.rows);\n      }\n    }\n\n    if (config.rowGroups) {\n      rows.forEach(function (group) {\n        processGroup(group);\n      });\n    } else {\n      processRows(rows);\n    }\n\n    this.htmlElement.appendChild(body);\n  };\n\n  Clipboard.prototype.mapElementStyles = function (from, to, props) {\n    var lookup = {\n      \"background-color\": \"backgroundColor\",\n      \"color\": \"fontColor\",\n      \"font-weight\": \"fontWeight\",\n      \"font-family\": \"fontFamily\",\n      \"font-size\": \"fontSize\",\n      \"border-top\": \"borderTop\",\n      \"border-left\": \"borderLeft\",\n      \"border-right\": \"borderRight\",\n      \"border-bottom\": \"borderBottom\"\n    };\n\n    if (window.getComputedStyle) {\n      var fromStyle = window.getComputedStyle(from);\n      props.forEach(function (prop) {\n        to.style[lookup[prop]] = fromStyle.getPropertyValue(prop);\n      });\n    } // return window.getComputedStyle ? window.getComputedStyle(element, null).getPropertyValue(property) : element.style[property.replace(/-([a-z])/g, function (g) { return g[1].toUpperCase(); })];\n\n  };\n\n  Clipboard.prototype.copySelectors = {\n    userSelection: function userSelection(config, params) {\n      return params;\n    },\n    selected: function selected(config, params) {\n      var rows = [];\n\n      if (this.table.modExists(\"selectRow\", true)) {\n        rows = this.table.modules.selectRow.getSelectedRows();\n      }\n\n      if (config.rowGroups) {\n        console.warn(\"Clipboard Warning - select coptSelector does not support row groups\");\n      }\n\n      return this.buildOutput(rows, config, params);\n    },\n    table: function table(config, params) {\n      if (config.rowGroups) {\n        console.warn(\"Clipboard Warning - table coptSelector does not support row groups\");\n      }\n\n      return this.buildOutput(this.table.rowManager.getComponents(), config, params);\n    },\n    active: function active(config, params) {\n      var rows;\n\n      if (config.rowGroups) {\n        rows = this.buildComplexRows(config);\n      } else {\n        rows = this.table.rowManager.getComponents(true);\n      }\n\n      return this.buildOutput(rows, config, params);\n    }\n  };\n  Clipboard.prototype.copyFormatters = {\n    raw: function raw(data, params) {\n      return data;\n    },\n    table: function table(data, params) {\n      var output = [];\n      data.forEach(function (row) {\n        row.forEach(function (value) {\n          if (typeof value == \"undefined\") {\n            value = \"\";\n          }\n\n          value = typeof value == \"undefined\" || value === null ? \"\" : value.toString();\n\n          if (value.match(/\\r|\\n/)) {\n            value = value.split('\"').join('\"\"');\n            value = '\"' + value + '\"';\n          }\n        });\n        output.push(row.join(\"\\t\"));\n      });\n      return output.join(\"\\n\");\n    }\n  };\n  Clipboard.prototype.pasteParsers = {\n    table: function table(clipboard) {\n      var data = [],\n          success = false,\n          headerFindSuccess = true,\n          columns = this.table.columnManager.columns,\n          columnMap = [],\n          rows = []; //get data from clipboard into array of columns and rows.\n\n      clipboard = clipboard.split(\"\\n\");\n      clipboard.forEach(function (row) {\n        data.push(row.split(\"\\t\"));\n      });\n\n      if (data.length && !(data.length === 1 && data[0].length < 2)) {\n        success = true; //check if headers are present by title\n\n        data[0].forEach(function (value) {\n          var column = columns.find(function (column) {\n            return value && column.definition.title && value.trim() && column.definition.title.trim() === value.trim();\n          });\n\n          if (column) {\n            columnMap.push(column);\n          } else {\n            headerFindSuccess = false;\n          }\n        }); //check if column headers are present by field\n\n        if (!headerFindSuccess) {\n          headerFindSuccess = true;\n          columnMap = [];\n          data[0].forEach(function (value) {\n            var column = columns.find(function (column) {\n              return value && column.field && value.trim() && column.field.trim() === value.trim();\n            });\n\n            if (column) {\n              columnMap.push(column);\n            } else {\n              headerFindSuccess = false;\n            }\n          });\n\n          if (!headerFindSuccess) {\n            columnMap = this.table.columnManager.columnsByIndex;\n          }\n        } //remove header row if found\n\n\n        if (headerFindSuccess) {\n          data.shift();\n        }\n\n        data.forEach(function (item) {\n          var row = {};\n          item.forEach(function (value, i) {\n            if (columnMap[i]) {\n              row[columnMap[i].field] = value;\n            }\n          });\n          rows.push(row);\n        });\n        return rows;\n      } else {\n        return false;\n      }\n    }\n  };\n  Clipboard.prototype.pasteActions = {\n    replace: function replace(rows) {\n      return this.table.setData(rows);\n    },\n    update: function update(rows) {\n      return this.table.updateOrAddData(rows);\n    },\n    insert: function insert(rows) {\n      return this.table.addData(rows);\n    }\n  };\n  Tabulator.prototype.registerModule(\"clipboard\", Clipboard);\n\n  var DataTree = function DataTree(table) {\n    this.table = table;\n    this.indent = 10;\n    this.field = \"\";\n    this.collapseEl = null;\n    this.expandEl = null;\n    this.branchEl = null;\n\n    this.startOpen = function () {};\n\n    this.displayIndex = 0;\n  };\n\n  DataTree.prototype.initialize = function () {\n    var dummyEl = null,\n        options = this.table.options;\n    this.field = options.dataTreeChildField;\n    this.indent = options.dataTreeChildIndent;\n\n    if (options.dataTreeBranchElement) {\n      if (options.dataTreeBranchElement === true) {\n        this.branchEl = document.createElement(\"div\");\n        this.branchEl.classList.add(\"tabulator-data-tree-branch\");\n      } else {\n        if (typeof options.dataTreeBranchElement === \"string\") {\n          dummyEl = document.createElement(\"div\");\n          dummyEl.innerHTML = options.dataTreeBranchElement;\n          this.branchEl = dummyEl.firstChild;\n        } else {\n          this.branchEl = options.dataTreeBranchElement;\n        }\n      }\n    }\n\n    if (options.dataTreeCollapseElement) {\n      if (typeof options.dataTreeCollapseElement === \"string\") {\n        dummyEl = document.createElement(\"div\");\n        dummyEl.innerHTML = options.dataTreeCollapseElement;\n        this.collapseEl = dummyEl.firstChild;\n      } else {\n        this.collapseEl = options.dataTreeCollapseElement;\n      }\n    } else {\n      this.collapseEl = document.createElement(\"div\");\n      this.collapseEl.classList.add(\"tabulator-data-tree-control\");\n      this.collapseEl.innerHTML = \"<div class='tabulator-data-tree-control-collapse'></div>\";\n    }\n\n    if (options.dataTreeExpandElement) {\n      if (typeof options.dataTreeExpandElement === \"string\") {\n        dummyEl = document.createElement(\"div\");\n        dummyEl.innerHTML = options.dataTreeExpandElement;\n        this.expandEl = dummyEl.firstChild;\n      } else {\n        this.expandEl = options.dataTreeExpandElement;\n      }\n    } else {\n      this.expandEl = document.createElement(\"div\");\n      this.expandEl.classList.add(\"tabulator-data-tree-control\");\n      this.expandEl.innerHTML = \"<div class='tabulator-data-tree-control-expand'></div>\";\n    }\n\n    switch (_typeof(options.dataTreeStartExpanded)) {\n      case \"boolean\":\n        this.startOpen = function (row, index) {\n          return options.dataTreeStartExpanded;\n        };\n\n        break;\n\n      case \"function\":\n        this.startOpen = options.dataTreeStartExpanded;\n        break;\n\n      default:\n        this.startOpen = function (row, index) {\n          return options.dataTreeStartExpanded[index];\n        };\n\n        break;\n    }\n  };\n\n  DataTree.prototype.initializeRow = function (row) {\n    var children = typeof row.getData()[this.field] !== \"undefined\";\n    row.modules.dataTree = {\n      index: 0,\n      open: children ? this.startOpen(row.getComponent(), 0) : false,\n      controlEl: false,\n      branchEl: false,\n      parent: false,\n      children: children\n    };\n  };\n\n  DataTree.prototype.layoutRow = function (row) {\n    var cell = row.getCells()[0],\n        el = cell.getElement(),\n        config = row.modules.dataTree;\n    el.style.paddingLeft = parseInt(window.getComputedStyle(el, null).getPropertyValue('padding-left')) + config.index * this.indent + \"px\";\n\n    if (config.branchEl) {\n      config.branchEl.parentNode.removeChild(config.branchEl);\n    }\n\n    this.generateControlElement(row, el);\n\n    if (config.index && this.branchEl) {\n      config.branchEl = this.branchEl.cloneNode(true);\n      el.insertBefore(config.branchEl, el.firstChild);\n      el.style.paddingLeft = parseInt(el.style.paddingLeft) + (config.branchEl.offsetWidth + config.branchEl.style.marginRight) * (config.index - 1) + \"px\";\n    }\n  };\n\n  DataTree.prototype.generateControlElement = function (row, el) {\n    var _this24 = this;\n\n    var config = row.modules.dataTree,\n        el = el || row.getCells()[0].getElement(),\n        oldControl = config.controlEl;\n\n    if (config.children !== false) {\n      if (config.open) {\n        config.controlEl = this.collapseEl.cloneNode(true);\n        config.controlEl.addEventListener(\"click\", function (e) {\n          e.stopPropagation();\n\n          _this24.collapseRow(row);\n        });\n      } else {\n        config.controlEl = this.expandEl.cloneNode(true);\n        config.controlEl.addEventListener(\"click\", function (e) {\n          e.stopPropagation();\n\n          _this24.expandRow(row);\n        });\n      }\n\n      config.controlEl.addEventListener(\"mousedown\", function (e) {\n        e.stopPropagation();\n      });\n\n      if (oldControl && oldControl.parentNode === el) {\n        oldControl.parentNode.replaceChild(config.controlEl, oldControl);\n      } else {\n        el.insertBefore(config.controlEl, el.firstChild);\n      }\n    }\n  };\n\n  DataTree.prototype.setDisplayIndex = function (index) {\n    this.displayIndex = index;\n  };\n\n  DataTree.prototype.getDisplayIndex = function () {\n    return this.displayIndex;\n  };\n\n  DataTree.prototype.getRows = function (rows) {\n    var _this25 = this;\n\n    var output = [];\n    rows.forEach(function (row, i) {\n      var config, children;\n      output.push(row);\n\n      if (row instanceof Row) {\n        config = row.modules.dataTree.children;\n\n        if (!config.index && config.children !== false) {\n          children = _this25.getChildren(row);\n          children.forEach(function (child) {\n            output.push(child);\n          });\n        }\n      }\n    });\n    return output;\n  };\n\n  DataTree.prototype.getChildren = function (row) {\n    var _this26 = this;\n\n    var config = row.modules.dataTree,\n        output = [];\n\n    if (config.children !== false && config.open) {\n      if (!Array.isArray(config.children)) {\n        config.children = this.generateChildren(row);\n      }\n\n      config.children.forEach(function (child) {\n        output.push(child);\n\n        var subChildren = _this26.getChildren(child);\n\n        subChildren.forEach(function (sub) {\n          output.push(sub);\n        });\n      });\n    }\n\n    return output;\n  };\n\n  DataTree.prototype.generateChildren = function (row) {\n    var _this27 = this;\n\n    var children = [];\n    row.getData()[this.field].forEach(function (childData) {\n      var childRow = new Row(childData || {}, _this27.table.rowManager);\n      childRow.modules.dataTree.index = row.modules.dataTree.index + 1;\n      childRow.modules.dataTree.parent = row;\n      childRow.modules.dataTree.open = _this27.startOpen(row, childRow.modules.dataTree.index);\n      children.push(childRow);\n    });\n    return children;\n  };\n\n  DataTree.prototype.expandRow = function (row, silent) {\n    var config = row.modules.dataTree;\n\n    if (config.children !== false) {\n      config.open = true;\n      row.reinitialize();\n      this.table.rowManager.refreshActiveData(\"tree\", false, true);\n      this.table.options.dataTreeRowExpanded(row.getComponent(), row.modules.dataTree.index);\n    }\n  };\n\n  DataTree.prototype.collapseRow = function (row) {\n    var config = row.modules.dataTree;\n\n    if (config.children !== false) {\n      config.open = false;\n      row.reinitialize();\n      this.table.rowManager.refreshActiveData(\"tree\", false, true);\n      this.table.options.dataTreeRowCollapsed(row.getComponent(), row.modules.dataTree.index);\n    }\n  };\n\n  DataTree.prototype.toggleRow = function (row) {\n    var config = row.modules.dataTree;\n\n    if (config.children !== false) {\n      if (config.open) {\n        this.collapseRow(row);\n      } else {\n        this.expandRow(row);\n      }\n    }\n  };\n\n  DataTree.prototype.getTreeParent = function (row) {\n    return row.modules.dataTree.parent ? row.modules.dataTree.parent.getComponent() : false;\n  };\n\n  DataTree.prototype.getTreeChildren = function (row) {\n    var config = row.modules.dataTree,\n        output = [];\n\n    if (config.children) {\n      if (!Array.isArray(config.children)) {\n        config.children = this.generateChildren(row);\n      }\n\n      config.children.forEach(function (childRow) {\n        if (childRow instanceof Row) {\n          output.push(childRow.getComponent());\n        }\n      });\n    }\n\n    return output;\n  };\n\n  DataTree.prototype.checkForRestyle = function (cell) {\n    if (!cell.row.cells.indexOf(cell)) {\n      if (cell.row.modules.dataTree.children !== false) {\n        cell.row.reinitialize();\n      }\n    }\n  };\n\n  Tabulator.prototype.registerModule(\"dataTree\", DataTree);\n\n  var Download = function Download(table) {\n    this.table = table; //hold Tabulator object\n\n    this.fields = {}; //hold filed multi dimension arrays\n\n    this.columnsByIndex = []; //hold columns in their order in the table\n\n    this.columnsByField = {}; //hold columns with lookup by field name\n\n    this.config = {};\n  }; //trigger file download\n\n\n  Download.prototype.download = function (type, filename, options, interceptCallback) {\n    var self = this,\n        downloadFunc = false;\n    this.processConfig();\n\n    function buildLink(data, mime) {\n      if (interceptCallback) {\n        interceptCallback(data);\n      } else {\n        self.triggerDownload(data, mime, type, filename);\n      }\n    }\n\n    if (typeof type == \"function\") {\n      downloadFunc = type;\n    } else {\n      if (self.downloaders[type]) {\n        downloadFunc = self.downloaders[type];\n      } else {\n        console.warn(\"Download Error - No such download type found: \", type);\n      }\n    }\n\n    this.processColumns();\n\n    if (downloadFunc) {\n      downloadFunc.call(this, self.processDefinitions(), self.processData(), options || {}, buildLink, this.config);\n    }\n  };\n\n  Download.prototype.processConfig = function () {\n    var config = {\n      //download config\n      columnGroups: true,\n      rowGroups: true\n    };\n\n    if (this.table.options.downloadConfig) {\n      for (var key in this.table.options.downloadConfig) {\n        config[key] = this.table.options.downloadConfig[key];\n      }\n    }\n\n    if (config.rowGroups && this.table.options.groupBy && this.table.modExists(\"groupRows\")) {\n      this.config.rowGroups = true;\n    }\n\n    if (config.columnGroups && this.table.columnManager.columns.length != this.table.columnManager.columnsByIndex.length) {\n      this.config.columnGroups = true;\n    }\n  };\n\n  Download.prototype.processColumns = function () {\n    var self = this;\n    self.columnsByIndex = [];\n    self.columnsByField = {};\n    self.table.columnManager.columnsByIndex.forEach(function (column) {\n      if (column.field && column.visible && column.definition.download !== false) {\n        self.columnsByIndex.push(column);\n        self.columnsByField[column.field] = column;\n      }\n    });\n  };\n\n  Download.prototype.processDefinitions = function () {\n    var self = this,\n        processedDefinitions = [];\n\n    if (this.config.columnGroups) {\n      self.table.columnManager.columns.forEach(function (column) {\n        var colData = self.processColumnGroup(column);\n\n        if (colData) {\n          processedDefinitions.push(colData);\n        }\n      });\n    } else {\n      self.columnsByIndex.forEach(function (column) {\n        if (column.download !== false) {\n          //isolate definiton from defintion object\n          processedDefinitions.push(self.processDefinition(column));\n        }\n      });\n    }\n\n    return processedDefinitions;\n  };\n\n  Download.prototype.processColumnGroup = function (column) {\n    var _this28 = this;\n\n    var subGroups = column.columns;\n    var groupData = {\n      type: \"group\",\n      title: column.definition.title\n    };\n\n    if (subGroups.length) {\n      groupData.subGroups = [];\n      groupData.width = 0;\n      subGroups.forEach(function (subGroup) {\n        var subGroupData = _this28.processColumnGroup(subGroup);\n\n        if (subGroupData) {\n          groupData.width += subGroupData.width;\n          groupData.subGroups.push(subGroupData);\n        }\n      });\n\n      if (!groupData.width) {\n        return false;\n      }\n    } else {\n      if (column.field && column.visible && column.definition.download !== false) {\n        groupData.width = 1;\n        groupData.definition = this.processDefinition(column);\n      } else {\n        return false;\n      }\n    }\n\n    return groupData;\n  };\n\n  Download.prototype.processDefinition = function (column) {\n    var def = {};\n\n    for (var key in column.definition) {\n      def[key] = column.definition[key];\n    }\n\n    if (typeof column.definition.downloadTitle != \"undefined\") {\n      def.title = column.definition.downloadTitle;\n    }\n\n    return def;\n  };\n\n  Download.prototype.processData = function () {\n    var _this29 = this;\n\n    var self = this,\n        data = [],\n        groups = [];\n\n    if (this.config.rowGroups) {\n      groups = this.table.modules.groupRows.getGroups();\n      groups.forEach(function (group) {\n        data.push(_this29.processGroupData(group));\n      });\n    } else {\n      data = self.table.rowManager.getData(true, \"download\");\n    } //bulk data processing\n\n\n    if (typeof self.table.options.downloadDataFormatter == \"function\") {\n      data = self.table.options.downloadDataFormatter(data);\n    }\n\n    return data;\n  };\n\n  Download.prototype.processGroupData = function (group) {\n    var _this30 = this;\n\n    var subGroups = group.getSubGroups();\n    var groupData = {\n      type: \"group\",\n      key: group.key\n    };\n\n    if (subGroups.length) {\n      groupData.subGroups = [];\n      subGroups.forEach(function (subGroup) {\n        groupData.subGroups.push(_this30.processGroupData(subGroup));\n      });\n    } else {\n      groupData.rows = group.getData(true, \"download\");\n    }\n\n    return groupData;\n  };\n\n  Download.prototype.triggerDownload = function (data, mime, type, filename) {\n    var element = document.createElement('a'),\n        blob = new Blob([data], {\n      type: mime\n    }),\n        filename = filename || \"Tabulator.\" + (typeof type === \"function\" ? \"txt\" : type);\n    blob = this.table.options.downloadReady.call(this.table, data, blob);\n\n    if (blob) {\n      if (navigator.msSaveOrOpenBlob) {\n        navigator.msSaveOrOpenBlob(blob, filename);\n      } else {\n        element.setAttribute('href', window.URL.createObjectURL(blob)); //set file title\n\n        element.setAttribute('download', filename); //trigger download\n\n        element.style.display = 'none';\n        document.body.appendChild(element);\n        element.click(); //remove temporary link element\n\n        document.body.removeChild(element);\n      }\n\n      if (this.table.options.downloadComplete) {\n        this.table.options.downloadComplete();\n      }\n    }\n  }; //nested field lookup\n\n\n  Download.prototype.getFieldValue = function (field, data) {\n    var column = this.columnsByField[field];\n\n    if (column) {\n      return column.getFieldValue(data);\n    }\n\n    return false;\n  };\n\n  Download.prototype.commsReceived = function (table, action, data) {\n    switch (action) {\n      case \"intercept\":\n        this.download(data.type, \"\", data.options, data.intercept);\n        break;\n    }\n  }; //downloaders\n\n\n  Download.prototype.downloaders = {\n    csv: function csv(columns, data, options, setFileContents, config) {\n      var self = this,\n          titles = [],\n          fields = [],\n          delimiter = options && options.delimiter ? options.delimiter : \",\",\n          fileContents; //build column headers\n\n      function parseSimpleTitles() {\n        columns.forEach(function (column) {\n          titles.push('\"' + String(column.title).split('\"').join('\"\"') + '\"');\n          fields.push(column.field);\n        });\n      }\n\n      function parseColumnGroup(column, level) {\n        if (column.subGroups) {\n          column.subGroups.forEach(function (subGroup) {\n            parseColumnGroup(subGroup, level + 1);\n          });\n        } else {\n          titles.push('\"' + String(column.title).split('\"').join('\"\"') + '\"');\n          fields.push(column.definition.field);\n        }\n      }\n\n      if (config.columnGroups) {\n        console.warn(\"Download Warning - CSV downloader cannot process column groups\");\n        columns.forEach(function (column) {\n          parseColumnGroup(column, 0);\n        });\n      } else {\n        parseSimpleTitles();\n      } //generate header row\n\n\n      fileContents = [titles.join(delimiter)];\n\n      function parseRows(data) {\n        //generate each row of the table\n        data.forEach(function (row) {\n          var rowData = [];\n          fields.forEach(function (field) {\n            var value = self.getFieldValue(field, row);\n\n            switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n              case \"object\":\n                value = JSON.stringify(value);\n                break;\n\n              case \"undefined\":\n              case \"null\":\n                value = \"\";\n                break;\n\n              default:\n                value = value;\n            } //escape quotation marks\n\n\n            rowData.push('\"' + String(value).split('\"').join('\"\"') + '\"');\n          });\n          fileContents.push(rowData.join(delimiter));\n        });\n      }\n\n      function parseGroup(group) {\n        if (group.subGroups) {\n          group.subGroups.forEach(function (subGroup) {\n            parseGroup(subGroup);\n          });\n        } else {\n          parseRows(group.rows);\n        }\n      }\n\n      if (config.rowGroups) {\n        console.warn(\"Download Warning - CSV downloader cannot process row groups\");\n        data.forEach(function (group) {\n          parseGroup(group);\n        });\n      } else {\n        parseRows(data);\n      }\n\n      setFileContents(fileContents.join(\"\\n\"), \"text/csv\");\n    },\n    json: function json(columns, data, options, setFileContents, config) {\n      var fileContents = JSON.stringify(data, null, '\\t');\n      setFileContents(fileContents, \"application/json\");\n    },\n    pdf: function pdf(columns, data, options, setFileContents, config) {\n      var self = this,\n          fields = [],\n          header = [],\n          body = [],\n          table = \"\",\n          groupRowIndexs = [],\n          autoTableParams = {},\n          rowGroupStyles = {},\n          jsPDFParams = options.jsPDF || {},\n          title = options && options.title ? options.title : \"\";\n\n      if (!jsPDFParams.orientation) {\n        jsPDFParams.orientation = options.orientation || \"landscape\";\n      }\n\n      if (!jsPDFParams.unit) {\n        jsPDFParams.unit = \"pt\";\n      } //build column headers\n\n\n      function parseSimpleTitles() {\n        columns.forEach(function (column) {\n          if (column.field) {\n            header.push(column.title || \"\");\n            fields.push(column.field);\n          }\n        });\n      }\n\n      function parseColumnGroup(column, level) {\n        if (column.subGroups) {\n          column.subGroups.forEach(function (subGroup) {\n            parseColumnGroup(subGroup, level + 1);\n          });\n        } else {\n          header.push(column.title || \"\");\n          fields.push(column.definition.field);\n        }\n      }\n\n      if (config.columnGroups) {\n        console.warn(\"Download Warning - PDF downloader cannot process column groups\");\n        columns.forEach(function (column) {\n          parseColumnGroup(column, 0);\n        });\n      } else {\n        parseSimpleTitles();\n      }\n\n      function parseValue(value) {\n        switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n          case \"object\":\n            value = JSON.stringify(value);\n            break;\n\n          case \"undefined\":\n          case \"null\":\n            value = \"\";\n            break;\n\n          default:\n            value = value;\n        }\n\n        return value;\n      }\n\n      function parseRows(data) {\n        //build table rows\n        data.forEach(function (row) {\n          var rowData = [];\n          fields.forEach(function (field) {\n            var value = self.getFieldValue(field, row);\n            rowData.push(parseValue(value));\n          });\n          body.push(rowData);\n        });\n      }\n\n      function parseGroup(group) {\n        var groupData = [];\n        groupData.push(parseValue(group.key));\n        groupRowIndexs.push(body.length);\n        body.push(groupData);\n\n        if (group.subGroups) {\n          group.subGroups.forEach(function (subGroup) {\n            parseGroup(subGroup);\n          });\n        } else {\n          parseRows(group.rows);\n        }\n      }\n\n      if (config.rowGroups) {\n        data.forEach(function (group) {\n          parseGroup(group);\n        });\n      } else {\n        parseRows(data);\n      }\n\n      var doc = new jsPDF(jsPDFParams); //set document to landscape, better for most tables\n\n      if (options && options.autoTable) {\n        if (typeof options.autoTable === \"function\") {\n          autoTableParams = options.autoTable(doc) || {};\n        } else {\n          autoTableParams = options.autoTable;\n        }\n      }\n\n      if (config.rowGroups) {\n        var createdCell = function createdCell(cell, data) {\n          if (groupRowIndexs.indexOf(data.row.index) > -1) {\n            for (var key in rowGroupStyles) {\n              cell.styles[key] = rowGroupStyles[key];\n            }\n          }\n        };\n\n        rowGroupStyles = options.rowGroupStyles || {\n          fontStyle: \"bold\",\n          fontSize: 12,\n          cellPadding: 6,\n          fillColor: 220\n        };\n\n        if (!autoTableParams.createdCell) {\n          autoTableParams.createdCell = createdCell;\n        } else {\n          var createdCellHolder = autoTableParams.createdCell;\n\n          autoTableParams.createdCell = function (cell, data) {\n            createdCell(cell, data);\n            createdCellHolder(cell, data);\n          };\n        }\n      }\n\n      if (title) {\n        autoTableParams.addPageContent = function (data) {\n          doc.text(title, 40, 30);\n        };\n      }\n\n      doc.autoTable(header, body, autoTableParams);\n      setFileContents(doc.output(\"arraybuffer\"), \"application/pdf\");\n    },\n    xlsx: function xlsx(columns, data, options, setFileContents, config) {\n      var self = this,\n          sheetName = options.sheetName || \"Sheet1\",\n          workbook = {\n        SheetNames: [],\n        Sheets: {}\n      },\n          groupRowIndexs = [],\n          groupColumnIndexs = [],\n          output;\n\n      function generateSheet() {\n        var titles = [],\n            fields = [],\n            rows = [],\n            worksheet; //convert rows to worksheet\n\n        function rowsToSheet() {\n          var sheet = {};\n          var range = {\n            s: {\n              c: 0,\n              r: 0\n            },\n            e: {\n              c: fields.length,\n              r: rows.length\n            }\n          };\n          XLSX.utils.sheet_add_aoa(sheet, rows);\n          sheet['!ref'] = XLSX.utils.encode_range(range);\n          var merges = generateMerges();\n\n          if (merges.length) {\n            sheet[\"!merges\"] = merges;\n          }\n\n          return sheet;\n        }\n\n        function parseSimpleTitles() {\n          //get field lists\n          columns.forEach(function (column) {\n            titles.push(column.title);\n            fields.push(column.field);\n          });\n          rows.push(titles);\n        }\n\n        function parseColumnGroup(column, level) {\n          if (typeof titles[level] === \"undefined\") {\n            titles[level] = [];\n          }\n\n          if (typeof groupColumnIndexs[level] === \"undefined\") {\n            groupColumnIndexs[level] = [];\n          }\n\n          if (column.width > 1) {\n            groupColumnIndexs[level].push({\n              type: \"hoz\",\n              start: titles[level].length,\n              end: titles[level].length + column.width - 1\n            });\n          }\n\n          titles[level].push(column.title);\n\n          if (column.subGroups) {\n            column.subGroups.forEach(function (subGroup) {\n              parseColumnGroup(subGroup, level + 1);\n            });\n          } else {\n            fields.push(column.definition.field);\n            padColumnTitles(fields.length - 1, level);\n            groupColumnIndexs[level].push({\n              type: \"vert\",\n              start: fields.length - 1\n            });\n          }\n        }\n\n        function padColumnTitles() {\n          var max = 0;\n          titles.forEach(function (title) {\n            var len = title.length;\n\n            if (len > max) {\n              max = len;\n            }\n          });\n          titles.forEach(function (title) {\n            var len = title.length;\n\n            if (len < max) {\n              for (var i = len; i < max; i++) {\n                title.push(\"\");\n              }\n            }\n          });\n        }\n\n        if (config.columnGroups) {\n          columns.forEach(function (column) {\n            parseColumnGroup(column, 0);\n          });\n          titles.forEach(function (title) {\n            rows.push(title);\n          });\n        } else {\n          parseSimpleTitles();\n        }\n\n        function generateMerges() {\n          var output = [];\n          groupRowIndexs.forEach(function (index) {\n            output.push({\n              s: {\n                r: index,\n                c: 0\n              },\n              e: {\n                r: index,\n                c: fields.length - 1\n              }\n            });\n          });\n          groupColumnIndexs.forEach(function (merges, level) {\n            merges.forEach(function (merge) {\n              if (merge.type === \"hoz\") {\n                output.push({\n                  s: {\n                    r: level,\n                    c: merge.start\n                  },\n                  e: {\n                    r: level,\n                    c: merge.end\n                  }\n                });\n              } else {\n                if (level != titles.length - 1) {\n                  output.push({\n                    s: {\n                      r: level,\n                      c: merge.start\n                    },\n                    e: {\n                      r: titles.length - 1,\n                      c: merge.start\n                    }\n                  });\n                }\n              }\n            });\n          });\n          return output;\n        } //generate each row of the table\n\n\n        function parseRows(data) {\n          data.forEach(function (row) {\n            var rowData = [];\n            fields.forEach(function (field) {\n              var value = self.getFieldValue(field, row);\n              rowData.push((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === \"object\" ? JSON.stringify(value) : value);\n            });\n            rows.push(rowData);\n          });\n        }\n\n        function parseGroup(group) {\n          var groupData = [];\n          groupData.push(group.key);\n          groupRowIndexs.push(rows.length);\n          rows.push(groupData);\n\n          if (group.subGroups) {\n            group.subGroups.forEach(function (subGroup) {\n              parseGroup(subGroup);\n            });\n          } else {\n            parseRows(group.rows);\n          }\n        }\n\n        if (config.rowGroups) {\n          data.forEach(function (group) {\n            parseGroup(group);\n          });\n        } else {\n          parseRows(data);\n        }\n\n        worksheet = rowsToSheet();\n        return worksheet;\n      }\n\n      if (options.sheetOnly) {\n        setFileContents(generateSheet());\n        return;\n      }\n\n      if (options.sheets) {\n        for (var sheet in options.sheets) {\n          if (options.sheets[sheet] === true) {\n            workbook.SheetNames.push(sheet);\n            workbook.Sheets[sheet] = generateSheet();\n          } else {\n            workbook.SheetNames.push(sheet);\n            this.table.modules.comms.send(options.sheets[sheet], \"download\", \"intercept\", {\n              type: \"xlsx\",\n              options: {\n                sheetOnly: true\n              },\n              intercept: function intercept(data) {\n                workbook.Sheets[sheet] = data;\n              }\n            });\n          }\n        }\n      } else {\n        workbook.SheetNames.push(sheetName);\n        workbook.Sheets[sheetName] = generateSheet();\n      } //convert workbook to binary array\n\n\n      function s2ab(s) {\n        var buf = new ArrayBuffer(s.length);\n        var view = new Uint8Array(buf);\n\n        for (var i = 0; i != s.length; ++i) {\n          view[i] = s.charCodeAt(i) & 0xFF;\n        }\n\n        return buf;\n      }\n\n      output = XLSX.write(workbook, {\n        bookType: 'xlsx',\n        bookSST: true,\n        type: 'binary'\n      });\n      setFileContents(s2ab(output), \"application/octet-stream\");\n    }\n  };\n  Tabulator.prototype.registerModule(\"download\", Download);\n\n  var Edit = function Edit(table) {\n    this.table = table; //hold Tabulator object\n\n    this.currentCell = false; //hold currently editing cell\n\n    this.mouseClick = false; //hold mousedown state to prevent click binding being overriden by editor opening\n\n    this.recursionBlock = false; //prevent focus recursion\n\n    this.invalidEdit = false;\n  }; //initialize column editor\n\n\n  Edit.prototype.initializeColumn = function (column) {\n    var self = this,\n        config = {\n      editor: false,\n      blocked: false,\n      check: column.definition.editable,\n      params: column.definition.editorParams || {}\n    }; //set column editor\n\n    switch (_typeof(column.definition.editor)) {\n      case \"string\":\n        if (column.definition.editor === \"tick\") {\n          column.definition.editor = \"tickCross\";\n          console.warn(\"DEPRECATION WANRING - the tick editor has been depricated, please use the tickCross editor\");\n        }\n\n        if (self.editors[column.definition.editor]) {\n          config.editor = self.editors[column.definition.editor];\n        } else {\n          console.warn(\"Editor Error - No such editor found: \", column.definition.editor);\n        }\n\n        break;\n\n      case \"function\":\n        config.editor = column.definition.editor;\n        break;\n\n      case \"boolean\":\n        if (column.definition.editor === true) {\n          if (typeof column.definition.formatter !== \"function\") {\n            if (column.definition.formatter === \"tick\") {\n              column.definition.formatter = \"tickCross\";\n              console.warn(\"DEPRECATION WANRING - the tick editor has been depricated, please use the tickCross editor\");\n            }\n\n            if (self.editors[column.definition.formatter]) {\n              config.editor = self.editors[column.definition.formatter];\n            } else {\n              config.editor = self.editors[\"input\"];\n            }\n          } else {\n            console.warn(\"Editor Error - Cannot auto lookup editor for a custom formatter: \", column.definition.formatter);\n          }\n        }\n\n        break;\n    }\n\n    if (config.editor) {\n      column.modules.edit = config;\n    }\n  };\n\n  Edit.prototype.getCurrentCell = function () {\n    return this.currentCell ? this.currentCell.getComponent() : false;\n  };\n\n  Edit.prototype.clearEditor = function () {\n    var cell = this.currentCell,\n        cellEl;\n    this.invalidEdit = false;\n\n    if (cell) {\n      this.currentCell = false;\n      cellEl = cell.getElement();\n      cellEl.classList.remove(\"tabulator-validation-fail\");\n      cellEl.classList.remove(\"tabulator-editing\");\n\n      while (cellEl.firstChild) {\n        cellEl.removeChild(cellEl.firstChild);\n      }\n\n      cell.row.getElement().classList.remove(\"tabulator-row-editing\");\n    }\n  };\n\n  Edit.prototype.cancelEdit = function () {\n    if (this.currentCell) {\n      var cell = this.currentCell;\n      var component = this.currentCell.getComponent();\n      this.clearEditor();\n      cell.setValueActual(cell.getValue());\n\n      if (cell.column.cellEvents.cellEditCancelled) {\n        cell.column.cellEvents.cellEditCancelled.call(this.table, component);\n      }\n\n      this.table.options.cellEditCancelled.call(this.table, component);\n    }\n  }; //return a formatted value for a cell\n\n\n  Edit.prototype.bindEditor = function (cell) {\n    var self = this,\n        element = cell.getElement();\n    element.setAttribute(\"tabindex\", 0);\n    element.addEventListener(\"click\", function (e) {\n      if (!element.classList.contains(\"tabulator-editing\")) {\n        element.focus();\n      }\n    });\n    element.addEventListener(\"mousedown\", function (e) {\n      self.mouseClick = true;\n    });\n    element.addEventListener(\"focus\", function (e) {\n      if (!self.recursionBlock) {\n        self.edit(cell, e, false);\n      }\n    });\n  };\n\n  Edit.prototype.focusCellNoEvent = function (cell) {\n    this.recursionBlock = true;\n    cell.getElement().focus();\n    this.recursionBlock = false;\n  };\n\n  Edit.prototype.editCell = function (cell, forceEdit) {\n    this.focusCellNoEvent(cell);\n    this.edit(cell, false, forceEdit);\n  };\n\n  Edit.prototype.edit = function (cell, e, forceEdit) {\n    var self = this,\n        allowEdit = true,\n        rendered = function rendered() {},\n        element = cell.getElement(),\n        cellEditor,\n        component,\n        params; //prevent editing if another cell is refusing to leave focus (eg. validation fail)\n\n\n    if (this.currentCell) {\n      if (!this.invalidEdit) {\n        this.cancelEdit();\n      }\n\n      return;\n    } //handle successfull value change\n\n\n    function success(value) {\n      if (self.currentCell === cell) {\n        var valid = true;\n\n        if (cell.column.modules.validate && self.table.modExists(\"validate\")) {\n          valid = self.table.modules.validate.validate(cell.column.modules.validate, cell.getComponent(), value);\n        }\n\n        if (valid === true) {\n          self.clearEditor();\n          cell.setValue(value, true);\n\n          if (self.table.options.dataTree && self.table.modExists(\"dataTree\")) {\n            self.table.modules.dataTree.checkForRestyle(cell);\n          }\n        } else {\n          self.invalidEdit = true;\n          element.classList.add(\"tabulator-validation-fail\");\n          self.focusCellNoEvent(cell);\n          rendered();\n          self.table.options.validationFailed.call(self.table, cell.getComponent(), value, valid);\n        }\n      } else {// console.warn(\"Edit Success Error - cannot call success on a cell that is no longer being edited\");\n      }\n    } //handle aborted edit\n\n\n    function cancel() {\n      if (self.currentCell === cell) {\n        self.cancelEdit();\n\n        if (self.table.options.dataTree && self.table.modExists(\"dataTree\")) {\n          self.table.modules.dataTree.checkForRestyle(cell);\n        }\n      } else {// console.warn(\"Edit Success Error - cannot call cancel on a cell that is no longer being edited\");\n      }\n    }\n\n    function onRendered(callback) {\n      rendered = callback;\n    }\n\n    if (!cell.column.modules.edit.blocked) {\n      if (e) {\n        e.stopPropagation();\n      }\n\n      switch (_typeof(cell.column.modules.edit.check)) {\n        case \"function\":\n          allowEdit = cell.column.modules.edit.check(cell.getComponent());\n          break;\n\n        case \"boolean\":\n          allowEdit = cell.column.modules.edit.check;\n          break;\n      }\n\n      if (allowEdit || forceEdit) {\n        self.cancelEdit();\n        self.currentCell = cell;\n        component = cell.getComponent();\n\n        if (this.mouseClick) {\n          this.mouseClick = false;\n\n          if (cell.column.cellEvents.cellClick) {\n            cell.column.cellEvents.cellClick.call(this.table, e, component);\n          }\n        }\n\n        if (cell.column.cellEvents.cellEditing) {\n          cell.column.cellEvents.cellEditing.call(this.table, component);\n        }\n\n        self.table.options.cellEditing.call(this.table, component);\n        params = typeof cell.column.modules.edit.params === \"function\" ? cell.column.modules.edit.params(component) : cell.column.modules.edit.params;\n        cellEditor = cell.column.modules.edit.editor.call(self, component, onRendered, success, cancel, params); //if editor returned, add to DOM, if false, abort edit\n\n        if (cellEditor !== false) {\n          if (cellEditor instanceof Node) {\n            element.classList.add(\"tabulator-editing\");\n            cell.row.getElement().classList.add(\"tabulator-row-editing\");\n\n            while (element.firstChild) {\n              element.removeChild(element.firstChild);\n            }\n\n            element.appendChild(cellEditor); //trigger onRendered Callback\n\n            rendered(); //prevent editing from triggering rowClick event\n\n            var children = element.children;\n\n            for (var i = 0; i < children.length; i++) {\n              children[i].addEventListener(\"click\", function (e) {\n                e.stopPropagation();\n              });\n            }\n          } else {\n            console.warn(\"Edit Error - Editor should return an instance of Node, the editor returned:\", cellEditor);\n            element.blur();\n            return false;\n          }\n        } else {\n          element.blur();\n          return false;\n        }\n\n        return true;\n      } else {\n        this.mouseClick = false;\n        element.blur();\n        return false;\n      }\n    } else {\n      this.mouseClick = false;\n      element.blur();\n      return false;\n    }\n  }; //default data editors\n\n\n  Edit.prototype.editors = {\n    //input element\n    input: function input(cell, onRendered, success, cancel, editorParams) {\n      //create and style input\n      var cellValue = cell.getValue(),\n          input = document.createElement(\"input\");\n      input.setAttribute(\"type\", \"text\");\n      input.style.padding = \"4px\";\n      input.style.width = \"100%\";\n      input.style.boxSizing = \"border-box\";\n      input.value = typeof cellValue !== \"undefined\" ? cellValue : \"\";\n      onRendered(function () {\n        input.focus();\n        input.style.height = \"100%\";\n      });\n\n      function onChange(e) {\n        if ((cellValue === null || typeof cellValue === \"undefined\") && input.value !== \"\" || input.value != cellValue) {\n          success(input.value);\n        } else {\n          cancel();\n        }\n      } //submit new value on blur or change\n\n\n      input.addEventListener(\"change\", onChange);\n      input.addEventListener(\"blur\", onChange); //submit new value on enter\n\n      input.addEventListener(\"keydown\", function (e) {\n        switch (e.keyCode) {\n          case 13:\n            success(input.value);\n            break;\n\n          case 27:\n            cancel();\n            break;\n        }\n      });\n      return input;\n    },\n    //resizable text area element\n    textarea: function textarea(cell, onRendered, success, cancel, editorParams) {\n      var self = this,\n          cellValue = cell.getValue(),\n          value = String(typeof cellValue == \"null\" || typeof cellValue == \"undefined\" ? \"\" : cellValue),\n          count = (value.match(/(?:\\r\\n|\\r|\\n)/g) || []).length + 1,\n          input = document.createElement(\"textarea\"),\n          scrollHeight = 0; //create and style input\n\n      input.style.display = \"block\";\n      input.style.padding = \"2px\";\n      input.style.height = \"100%\";\n      input.style.width = \"100%\";\n      input.style.boxSizing = \"border-box\";\n      input.style.whiteSpace = \"pre-wrap\";\n      input.style.resize = \"none\";\n      input.value = value;\n      onRendered(function () {\n        input.focus();\n        input.style.height = \"100%\";\n      });\n\n      function onChange(e) {\n        if ((cellValue === null || typeof cellValue === \"undefined\") && input.value !== \"\" || input.value != cellValue) {\n          success(input.value);\n          setTimeout(function () {\n            cell.getRow().normalizeHeight();\n          }, 300);\n        } else {\n          cancel();\n        }\n      } //submit new value on blur or change\n\n\n      input.addEventListener(\"change\", onChange);\n      input.addEventListener(\"blur\", onChange);\n      input.addEventListener(\"keyup\", function () {\n        input.style.height = \"\";\n        var heightNow = input.scrollHeight;\n        input.style.height = heightNow + \"px\";\n\n        if (heightNow != scrollHeight) {\n          scrollHeight = heightNow;\n          cell.getRow().normalizeHeight();\n        }\n      });\n      input.addEventListener(\"keydown\", function (e) {\n        if (e.keyCode == 27) {\n          cancel();\n        }\n      });\n      return input;\n    },\n    //input element with type of number\n    number: function number(cell, onRendered, success, cancel, editorParams) {\n      var cellValue = cell.getValue(),\n          input = document.createElement(\"input\");\n      input.setAttribute(\"type\", \"number\");\n\n      if (typeof editorParams.max != \"undefined\") {\n        input.setAttribute(\"max\", editorParams.max);\n      }\n\n      if (typeof editorParams.min != \"undefined\") {\n        input.setAttribute(\"min\", editorParams.min);\n      }\n\n      if (typeof editorParams.step != \"undefined\") {\n        input.setAttribute(\"step\", editorParams.step);\n      } //create and style input\n\n\n      input.style.padding = \"4px\";\n      input.style.width = \"100%\";\n      input.style.boxSizing = \"border-box\";\n      input.value = cellValue;\n      onRendered(function () {\n        input.focus();\n        input.style.height = \"100%\"; //submit new value on blur\n\n        input.addEventListener(\"blur\", function (e) {\n          onChange();\n        });\n      });\n\n      function onChange() {\n        var value = input.value;\n\n        if (!isNaN(value) && value !== \"\") {\n          value = Number(value);\n        }\n\n        if (value != cellValue) {\n          success(value);\n        } else {\n          cancel();\n        }\n      } //submit new value on enter\n\n\n      input.addEventListener(\"keydown\", function (e) {\n        switch (e.keyCode) {\n          case 13:\n          case 9:\n            onChange();\n            break;\n\n          case 27:\n            cancel();\n            break;\n        }\n      });\n      return input;\n    },\n    //input element with type of number\n    range: function range(cell, onRendered, success, cancel, editorParams) {\n      var cellValue = cell.getValue(),\n          input = document.createElement(\"input\");\n      input.setAttribute(\"type\", \"range\");\n\n      if (typeof editorParams.max != \"undefined\") {\n        input.setAttribute(\"max\", editorParams.max);\n      }\n\n      if (typeof editorParams.min != \"undefined\") {\n        input.setAttribute(\"min\", editorParams.min);\n      }\n\n      if (typeof editorParams.step != \"undefined\") {\n        input.setAttribute(\"step\", editorParams.step);\n      } //create and style input\n\n\n      input.style.padding = \"4px\";\n      input.style.width = \"100%\";\n      input.style.boxSizing = \"border-box\";\n      input.value = cellValue;\n      onRendered(function () {\n        input.focus();\n        input.style.height = \"100%\";\n      });\n\n      function onChange() {\n        var value = input.value;\n\n        if (!isNaN(value) && value !== \"\") {\n          value = Number(value);\n        }\n\n        if (value != cellValue) {\n          success(value);\n        } else {\n          cancel();\n        }\n      } //submit new value on blur\n\n\n      input.addEventListener(\"blur\", function (e) {\n        onChange();\n      }); //submit new value on enter\n\n      input.addEventListener(\"keydown\", function (e) {\n        switch (e.keyCode) {\n          case 13:\n          case 9:\n            onChange();\n            break;\n\n          case 27:\n            cancel();\n            break;\n        }\n      });\n      return input;\n    },\n    //select\n    select: function select(cell, onRendered, success, cancel, editorParams) {\n      var self = this,\n          cellEl = cell.getElement(),\n          initialValue = cell.getValue(),\n          input = document.createElement(\"input\"),\n          listEl = document.createElement(\"div\"),\n          dataItems = [],\n          displayItems = [],\n          currentItem = {},\n          blurable = true;\n\n      if (Array.isArray(editorParams) || !Array.isArray(editorParams) && (typeof editorParams === 'undefined' ? 'undefined' : _typeof(editorParams)) === \"object\" && !editorParams.values) {\n        console.warn(\"DEPRECATION WANRING - values for the select editor must now be passed into the values property of the editorParams object, not as the editorParams object\");\n        editorParams = {\n          values: editorParams\n        };\n      }\n\n      function getUniqueColumnValues() {\n        var output = {},\n            column = cell.getColumn()._getSelf(),\n            data = self.table.getData();\n\n        data.forEach(function (row) {\n          var val = column.getFieldValue(row);\n\n          if (val !== null && typeof val !== \"undefined\" && val !== \"\") {\n            output[val] = true;\n          }\n        });\n        return Object.keys(output);\n      }\n\n      function parseItems(inputValues, curentValue) {\n        var dataList = [];\n        var displayList = [];\n\n        function processComplexListItem(item) {\n          var item = {\n            label: editorParams.listItemFormatter ? editorParams.listItemFormatter(item.value, item.label) : item.label,\n            value: item.value,\n            element: false\n          };\n\n          if (item.value === curentValue) {\n            setCurrentItem(item);\n          }\n\n          dataList.push(item);\n          displayList.push(item);\n          return item;\n        }\n\n        if (typeof inputValues == \"function\") {\n          inputValues = inputValues(cell);\n        }\n\n        if (Array.isArray(inputValues)) {\n          inputValues.forEach(function (value) {\n            var item;\n\n            if ((typeof value === 'undefined' ? 'undefined' : _typeof(value)) === \"object\") {\n              if (value.options) {\n                item = {\n                  label: value.label,\n                  group: true,\n                  element: false\n                };\n                displayList.push(item);\n                value.options.forEach(function (item) {\n                  processComplexListItem(item);\n                });\n              } else {\n                processComplexListItem(value);\n              }\n            } else {\n              item = {\n                label: editorParams.listItemFormatter ? editorParams.listItemFormatter(value, value) : value,\n                value: value,\n                element: false\n              };\n\n              if (item.value === curentValue) {\n                setCurrentItem(item);\n              }\n\n              dataList.push(item);\n              displayList.push(item);\n            }\n          });\n        } else {\n          for (var key in inputValues) {\n            var item = {\n              label: editorParams.listItemFormatter ? editorParams.listItemFormatter(key, inputValues[key]) : inputValues[key],\n              value: key,\n              element: false\n            };\n\n            if (item.value === curentValue) {\n              setCurrentItem(item);\n            }\n\n            dataList.push(item);\n            displayList.push(item);\n          }\n        }\n\n        dataItems = dataList;\n        displayItems = displayList;\n        fillList();\n      }\n\n      function fillList() {\n        while (listEl.firstChild) {\n          listEl.removeChild(listEl.firstChild);\n        }\n\n        displayItems.forEach(function (item) {\n          var el = item.element;\n\n          if (!el) {\n            if (item.group) {\n              el = document.createElement(\"div\");\n              el.classList.add(\"tabulator-edit-select-list-group\");\n              el.tabIndex = 0;\n              el.innerHTML = item.label === \"\" ? \"&nbsp;\" : item.label;\n            } else {\n              el = document.createElement(\"div\");\n              el.classList.add(\"tabulator-edit-select-list-item\");\n              el.tabIndex = 0;\n              el.innerHTML = item.label === \"\" ? \"&nbsp;\" : item.label;\n              el.addEventListener(\"click\", function () {\n                setCurrentItem(item);\n                chooseItem();\n              });\n\n              if (item === currentItem) {\n                el.classList.add(\"active\");\n              }\n            }\n\n            el.addEventListener(\"mousedown\", function () {\n              blurable = false;\n              setTimeout(function () {\n                blurable = true;\n              }, 10);\n            });\n            item.element = el;\n          }\n\n          listEl.appendChild(el);\n        });\n      }\n\n      function setCurrentItem(item) {\n        if (currentItem && currentItem.element) {\n          currentItem.element.classList.remove(\"active\");\n        }\n\n        currentItem = item;\n        input.value = item.label === \"&nbsp;\" ? \"\" : item.label;\n\n        if (item.element) {\n          item.element.classList.add(\"active\");\n        }\n      }\n\n      function chooseItem() {\n        hideList();\n\n        if (initialValue !== currentItem.value) {\n          initialValue = currentItem.value;\n          success(currentItem.value);\n        } else {\n          cancel();\n        }\n      }\n\n      function cancelItem() {\n        hideList();\n        cancel();\n      }\n\n      function showList() {\n        if (!listEl.parentNode) {\n          if (editorParams.values === true) {\n            parseItems(getUniqueColumnValues(), initialValue);\n          } else {\n            parseItems(editorParams.values || [], initialValue);\n          }\n\n          var offset = Tabulator.prototype.helpers.elOffset(cellEl);\n          listEl.style.minWidth = cellEl.offsetWidth + \"px\";\n          listEl.style.top = offset.top + cellEl.offsetHeight + \"px\";\n          listEl.style.left = offset.left + \"px\";\n          document.body.appendChild(listEl);\n        }\n      }\n\n      function hideList() {\n        if (listEl.parentNode) {\n          listEl.parentNode.removeChild(listEl);\n        }\n      } //style input\n\n\n      input.setAttribute(\"type\", \"text\");\n      input.style.padding = \"4px\";\n      input.style.width = \"100%\";\n      input.style.boxSizing = \"border-box\";\n      input.readonly = true; //allow key based navigation\n\n      input.addEventListener(\"keydown\", function (e) {\n        var index;\n\n        switch (e.keyCode) {\n          case 38:\n            //up arrow\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n            index = dataItems.indexOf(currentItem);\n\n            if (index > 0) {\n              setCurrentItem(dataItems[index - 1]);\n            }\n\n            break;\n\n          case 40:\n            //down arrow\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n            index = dataItems.indexOf(currentItem);\n\n            if (index < dataItems.length - 1) {\n              if (index == -1) {\n                setCurrentItem(dataItems[0]);\n              } else {\n                setCurrentItem(dataItems[index + 1]);\n              }\n            }\n\n            break;\n\n          case 13:\n            //enter\n            chooseItem();\n            break;\n\n          case 27:\n            //escape\n            cancelItem();\n            break;\n        }\n      });\n      input.addEventListener(\"blur\", function (e) {\n        if (blurable) {\n          cancelItem();\n        }\n      });\n      input.addEventListener(\"focus\", function (e) {\n        showList();\n      }); //style list element\n\n      listEl = document.createElement(\"div\");\n      listEl.classList.add(\"tabulator-edit-select-list\");\n      onRendered(function () {\n        input.style.height = \"100%\";\n        input.focus();\n      });\n      return input;\n    },\n    //autocomplete\n    autocomplete: function autocomplete(cell, onRendered, success, cancel, editorParams) {\n      var self = this,\n          cellEl = cell.getElement(),\n          initialValue = cell.getValue(),\n          input = document.createElement(\"input\"),\n          listEl = document.createElement(\"div\"),\n          allItems = [],\n          displayItems = [],\n          currentItem = {},\n          blurable = true;\n\n      function getUniqueColumnValues() {\n        var output = {},\n            column = cell.getColumn()._getSelf(),\n            data = self.table.getData();\n\n        data.forEach(function (row) {\n          var val = column.getFieldValue(row);\n\n          if (val !== null && typeof val !== \"undefined\" && val !== \"\") {\n            output[val] = true;\n          }\n        });\n        return Object.keys(output);\n      }\n\n      function parseItems(inputValues, curentValue) {\n        var itemList = [];\n\n        if (Array.isArray(inputValues)) {\n          inputValues.forEach(function (value) {\n            var item = {\n              title: editorParams.listItemFormatter ? editorParams.listItemFormatter(value, value) : value,\n              value: value,\n              element: false\n            };\n\n            if (item.value === curentValue) {\n              setCurrentItem(item);\n            }\n\n            itemList.push(item);\n          });\n        } else {\n          for (var key in inputValues) {\n            var item = {\n              title: editorParams.listItemFormatter ? editorParams.listItemFormatter(key, inputValues[key]) : inputValues[key],\n              value: key,\n              element: false\n            };\n\n            if (item.value === curentValue) {\n              setCurrentItem(item);\n            }\n\n            itemList.push(item);\n          }\n        }\n\n        allItems = itemList;\n      }\n\n      function filterList(term) {\n        var matches = [];\n\n        if (editorParams.searchFunc) {\n          matches = editorParams.searchFunc(term, values);\n        } else {\n          if (term === \"\") {\n            if (editorParams.showListOnEmpty) {\n              allItems.forEach(function (item) {\n                matches.push(item);\n              });\n            }\n          } else {\n            allItems.forEach(function (item) {\n              if (item.value !== null || typeof item.value !== \"undefined\") {\n                if (String(item.value).toLowerCase().indexOf(String(term).toLowerCase()) > -1) {\n                  matches.push(item);\n                }\n              }\n            });\n          }\n        }\n\n        displayItems = matches;\n        fillList();\n      }\n\n      function fillList() {\n        var current = false;\n\n        while (listEl.firstChild) {\n          listEl.removeChild(listEl.firstChild);\n        }\n\n        displayItems.forEach(function (item) {\n          var el = item.element;\n\n          if (!el) {\n            el = document.createElement(\"div\");\n            el.classList.add(\"tabulator-edit-select-list-item\");\n            el.tabIndex = 0;\n            el.innerHTML = item.title;\n            el.addEventListener(\"click\", function () {\n              setCurrentItem(item);\n              chooseItem();\n            });\n            el.addEventListener(\"mousedown\", function () {\n              blurable = false;\n              setTimeout(function () {\n                blurable = true;\n              }, 10);\n            });\n            item.element = el;\n\n            if (item === currentItem) {\n              item.element.classList.add(\"active\");\n              current = true;\n            }\n          }\n\n          listEl.appendChild(el);\n        });\n\n        if (!current) {\n          setCurrentItem(false);\n        }\n      }\n\n      function setCurrentItem(item, showInputValue) {\n        if (currentItem && currentItem.element) {\n          currentItem.element.classList.remove(\"active\");\n        }\n\n        currentItem = item;\n\n        if (item && item.element) {\n          item.element.classList.add(\"active\");\n        }\n      }\n\n      function chooseItem() {\n        hideList();\n\n        if (currentItem) {\n          if (initialValue !== currentItem.value) {\n            initialValue = currentItem.value;\n            input.value = currentItem.value;\n            success(input.value);\n          } else {\n            cancel();\n          }\n        } else {\n          if (editorParams.freetext) {\n            initialValue = input.value;\n            success(input.value);\n          } else {\n            if (editorParams.allowEmpty && input.value === \"\") {\n              initialValue = input.value;\n              success(input.value);\n            } else {\n              cancel();\n            }\n          }\n        }\n      }\n\n      function cancelItem() {\n        hideList();\n        cancel();\n      }\n\n      function showList() {\n        if (!listEl.parentNode) {\n          while (listEl.firstChild) {\n            listEl.removeChild(listEl.firstChild);\n          }\n\n          if (editorParams.values === true) {\n            parseItems(getUniqueColumnValues(), initialValue);\n          } else {\n            parseItems(editorParams.values || [], initialValue);\n          }\n\n          var offset = Tabulator.prototype.helpers.elOffset(cellEl);\n          listEl.style.minWidth = cellEl.offsetWidth + \"px\";\n          listEl.style.top = offset.top + cellEl.offsetHeight + \"px\";\n          listEl.style.left = offset.left + \"px\";\n          document.body.appendChild(listEl);\n        }\n      }\n\n      function hideList() {\n        if (listEl.parentNode) {\n          listEl.parentNode.removeChild(listEl);\n        }\n      } //style input\n\n\n      input.setAttribute(\"type\", \"text\");\n      input.style.padding = \"4px\";\n      input.style.width = \"100%\";\n      input.style.boxSizing = \"border-box\"; //allow key based navigation\n\n      input.addEventListener(\"keydown\", function (e) {\n        var index;\n\n        switch (e.keyCode) {\n          case 38:\n            //up arrow\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n            index = displayItems.indexOf(currentItem);\n\n            if (index > 0) {\n              setCurrentItem(displayItems[index - 1]);\n            } else {\n              setCurrentItem(false);\n            }\n\n            break;\n\n          case 40:\n            //down arrow\n            e.stopImmediatePropagation();\n            e.stopPropagation();\n            index = displayItems.indexOf(currentItem);\n\n            if (index < displayItems.length - 1) {\n              if (index == -1) {\n                setCurrentItem(displayItems[0]);\n              } else {\n                setCurrentItem(displayItems[index + 1]);\n              }\n            }\n\n            break;\n\n          case 13:\n            //enter\n            chooseItem();\n            break;\n\n          case 27:\n            //escape\n            cancelItem();\n            break;\n        }\n      });\n      input.addEventListener(\"keyup\", function (e) {\n        switch (e.keyCode) {\n          case 38: //up arrow\n\n          case 37: //left arrow\n\n          case 39: //up arrow\n\n          case 40: //right arrow\n\n          case 13: //enter\n\n          case 27:\n            //escape\n            break;\n\n          default:\n            filterList(input.value);\n        }\n      });\n      input.addEventListener(\"blur\", function (e) {\n        if (blurable) {\n          chooseItem();\n        }\n      });\n      input.addEventListener(\"focus\", function (e) {\n        showList();\n        input.value = initialValue;\n        filterList(initialValue);\n      }); //style list element\n\n      listEl = document.createElement(\"div\");\n      listEl.classList.add(\"tabulator-edit-select-list\");\n      onRendered(function () {\n        input.style.height = \"100%\";\n        input.focus();\n      });\n      return input;\n    },\n    //start rating\n    star: function star(cell, onRendered, success, cancel, editorParams) {\n      var self = this,\n          element = cell.getElement(),\n          value = cell.getValue(),\n          maxStars = element.getElementsByTagName(\"svg\").length || 5,\n          size = element.getElementsByTagName(\"svg\")[0] ? element.getElementsByTagName(\"svg\")[0].getAttribute(\"width\") : 14,\n          stars = [],\n          starsHolder = document.createElement(\"div\"),\n          star = document.createElementNS('http://www.w3.org/2000/svg', \"svg\"); //change star type\n\n      function starChange(val) {\n        stars.forEach(function (star, i) {\n          if (i < val) {\n            if (self.table.browser == \"ie\") {\n              star.setAttribute(\"class\", \"tabulator-star-active\");\n            } else {\n              star.classList.replace(\"tabulator-star-inactive\", \"tabulator-star-active\");\n            }\n\n            star.innerHTML = '<polygon fill=\"#488CE9\" stroke=\"#014AAE\" stroke-width=\"37.6152\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 \"/>';\n          } else {\n            if (self.table.browser == \"ie\") {\n              star.setAttribute(\"class\", \"tabulator-star-inactive\");\n            } else {\n              star.classList.replace(\"tabulator-star-active\", \"tabulator-star-inactive\");\n            }\n\n            star.innerHTML = '<polygon fill=\"#010155\" stroke=\"#686868\" stroke-width=\"37.6152\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 \"/>';\n          }\n        });\n      } //build stars\n\n\n      function buildStar(i) {\n        var nextStar = star.cloneNode(true);\n        stars.push(nextStar);\n        nextStar.addEventListener(\"mouseover\", function (e) {\n          e.stopPropagation();\n          starChange(i);\n        });\n        nextStar.addEventListener(\"click\", function (e) {\n          e.stopPropagation();\n          success(i);\n        });\n        starsHolder.appendChild(nextStar);\n      } //handle keyboard navigation value change\n\n\n      function changeValue(val) {\n        value = val;\n        starChange(val);\n      } //style cell\n\n\n      element.style.whiteSpace = \"nowrap\";\n      element.style.overflow = \"hidden\";\n      element.style.textOverflow = \"ellipsis\"; //style holding element\n\n      starsHolder.style.verticalAlign = \"middle\";\n      starsHolder.style.display = \"inline-block\";\n      starsHolder.style.padding = \"4px\"; //style star\n\n      star.setAttribute(\"width\", size);\n      star.setAttribute(\"height\", size);\n      star.setAttribute(\"viewBox\", \"0 0 512 512\");\n      star.setAttribute(\"xml:space\", \"preserve\");\n      star.style.padding = \"0 1px\"; //create correct number of stars\n\n      for (var i = 1; i <= maxStars; i++) {\n        buildStar(i);\n      } //ensure value does not exceed number of stars\n\n\n      value = Math.min(parseInt(value), maxStars); // set initial styling of stars\n\n      starChange(value);\n      starsHolder.addEventListener(\"mouseover\", function (e) {\n        starChange(0);\n      });\n      starsHolder.addEventListener(\"click\", function (e) {\n        success(0);\n      });\n      element.addEventListener(\"blur\", function (e) {\n        cancel();\n      }); //allow key based navigation\n\n      element.addEventListener(\"keydown\", function (e) {\n        switch (e.keyCode) {\n          case 39:\n            //right arrow\n            changeValue(value + 1);\n            break;\n\n          case 37:\n            //left arrow\n            changeValue(value - 1);\n            break;\n\n          case 13:\n            //enter\n            success(value);\n            break;\n\n          case 27:\n            //escape\n            cancel();\n            break;\n        }\n      });\n      return starsHolder;\n    },\n    //draggable progress bar\n    progress: function progress(cell, onRendered, success, cancel, editorParams) {\n      var element = cell.getElement(),\n          max = typeof editorParams.max === \"undefined\" ? element.getElementsByTagName(\"div\")[0].getAttribute(\"max\") || 100 : editorParams.max,\n          min = typeof editorParams.min === \"undefined\" ? element.getElementsByTagName(\"div\")[0].getAttribute(\"min\") || 0 : editorParams.min,\n          percent = (max - min) / 100,\n          value = cell.getValue() || 0,\n          handle = document.createElement(\"div\"),\n          bar = document.createElement(\"div\"),\n          mouseDrag,\n          mouseDragWidth; //set new value\n\n      function updateValue() {\n        var calcVal = percent * Math.round(bar.offsetWidth / (element.clientWidth / 100)) + min;\n        success(calcVal);\n        element.setAttribute(\"aria-valuenow\", calcVal);\n        element.setAttribute(\"aria-label\", value);\n      } //style handle\n\n\n      handle.style.position = \"absolute\";\n      handle.style.right = \"0\";\n      handle.style.top = \"0\";\n      handle.style.bottom = \"0\";\n      handle.style.width = \"5px\";\n      handle.classList.add(\"tabulator-progress-handle\"); //style bar\n\n      bar.style.display = \"inline-block\";\n      bar.style.position = \"absolute\";\n      bar.style.top = \"8px\";\n      bar.style.bottom = \"8px\";\n      bar.style.left = \"4px\";\n      bar.style.marginRight = \"4px\";\n      bar.style.backgroundColor = \"#488CE9\";\n      bar.style.maxWidth = \"100%\";\n      bar.style.minWidth = \"0%\"; //style cell\n\n      element.style.padding = \"0 4px\"; //make sure value is in range\n\n      value = Math.min(parseFloat(value), max);\n      value = Math.max(parseFloat(value), min); //workout percentage\n\n      value = 100 - Math.round((value - min) / percent);\n      bar.style.right = value + \"%\";\n      element.setAttribute(\"aria-valuemin\", min);\n      element.setAttribute(\"aria-valuemax\", max);\n      bar.appendChild(handle);\n      handle.addEventListener(\"mousedown\", function (e) {\n        mouseDrag = e.screenX;\n        mouseDragWidth = bar.offsetWidth;\n      });\n      handle.addEventListener(\"mouseover\", function () {\n        handle.style.cursor = \"ew-resize\";\n      });\n      element.addEventListener(\"mousemove\", function (e) {\n        if (mouseDrag) {\n          bar.style.width = mouseDragWidth + e.screenX - mouseDrag + \"px\";\n        }\n      });\n      element.addEventListener(\"mouseup\", function (e) {\n        if (mouseDrag) {\n          e.stopPropagation();\n          e.stopImmediatePropagation();\n          mouseDrag = false;\n          mouseDragWidth = false;\n          updateValue();\n        }\n      }); //allow key based navigation\n\n      element.addEventListener(\"keydown\", function (e) {\n        switch (e.keyCode) {\n          case 39:\n            //right arrow\n            bar.style.width = bar.clientWidth + element.clientWidth / 100 + \"px\";\n            break;\n\n          case 37:\n            //left arrow\n            bar.style.width = bar.clientWidth - element.clientWidth / 100 + \"px\";\n            break;\n\n          case 13:\n            //enter\n            updateValue();\n            break;\n\n          case 27:\n            //escape\n            cancel();\n            break;\n        }\n      });\n      element.addEventListener(\"blur\", function () {\n        cancel();\n      });\n      return bar;\n    },\n    //checkbox\n    tickCross: function tickCross(cell, onRendered, success, cancel, editorParams) {\n      var value = cell.getValue(),\n          input = document.createElement(\"input\"),\n          tristate = editorParams.tristate,\n          indetermValue = typeof editorParams.indeterminateValue === \"undefined\" ? null : editorParams.indeterminateValue,\n          indetermState = false;\n      input.setAttribute(\"type\", \"checkbox\");\n      input.style.marginTop = \"5px\";\n      input.style.boxSizing = \"border-box\";\n      input.value = value;\n\n      if (tristate && (typeof value === \"undefined\" || value === indetermValue || value === \"\")) {\n        indetermState = true;\n        input.indeterminate = true;\n      }\n\n      if (this.table.browser != \"firefox\") {\n        //prevent blur issue on mac firefox\n        onRendered(function () {\n          input.focus();\n        });\n      }\n\n      input.checked = value === true || value === \"true\" || value === \"True\" || value === 1;\n\n      function setValue(blur) {\n        if (tristate) {\n          if (!blur) {\n            if (input.checked && !indetermState) {\n              input.checked = false;\n              input.indeterminate = true;\n              indetermState = true;\n              return indetermValue;\n            } else {\n              indetermState = false;\n              return input.checked;\n            }\n          } else {\n            if (indetermState) {\n              return indetermValue;\n            } else {\n              return input.checked;\n            }\n          }\n        } else {\n          return input.checked;\n        }\n      } //submit new value on blur\n\n\n      input.addEventListener(\"change\", function (e) {\n        success(setValue());\n      });\n      input.addEventListener(\"blur\", function (e) {\n        success(setValue(true));\n      }); //submit new value on enter\n\n      input.addEventListener(\"keydown\", function (e) {\n        if (e.keyCode == 13) {\n          success(setValue());\n        }\n\n        if (e.keyCode == 27) {\n          cancel();\n        }\n      });\n      return input;\n    }\n  };\n  Tabulator.prototype.registerModule(\"edit\", Edit);\n\n  var Filter = function Filter(table) {\n    this.table = table; //hold Tabulator object\n\n    this.filterList = []; //hold filter list\n\n    this.headerFilters = {}; //hold column filters\n\n    this.headerFilterElements = []; //hold header filter elements for manipulation\n\n    this.headerFilterColumns = []; //hold columns that use header filters\n\n    this.changed = false; //has filtering changed since last render\n  }; //initialize column header filter\n\n\n  Filter.prototype.initializeColumn = function (column, value) {\n    var self = this,\n        field = column.getField(),\n        prevSuccess,\n        params; //handle successfull value change\n\n    function success(value) {\n      var filterType = column.modules.filter.tagType == \"input\" && column.modules.filter.attrType == \"text\" || column.modules.filter.tagType == \"textarea\" ? \"partial\" : \"match\",\n          type = \"\",\n          filterFunc;\n\n      if (typeof prevSuccess === \"undefined\" || prevSuccess !== value) {\n        prevSuccess = value;\n\n        if (!column.modules.filter.emptyFunc(value)) {\n          column.modules.filter.value = value;\n\n          switch (_typeof(column.definition.headerFilterFunc)) {\n            case \"string\":\n              if (self.filters[column.definition.headerFilterFunc]) {\n                type = column.definition.headerFilterFunc;\n\n                filterFunc = function filterFunc(data) {\n                  return self.filters[column.definition.headerFilterFunc](value, column.getFieldValue(data));\n                };\n              } else {\n                console.warn(\"Header Filter Error - Matching filter function not found: \", column.definition.headerFilterFunc);\n              }\n\n              break;\n\n            case \"function\":\n              filterFunc = function filterFunc(data) {\n                var params = column.definition.headerFilterFuncParams || {};\n                var fieldVal = column.getFieldValue(data);\n                params = typeof params === \"function\" ? params(value, fieldVal, data) : params;\n                return column.definition.headerFilterFunc(value, fieldVal, data, params);\n              };\n\n              type = filterFunc;\n              break;\n          }\n\n          if (!filterFunc) {\n            switch (filterType) {\n              case \"partial\":\n                filterFunc = function filterFunc(data) {\n                  return String(column.getFieldValue(data)).toLowerCase().indexOf(String(value).toLowerCase()) > -1;\n                };\n\n                type = \"like\";\n                break;\n\n              default:\n                filterFunc = function filterFunc(data) {\n                  return column.getFieldValue(data) == value;\n                };\n\n                type = \"=\";\n            }\n          }\n\n          self.headerFilters[field] = {\n            value: value,\n            func: filterFunc,\n            type: type\n          };\n        } else {\n          delete self.headerFilters[field];\n        }\n\n        self.changed = true;\n        self.table.rowManager.filterRefresh();\n      }\n    }\n\n    column.modules.filter = {\n      success: success,\n      attrType: false,\n      tagType: false,\n      emptyFunc: false\n    };\n    this.generateHeaderFilterElement(column);\n  };\n\n  Filter.prototype.generateHeaderFilterElement = function (column, initialValue) {\n    var self = this,\n        success = column.modules.filter.success,\n        field = column.getField(),\n        filterElement,\n        editor,\n        editorElement,\n        cellWrapper,\n        typingTimer,\n        searchTrigger,\n        params; //handle aborted edit\n\n    function cancel() {}\n\n    if (column.modules.filter.headerElement && column.modules.filter.headerElement.parentNode) {\n      column.modules.filter.headerElement.parentNode.removeChild(column.modules.filter.headerElement);\n    }\n\n    if (field) {\n      //set empty value function\n      column.modules.filter.emptyFunc = column.definition.headerFilterEmptyCheck || function (value) {\n        return !value && value !== \"0\";\n      };\n\n      filterElement = document.createElement(\"div\");\n      filterElement.classList.add(\"tabulator-header-filter\"); //set column editor\n\n      switch (_typeof(column.definition.headerFilter)) {\n        case \"string\":\n          if (self.table.modules.edit.editors[column.definition.headerFilter]) {\n            editor = self.table.modules.edit.editors[column.definition.headerFilter];\n\n            if ((column.definition.headerFilter === \"tick\" || column.definition.headerFilter === \"tickCross\") && !column.definition.headerFilterEmptyCheck) {\n              column.modules.filter.emptyFunc = function (value) {\n                return value !== true && value !== false;\n              };\n            }\n          } else {\n            console.warn(\"Filter Error - Cannot build header filter, No such editor found: \", column.definition.editor);\n          }\n\n          break;\n\n        case \"function\":\n          editor = column.definition.headerFilter;\n          break;\n\n        case \"boolean\":\n          if (column.modules.edit && column.modules.edit.editor) {\n            editor = column.modules.edit.editor;\n          } else {\n            if (column.definition.formatter && self.table.modules.edit.editors[column.definition.formatter]) {\n              editor = self.table.modules.edit.editors[column.definition.formatter];\n\n              if ((column.definition.formatter === \"tick\" || column.definition.formatter === \"tickCross\") && !column.definition.headerFilterEmptyCheck) {\n                column.modules.filter.emptyFunc = function (value) {\n                  return value !== true && value !== false;\n                };\n              }\n            } else {\n              editor = self.table.modules.edit.editors[\"input\"];\n            }\n          }\n\n          break;\n      }\n\n      if (editor) {\n        cellWrapper = {\n          getValue: function getValue() {\n            return typeof initialValue !== \"undefined\" ? initialValue : \"\";\n          },\n          getField: function getField() {\n            return column.definition.field;\n          },\n          getElement: function getElement() {\n            return filterElement;\n          },\n          getColumn: function getColumn() {\n            return column.getComponent();\n          },\n          getRow: function getRow() {\n            return {\n              normalizeHeight: function normalizeHeight() {}\n            };\n          }\n        };\n        params = column.definition.headerFilterParams || {};\n        params = typeof params === \"function\" ? params.call(self.table) : params;\n        editorElement = editor.call(this.table.modules.edit, cellWrapper, function () {}, success, cancel, params);\n\n        if (!editorElement) {\n          console.warn(\"Filter Error - Cannot add filter to \" + field + \" column, editor returned a value of false\");\n          return;\n        }\n\n        if (!(editorElement instanceof Node)) {\n          console.warn(\"Filter Error - Cannot add filter to \" + field + \" column, editor should return an instance of Node, the editor returned:\", editorElement);\n          return;\n        } //set Placeholder Text\n\n\n        if (field) {\n          self.table.modules.localize.bind(\"headerFilters|columns|\" + column.definition.field, function (value) {\n            editorElement.setAttribute(\"placeholder\", typeof value !== \"undefined\" && value ? value : self.table.modules.localize.getText(\"headerFilters|default\"));\n          });\n        } else {\n          self.table.modules.localize.bind(\"headerFilters|default\", function (value) {\n            editorElement.setAttribute(\"placeholder\", typeof self.column.definition.headerFilterPlaceholder !== \"undefined\" && self.column.definition.headerFilterPlaceholder ? self.column.definition.headerFilterPlaceholder : value);\n          });\n        } //focus on element on click\n\n\n        editorElement.addEventListener(\"click\", function (e) {\n          e.stopPropagation();\n          editorElement.focus();\n        }); //live update filters as user types\n\n        typingTimer = false;\n\n        searchTrigger = function searchTrigger(e) {\n          if (typingTimer) {\n            clearTimeout(typingTimer);\n          }\n\n          typingTimer = setTimeout(function () {\n            success(editorElement.value);\n          }, 300);\n        };\n\n        column.modules.filter.headerElement = editorElement;\n        column.modules.filter.attrType = editorElement.hasAttribute(\"type\") ? editorElement.getAttribute(\"type\").toLowerCase() : \"\";\n        column.modules.filter.tagType = editorElement.tagName.toLowerCase();\n\n        if (column.definition.headerFilterLiveFilter !== false) {\n          if (!(column.definition.headerFilter === \"autocomplete\" || column.definition.editor === \"autocomplete\" && column.definition.headerFilter === true)) {\n            editorElement.addEventListener(\"keyup\", searchTrigger);\n            editorElement.addEventListener(\"search\", searchTrigger); //update number filtered columns on change\n\n            if (column.modules.filter.attrType == \"number\") {\n              editorElement.addEventListener(\"change\", function (e) {\n                success(editorElement.value);\n              });\n            } //change text inputs to search inputs to allow for clearing of field\n\n\n            if (column.modules.filter.attrType == \"text\" && this.table.browser !== \"ie\") {\n              editorElement.setAttribute(\"type\", \"search\"); // editorElement.off(\"change blur\"); //prevent blur from triggering filter and preventing selection click\n            }\n          } //prevent input and select elements from propegating click to column sorters etc\n\n\n          if (column.modules.filter.tagType == \"input\" || column.modules.filter.tagType == \"select\" || column.modules.filter.tagType == \"textarea\") {\n            editorElement.addEventListener(\"mousedown\", function (e) {\n              e.stopPropagation();\n            });\n          }\n        }\n\n        filterElement.appendChild(editorElement);\n        column.contentElement.appendChild(filterElement);\n        self.headerFilterElements.push(editorElement);\n        self.headerFilterColumns.push(column);\n      }\n    } else {\n      console.warn(\"Filter Error - Cannot add header filter, column has no field set:\", column.definition.title);\n    }\n  }; //hide all header filter elements (used to ensure correct column widths in \"fitData\" layout mode)\n\n\n  Filter.prototype.hideHeaderFilterElements = function () {\n    this.headerFilterElements.forEach(function (element) {\n      element.style.display = 'none';\n    });\n  }; //show all header filter elements (used to ensure correct column widths in \"fitData\" layout mode)\n\n\n  Filter.prototype.showHeaderFilterElements = function () {\n    this.headerFilterElements.forEach(function (element) {\n      element.style.display = '';\n    });\n  }; //programatically set value of header filter\n\n\n  Filter.prototype.setHeaderFilterFocus = function (column) {\n    if (column.modules.filter && column.modules.filter.headerElement) {\n      column.modules.filter.headerElement.focus();\n    } else {\n      console.warn(\"Column Filter Focus Error - No header filter set on column:\", column.getField());\n    }\n  }; //programatically set value of header filter\n\n\n  Filter.prototype.setHeaderFilterValue = function (column, value) {\n    if (column) {\n      if (column.modules.filter && column.modules.filter.headerElement) {\n        this.generateHeaderFilterElement(column, value);\n        column.modules.filter.success(value);\n      } else {\n        console.warn(\"Column Filter Error - No header filter set on column:\", column.getField());\n      }\n    }\n  };\n\n  Filter.prototype.reloadHeaderFilter = function (column) {\n    if (column) {\n      if (column.modules.filter && column.modules.filter.headerElement) {\n        this.generateHeaderFilterElement(column, column.modules.filter.value);\n      } else {\n        console.warn(\"Column Filter Error - No header filter set on column:\", column.getField());\n      }\n    }\n  }; //check if the filters has changed since last use\n\n\n  Filter.prototype.hasChanged = function () {\n    var changed = this.changed;\n    this.changed = false;\n    return changed;\n  }; //set standard filters\n\n\n  Filter.prototype.setFilter = function (field, type, value) {\n    var self = this;\n    self.filterList = [];\n\n    if (!Array.isArray(field)) {\n      field = [{\n        field: field,\n        type: type,\n        value: value\n      }];\n    }\n\n    self.addFilter(field);\n  }; //add filter to array\n\n\n  Filter.prototype.addFilter = function (field, type, value) {\n    var self = this;\n\n    if (!Array.isArray(field)) {\n      field = [{\n        field: field,\n        type: type,\n        value: value\n      }];\n    }\n\n    field.forEach(function (filter) {\n      filter = self.findFilter(filter);\n\n      if (filter) {\n        self.filterList.push(filter);\n        self.changed = true;\n      }\n    });\n\n    if (this.table.options.persistentFilter && this.table.modExists(\"persistence\", true)) {\n      this.table.modules.persistence.save(\"filter\");\n    }\n  };\n\n  Filter.prototype.findFilter = function (filter) {\n    var self = this,\n        column;\n\n    if (Array.isArray(filter)) {\n      return this.findSubFilters(filter);\n    }\n\n    var filterFunc = false;\n\n    if (typeof filter.field == \"function\") {\n      filterFunc = function filterFunc(data) {\n        return filter.field(data, filter.type || {}); // pass params to custom filter function\n      };\n    } else {\n      if (self.filters[filter.type]) {\n        column = self.table.columnManager.getColumnByField(filter.field);\n\n        if (column) {\n          filterFunc = function filterFunc(data) {\n            return self.filters[filter.type](filter.value, column.getFieldValue(data));\n          };\n        } else {\n          filterFunc = function filterFunc(data) {\n            return self.filters[filter.type](filter.value, data[filter.field]);\n          };\n        }\n      } else {\n        console.warn(\"Filter Error - No such filter type found, ignoring: \", filter.type);\n      }\n    }\n\n    filter.func = filterFunc;\n    return filter.func ? filter : false;\n  };\n\n  Filter.prototype.findSubFilters = function (filters) {\n    var self = this,\n        output = [];\n    filters.forEach(function (filter) {\n      filter = self.findFilter(filter);\n\n      if (filter) {\n        output.push(filter);\n      }\n    });\n    return output.length ? output : false;\n  }; //get all filters\n\n\n  Filter.prototype.getFilters = function (all, ajax) {\n    var self = this,\n        output = [];\n\n    if (all) {\n      output = self.getHeaderFilters();\n    }\n\n    self.filterList.forEach(function (filter) {\n      output.push({\n        field: filter.field,\n        type: filter.type,\n        value: filter.value\n      });\n    });\n\n    if (ajax) {\n      output.forEach(function (item) {\n        if (typeof item.type == \"function\") {\n          item.type = \"function\";\n        }\n      });\n    }\n\n    return output;\n  }; //get all filters\n\n\n  Filter.prototype.getHeaderFilters = function () {\n    var self = this,\n        output = [];\n\n    for (var key in this.headerFilters) {\n      output.push({\n        field: key,\n        type: this.headerFilters[key].type,\n        value: this.headerFilters[key].value\n      });\n    }\n\n    return output;\n  }; //remove filter from array\n\n\n  Filter.prototype.removeFilter = function (field, type, value) {\n    var self = this;\n\n    if (!Array.isArray(field)) {\n      field = [{\n        field: field,\n        type: type,\n        value: value\n      }];\n    }\n\n    field.forEach(function (filter) {\n      var index = -1;\n\n      if (_typeof(filter.field) == \"object\") {\n        index = self.filterList.findIndex(function (element) {\n          return filter === element;\n        });\n      } else {\n        index = self.filterList.findIndex(function (element) {\n          return filter.field === element.field && filter.type === element.type && filter.value === element.value;\n        });\n      }\n\n      if (index > -1) {\n        self.filterList.splice(index, 1);\n        self.changed = true;\n      } else {\n        console.warn(\"Filter Error - No matching filter type found, ignoring: \", filter.type);\n      }\n    });\n\n    if (this.table.options.persistentFilter && this.table.modExists(\"persistence\", true)) {\n      this.table.modules.persistence.save(\"filter\");\n    }\n  }; //clear filters\n\n\n  Filter.prototype.clearFilter = function (all) {\n    this.filterList = [];\n\n    if (all) {\n      this.clearHeaderFilter();\n    }\n\n    this.changed = true;\n\n    if (this.table.options.persistentFilter && this.table.modExists(\"persistence\", true)) {\n      this.table.modules.persistence.save(\"filter\");\n    }\n  }; //clear header filters\n\n\n  Filter.prototype.clearHeaderFilter = function () {\n    var self = this;\n    this.headerFilters = {};\n    this.headerFilterColumns.forEach(function (column) {\n      column.modules.filter.value = null;\n      self.reloadHeaderFilter(column);\n    });\n    this.changed = true;\n  }; //search data and return matching rows\n\n\n  Filter.prototype.search = function (searchType, field, type, value) {\n    var self = this,\n        activeRows = [],\n        filterList = [];\n\n    if (!Array.isArray(field)) {\n      field = [{\n        field: field,\n        type: type,\n        value: value\n      }];\n    }\n\n    field.forEach(function (filter) {\n      filter = self.findFilter(filter);\n\n      if (filter) {\n        filterList.push(filter);\n      }\n    });\n    this.table.rowManager.rows.forEach(function (row) {\n      var match = true;\n      filterList.forEach(function (filter) {\n        if (!self.filterRecurse(filter, row.getData())) {\n          match = false;\n        }\n      });\n\n      if (match) {\n        activeRows.push(searchType === \"data\" ? row.getData(\"data\") : row.getComponent());\n      }\n    });\n    return activeRows;\n  }; //filter row array\n\n\n  Filter.prototype.filter = function (rowList, filters) {\n    var self = this,\n        activeRows = [],\n        activeRowComponents = [];\n\n    if (self.table.options.dataFiltering) {\n      self.table.options.dataFiltering.call(self.table, self.getFilters());\n    }\n\n    if (!self.table.options.ajaxFiltering && (self.filterList.length || Object.keys(self.headerFilters).length)) {\n      rowList.forEach(function (row) {\n        if (self.filterRow(row)) {\n          activeRows.push(row);\n        }\n      });\n    } else {\n      activeRows = rowList.slice(0);\n    }\n\n    if (self.table.options.dataFiltered) {\n      activeRows.forEach(function (row) {\n        activeRowComponents.push(row.getComponent());\n      });\n      self.table.options.dataFiltered.call(self.table, self.getFilters(), activeRowComponents);\n    }\n\n    return activeRows;\n  }; //filter individual row\n\n\n  Filter.prototype.filterRow = function (row, filters) {\n    var self = this,\n        match = true,\n        data = row.getData();\n    self.filterList.forEach(function (filter) {\n      if (!self.filterRecurse(filter, data)) {\n        match = false;\n      }\n    });\n\n    for (var field in self.headerFilters) {\n      if (!self.headerFilters[field].func(data)) {\n        match = false;\n      }\n    }\n\n    return match;\n  };\n\n  Filter.prototype.filterRecurse = function (filter, data) {\n    var self = this,\n        match = false;\n\n    if (Array.isArray(filter)) {\n      filter.forEach(function (subFilter) {\n        if (self.filterRecurse(subFilter, data)) {\n          match = true;\n        }\n      });\n    } else {\n      match = filter.func(data);\n    }\n\n    return match;\n  }; //list of available filters\n\n\n  Filter.prototype.filters = {\n    //equal to\n    \"=\": function _(filterVal, rowVal) {\n      return rowVal == filterVal ? true : false;\n    },\n    //less than\n    \"<\": function _(filterVal, rowVal) {\n      return rowVal < filterVal ? true : false;\n    },\n    //less than or equal to\n    \"<=\": function _(filterVal, rowVal) {\n      return rowVal <= filterVal ? true : false;\n    },\n    //greater than\n    \">\": function _(filterVal, rowVal) {\n      return rowVal > filterVal ? true : false;\n    },\n    //greater than or equal to\n    \">=\": function _(filterVal, rowVal) {\n      return rowVal >= filterVal ? true : false;\n    },\n    //not equal to\n    \"!=\": function _(filterVal, rowVal) {\n      return rowVal != filterVal ? true : false;\n    },\n    \"regex\": function regex(filterVal, rowVal) {\n      if (typeof filterVal == \"string\") {\n        filterVal = new RegExp(filterVal);\n      }\n\n      return filterVal.test(rowVal);\n    },\n    //contains the string\n    \"like\": function like(filterVal, rowVal) {\n      if (filterVal === null || typeof filterVal === \"undefined\") {\n        return rowVal === filterVal ? true : false;\n      } else {\n        if (typeof rowVal !== 'undefined' && rowVal !== null) {\n          return String(rowVal).toLowerCase().indexOf(filterVal.toLowerCase()) > -1 ? true : false;\n        } else {\n          return false;\n        }\n      }\n    },\n    //in array\n    \"in\": function _in(filterVal, rowVal) {\n      if (Array.isArray(filterVal)) {\n        return filterVal.indexOf(rowVal) > -1;\n      } else {\n        console.warn(\"Filter Error - filter value is not an array:\", filterVal);\n        return false;\n      }\n    }\n  };\n  Tabulator.prototype.registerModule(\"filter\", Filter);\n\n  var Format = function Format(table) {\n    this.table = table; //hold Tabulator object\n  }; //initialize column formatter\n\n\n  Format.prototype.initializeColumn = function (column) {\n    var self = this,\n        config = {\n      params: column.definition.formatterParams || {}\n    }; //set column formatter\n\n    switch (_typeof(column.definition.formatter)) {\n      case \"string\":\n        if (column.definition.formatter === \"tick\") {\n          column.definition.formatter = \"tickCross\";\n\n          if (typeof config.params.crossElement == \"undefined\") {\n            config.params.crossElement = false;\n          }\n\n          console.warn(\"DEPRECATION WANRING - the tick formatter has been depricated, please use the tickCross formatter with the crossElement param set to false\");\n        }\n\n        if (self.formatters[column.definition.formatter]) {\n          config.formatter = self.formatters[column.definition.formatter];\n        } else {\n          console.warn(\"Formatter Error - No such formatter found: \", column.definition.formatter);\n          config.formatter = self.formatters.plaintext;\n        }\n\n        break;\n\n      case \"function\":\n        config.formatter = column.definition.formatter;\n        break;\n\n      default:\n        config.formatter = self.formatters.plaintext;\n        break;\n    }\n\n    column.modules.format = config;\n  };\n\n  Format.prototype.cellRendered = function (cell) {\n    if (cell.column.modules.format.renderedCallback) {\n      cell.column.modules.format.renderedCallback();\n    }\n  }; //return a formatted value for a cell\n\n\n  Format.prototype.formatValue = function (cell) {\n    var component = cell.getComponent(),\n        params = typeof cell.column.modules.format.params === \"function\" ? cell.column.modules.format.params(component) : cell.column.modules.format.params;\n\n    function onRendered(callback) {\n      cell.column.modules.format.renderedCallback = callback;\n    }\n\n    return cell.column.modules.format.formatter.call(this, component, params, onRendered);\n  };\n\n  Format.prototype.sanitizeHTML = function (value) {\n    if (value) {\n      var entityMap = {\n        '&': '&amp;',\n        '<': '&lt;',\n        '>': '&gt;',\n        '\"': '&quot;',\n        \"'\": '&#39;',\n        '/': '&#x2F;',\n        '`': '&#x60;',\n        '=': '&#x3D;'\n      };\n      return String(value).replace(/[&<>\"'`=\\/]/g, function (s) {\n        return entityMap[s];\n      });\n    } else {\n      return value;\n    }\n  };\n\n  Format.prototype.emptyToSpace = function (value) {\n    return value === null || typeof value === \"undefined\" ? \"&nbsp\" : value;\n  }; //get formatter for cell\n\n\n  Format.prototype.getFormatter = function (formatter) {\n    var formatter;\n\n    switch (typeof formatter === 'undefined' ? 'undefined' : _typeof(formatter)) {\n      case \"string\":\n        if (this.formatters[formatter]) {\n          formatter = this.formatters[formatter];\n        } else {\n          console.warn(\"Formatter Error - No such formatter found: \", formatter);\n          formatter = this.formatters.plaintext;\n        }\n\n        break;\n\n      case \"function\":\n        formatter = formatter;\n        break;\n\n      default:\n        formatter = this.formatters.plaintext;\n        break;\n    }\n\n    return formatter;\n  }; //default data formatters\n\n\n  Format.prototype.formatters = {\n    //plain text value\n    plaintext: function plaintext(cell, formatterParams, onRendered) {\n      return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));\n    },\n    //html text value\n    html: function html(cell, formatterParams, onRendered) {\n      return cell.getValue();\n    },\n    //multiline text area\n    textarea: function textarea(cell, formatterParams, onRendered) {\n      cell.getElement().style.whiteSpace = \"pre-wrap\";\n      return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));\n    },\n    //currency formatting\n    money: function money(cell, formatterParams, onRendered) {\n      var floatVal = parseFloat(cell.getValue()),\n          number,\n          integer,\n          decimal,\n          rgx;\n      var decimalSym = formatterParams.decimal || \".\";\n      var thousandSym = formatterParams.thousand || \",\";\n      var symbol = formatterParams.symbol || \"\";\n      var after = !!formatterParams.symbolAfter;\n      var precision = typeof formatterParams.precision !== \"undefined\" ? formatterParams.precision : 2;\n\n      if (isNaN(floatVal)) {\n        return this.emptyToSpace(this.sanitizeHTML(cell.getValue()));\n      }\n\n      number = precision !== false ? floatVal.toFixed(precision) : floatVal;\n      number = String(number).split(\".\");\n      integer = number[0];\n      decimal = number.length > 1 ? decimalSym + number[1] : \"\";\n      rgx = /(\\d+)(\\d{3})/;\n\n      while (rgx.test(integer)) {\n        integer = integer.replace(rgx, \"$1\" + thousandSym + \"$2\");\n      }\n\n      return after ? integer + decimal + symbol : symbol + integer + decimal;\n    },\n    //clickable anchor tag\n    link: function link(cell, formatterParams, onRendered) {\n      var value = this.sanitizeHTML(cell.getValue()),\n          urlPrefix = formatterParams.urlPrefix || \"\",\n          label = this.emptyToSpace(value),\n          el = document.createElement(\"a\"),\n          data;\n\n      if (formatterParams.labelField) {\n        data = cell.getData();\n        label = data[formatterParams.labelField];\n      }\n\n      if (formatterParams.label) {\n        switch (_typeof(formatterParams.label)) {\n          case \"string\":\n            label = formatterParams.label;\n            break;\n\n          case \"function\":\n            label = formatterParams.label(cell);\n            break;\n        }\n      }\n\n      if (formatterParams.urlField) {\n        data = cell.getData();\n        value = data[formatterParams.urlField];\n      }\n\n      if (formatterParams.url) {\n        switch (_typeof(formatterParams.url)) {\n          case \"string\":\n            value = formatterParams.url;\n            break;\n\n          case \"function\":\n            value = formatterParams.url(cell);\n            break;\n        }\n      }\n\n      el.setAttribute(\"href\", urlPrefix + value);\n\n      if (formatterParams.target) {\n        el.setAttribute(\"target\", formatterParams.target);\n      }\n\n      el.innerHTML = this.emptyToSpace(label);\n      return el;\n    },\n    //image element\n    image: function image(cell, formatterParams, onRendered) {\n      var el = document.createElement(\"img\");\n      el.setAttribute(\"src\", cell.getValue());\n\n      switch (_typeof(formatterParams.height)) {\n        case \"number\":\n          element.style.height = formatterParams.height + \"px\";\n          break;\n\n        case \"string\":\n          element.style.height = formatterParams.height;\n          break;\n      }\n\n      switch (_typeof(formatterParams.width)) {\n        case \"number\":\n          element.style.width = formatterParams.width + \"px\";\n          break;\n\n        case \"string\":\n          element.style.width = formatterParams.width;\n          break;\n      }\n\n      el.addEventListener(\"load\", function () {\n        cell.getRow().normalizeHeight();\n      });\n      return el;\n    },\n    //tick or cross\n    tickCross: function tickCross(cell, formatterParams, onRendered) {\n      var value = cell.getValue(),\n          element = cell.getElement(),\n          empty = formatterParams.allowEmpty,\n          truthy = formatterParams.allowTruthy,\n          tick = typeof formatterParams.tickElement !== \"undefined\" ? formatterParams.tickElement : '<svg enable-background=\"new 0 0 24 24\" height=\"14\" width=\"14\" viewBox=\"0 0 24 24\" xml:space=\"preserve\" ><path fill=\"#2DC214\" clip-rule=\"evenodd\" d=\"M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z\" fill-rule=\"evenodd\"/></svg>',\n          cross = typeof formatterParams.crossElement !== \"undefined\" ? formatterParams.crossElement : '<svg enable-background=\"new 0 0 24 24\" height=\"14\" width=\"14\"  viewBox=\"0 0 24 24\" xml:space=\"preserve\" ><path fill=\"#CE1515\" d=\"M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z\"/></svg>';\n\n      if (truthy && value || value === true || value === \"true\" || value === \"True\" || value === 1 || value === \"1\") {\n        element.setAttribute(\"aria-checked\", true);\n        return tick || \"\";\n      } else {\n        if (empty && (value === \"null\" || value === \"\" || value === null || typeof value === \"undefined\")) {\n          element.setAttribute(\"aria-checked\", \"mixed\");\n          return \"\";\n        } else {\n          element.setAttribute(\"aria-checked\", false);\n          return cross || \"\";\n        }\n      }\n    },\n    datetime: function datetime(cell, formatterParams, onRendered) {\n      var inputFormat = formatterParams.inputFormat || \"YYYY-MM-DD hh:mm:ss\";\n      var outputFormat = formatterParams.outputFormat || \"DD/MM/YYYY hh:mm:ss\";\n      var invalid = typeof formatterParams.invalidPlaceholder !== \"undefined\" ? formatterParams.invalidPlaceholder : \"\";\n      var value = cell.getValue();\n      var newDatetime = moment(value, inputFormat);\n\n      if (newDatetime.isValid()) {\n        return newDatetime.format(outputFormat);\n      } else {\n        if (invalid === true) {\n          return value;\n        } else if (typeof invalid === \"function\") {\n          return invalid(value);\n        } else {\n          return invalid;\n        }\n      }\n    },\n    datetimediff: function datetime(cell, formatterParams, onRendered) {\n      var inputFormat = formatterParams.inputFormat || \"YYYY-MM-DD hh:mm:ss\";\n      var invalid = typeof formatterParams.invalidPlaceholder !== \"undefined\" ? formatterParams.invalidPlaceholder : \"\";\n      var suffix = typeof formatterParams.suffix !== \"undefined\" ? formatterParams.suffix : false;\n      var unit = typeof formatterParams.unit !== \"undefined\" ? formatterParams.unit : undefined;\n      var humanize = typeof formatterParams.humanize !== \"undefined\" ? formatterParams.humanize : false;\n      var date = typeof formatterParams.date !== \"undefined\" ? formatterParams.date : moment();\n      var value = cell.getValue();\n      var newDatetime = moment(value, inputFormat);\n\n      if (newDatetime.isValid()) {\n        if (humanize) {\n          return moment.duration(newDatetime.diff(date)).humanize(suffix);\n        } else {\n          return newDatetime.diff(date, unit) + (suffix ? \" \" + suffix : \"\");\n        }\n      } else {\n        if (invalid === true) {\n          return value;\n        } else if (typeof invalid === \"function\") {\n          return invalid(value);\n        } else {\n          return invalid;\n        }\n      }\n    },\n    //select\n    lookup: function lookup(cell, formatterParams, onRendered) {\n      var value = cell.getValue();\n\n      if (typeof formatterParams[value] === \"undefined\") {\n        console.warn('Missing display value for ' + value);\n        return value;\n      }\n\n      return formatterParams[value];\n    },\n    //star rating\n    star: function star(cell, formatterParams, onRendered) {\n      var value = cell.getValue(),\n          element = cell.getElement(),\n          maxStars = formatterParams && formatterParams.stars ? formatterParams.stars : 5,\n          stars = document.createElement(\"span\"),\n          star = document.createElementNS('http://www.w3.org/2000/svg', \"svg\"),\n          starActive = '<polygon fill=\"#FFEA00\" stroke=\"#C1AB60\" stroke-width=\"37.6152\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 \"/>',\n          starInactive = '<polygon fill=\"#D2D2D2\" stroke=\"#686868\" stroke-width=\"37.6152\" stroke-linecap=\"round\" stroke-linejoin=\"round\" stroke-miterlimit=\"10\" points=\"259.216,29.942 330.27,173.919 489.16,197.007 374.185,309.08 401.33,467.31 259.216,392.612 117.104,467.31 144.25,309.08 29.274,197.007 188.165,173.919 \"/>'; //style stars holder\n\n      stars.style.verticalAlign = \"middle\"; //style star\n\n      star.setAttribute(\"width\", \"14\");\n      star.setAttribute(\"height\", \"14\");\n      star.setAttribute(\"viewBox\", \"0 0 512 512\");\n      star.setAttribute(\"xml:space\", \"preserve\");\n      star.style.padding = \"0 1px\";\n      value = parseInt(value) < maxStars ? parseInt(value) : maxStars;\n\n      for (var i = 1; i <= maxStars; i++) {\n        var nextStar = star.cloneNode(true);\n        nextStar.innerHTML = i <= value ? starActive : starInactive;\n        stars.appendChild(nextStar);\n      }\n\n      element.style.whiteSpace = \"nowrap\";\n      element.style.overflow = \"hidden\";\n      element.style.textOverflow = \"ellipsis\";\n      element.setAttribute(\"aria-label\", value);\n      return stars;\n    },\n    //progress bar\n    progress: function progress(cell, formatterParams, onRendered) {\n      //progress bar\n      var value = this.sanitizeHTML(cell.getValue()) || 0,\n          element = cell.getElement(),\n          max = formatterParams && formatterParams.max ? formatterParams.max : 100,\n          min = formatterParams && formatterParams.min ? formatterParams.min : 0,\n          legendAlign = formatterParams && formatterParams.legendAlign ? formatterParams.legendAlign : \"center\",\n          percent,\n          percentValue,\n          color,\n          legend,\n          legendColor,\n          top,\n          left,\n          right,\n          bottom; //make sure value is in range\n\n      percentValue = parseFloat(value) <= max ? parseFloat(value) : max;\n      percentValue = parseFloat(percentValue) >= min ? parseFloat(percentValue) : min; //workout percentage\n\n      percent = (max - min) / 100;\n      percentValue = Math.round((percentValue - min) / percent); //set bar color\n\n      switch (_typeof(formatterParams.color)) {\n        case \"string\":\n          color = formatterParams.color;\n          break;\n\n        case \"function\":\n          color = formatterParams.color(value);\n          break;\n\n        case \"object\":\n          if (Array.isArray(formatterParams.color)) {\n            var unit = 100 / formatterParams.color.length;\n            var index = Math.floor(percentValue / unit);\n            index = Math.min(index, formatterParams.color.length - 1);\n            index = Math.max(index, 0);\n            color = formatterParams.color[index];\n            break;\n          }\n\n        default:\n          color = \"#2DC214\";\n      } //generate legend\n\n\n      switch (_typeof(formatterParams.legend)) {\n        case \"string\":\n          legend = formatterParams.legend;\n          break;\n\n        case \"function\":\n          legend = formatterParams.legend(value);\n          break;\n\n        case \"boolean\":\n          legend = value;\n          break;\n\n        default:\n          legend = false;\n      } //set legend color\n\n\n      switch (_typeof(formatterParams.legendColor)) {\n        case \"string\":\n          legendColor = formatterParams.legendColor;\n          break;\n\n        case \"function\":\n          legendColor = formatterParams.legendColor(value);\n          break;\n\n        case \"object\":\n          if (Array.isArray(formatterParams.legendColor)) {\n            var unit = 100 / formatterParams.legendColor.length;\n            var index = Math.floor(percentValue / unit);\n            index = Math.min(index, formatterParams.legendColor.length - 1);\n            index = Math.max(index, 0);\n            legendColor = formatterParams.legendColor[index];\n          }\n\n          break;\n\n        default:\n          legendColor = \"#000\";\n      }\n\n      element.style.minWidth = \"30px\";\n      element.style.position = \"relative\";\n      element.setAttribute(\"aria-label\", percentValue);\n      return \"<div style='position:absolute; top:8px; bottom:8px; left:4px; right:4px;'  data-max='\" + max + \"' data-min='\" + min + \"'><div style='position:relative; height:100%; width:calc(\" + percentValue + \"%); background-color:\" + color + \"; display:inline-block;'></div></div>\" + (legend ? \"<div style='position:absolute; top:4px; left:0; text-align:\" + legendAlign + \"; width:100%; color:\" + legendColor + \";'>\" + legend + \"</div>\" : \"\");\n    },\n    //background color\n    color: function color(cell, formatterParams, onRendered) {\n      cell.getElement().style.backgroundColor = this.sanitizeHTML(cell.getValue());\n      return \"\";\n    },\n    //tick icon\n    buttonTick: function buttonTick(cell, formatterParams, onRendered) {\n      return '<svg enable-background=\"new 0 0 24 24\" height=\"14\" width=\"14\" viewBox=\"0 0 24 24\" xml:space=\"preserve\" ><path fill=\"#2DC214\" clip-rule=\"evenodd\" d=\"M21.652,3.211c-0.293-0.295-0.77-0.295-1.061,0L9.41,14.34  c-0.293,0.297-0.771,0.297-1.062,0L3.449,9.351C3.304,9.203,3.114,9.13,2.923,9.129C2.73,9.128,2.534,9.201,2.387,9.351  l-2.165,1.946C0.078,11.445,0,11.63,0,11.823c0,0.194,0.078,0.397,0.223,0.544l4.94,5.184c0.292,0.296,0.771,0.776,1.062,1.07  l2.124,2.141c0.292,0.293,0.769,0.293,1.062,0l14.366-14.34c0.293-0.294,0.293-0.777,0-1.071L21.652,3.211z\" fill-rule=\"evenodd\"/></svg>';\n    },\n    //cross icon\n    buttonCross: function buttonCross(cell, formatterParams, onRendered) {\n      return '<svg enable-background=\"new 0 0 24 24\" height=\"14\" width=\"14\" viewBox=\"0 0 24 24\" xml:space=\"preserve\" ><path fill=\"#CE1515\" d=\"M22.245,4.015c0.313,0.313,0.313,0.826,0,1.139l-6.276,6.27c-0.313,0.312-0.313,0.826,0,1.14l6.273,6.272  c0.313,0.313,0.313,0.826,0,1.14l-2.285,2.277c-0.314,0.312-0.828,0.312-1.142,0l-6.271-6.271c-0.313-0.313-0.828-0.313-1.141,0  l-6.276,6.267c-0.313,0.313-0.828,0.313-1.141,0l-2.282-2.28c-0.313-0.313-0.313-0.826,0-1.14l6.278-6.269  c0.313-0.312,0.313-0.826,0-1.14L1.709,5.147c-0.314-0.313-0.314-0.827,0-1.14l2.284-2.278C4.308,1.417,4.821,1.417,5.135,1.73  L11.405,8c0.314,0.314,0.828,0.314,1.141,0.001l6.276-6.267c0.312-0.312,0.826-0.312,1.141,0L22.245,4.015z\"/></svg>';\n    },\n    //current row number\n    rownum: function rownum(cell, formatterParams, onRendered) {\n      return this.table.rowManager.activeRows.indexOf(cell.getRow()._getSelf()) + 1;\n    },\n    //row handle\n    handle: function handle(cell, formatterParams, onRendered) {\n      cell.getElement().classList.add(\"tabulator-row-handle\");\n      return \"<div class='tabulator-row-handle-box'><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div><div class='tabulator-row-handle-bar'></div></div>\";\n    },\n    responsiveCollapse: function responsiveCollapse(cell, formatterParams, onRendered) {\n      var self = this,\n          open = false,\n          el = document.createElement(\"div\");\n\n      function toggleList(isOpen) {\n        var collapse = cell.getRow().getElement().getElementsByClassName(\"tabulator-responsive-collapse\")[0];\n        open = isOpen;\n\n        if (open) {\n          el.classList.add(\"open\");\n\n          if (collapse) {\n            collapse.style.display = '';\n          }\n        } else {\n          el.classList.remove(\"open\");\n\n          if (collapse) {\n            collapse.style.display = 'none';\n          }\n        }\n      }\n\n      el.classList.add(\"tabulator-responsive-collapse-toggle\");\n      el.innerHTML = \"<span class='tabulator-responsive-collapse-toggle-open'>+</span><span class='tabulator-responsive-collapse-toggle-close'>-</span>\";\n      cell.getElement().classList.add(\"tabulator-row-handle\");\n\n      if (self.table.options.responsiveLayoutCollapseStartOpen) {\n        open = true;\n      }\n\n      el.addEventListener(\"click\", function () {\n        toggleList(!open);\n      });\n      toggleList(open);\n      return el;\n    }\n  };\n  Tabulator.prototype.registerModule(\"format\", Format);\n\n  var FrozenColumns = function FrozenColumns(table) {\n    this.table = table; //hold Tabulator object\n\n    this.leftColumns = [];\n    this.rightColumns = [];\n    this.leftMargin = 0;\n    this.rightMargin = 0;\n    this.initializationMode = \"left\";\n    this.active = false;\n  }; //reset initial state\n\n\n  FrozenColumns.prototype.reset = function () {\n    this.initializationMode = \"left\";\n    this.leftColumns = [];\n    this.rightColumns = [];\n    this.active = false;\n  }; //initialize specific column\n\n\n  FrozenColumns.prototype.initializeColumn = function (column) {\n    var config = {\n      margin: 0,\n      edge: false\n    };\n\n    if (column.definition.frozen) {\n      if (!column.parent.isGroup) {\n        if (!column.isGroup) {\n          config.position = this.initializationMode;\n\n          if (this.initializationMode == \"left\") {\n            this.leftColumns.push(column);\n          } else {\n            this.rightColumns.unshift(column);\n          }\n\n          this.active = true;\n          column.modules.frozen = config;\n        } else {\n          console.warn(\"Frozen Column Error - Column Groups cannot be frozen\");\n        }\n      } else {\n        console.warn(\"Frozen Column Error - Grouped columns cannot be frozen\");\n      }\n    } else {\n      this.initializationMode = \"right\";\n    }\n  }; //layout columns appropropriatly\n\n\n  FrozenColumns.prototype.layout = function () {\n    var self = this,\n        tableHolder = this.table.rowManager.element,\n        rightMargin = 0;\n\n    if (self.active) {\n      //calculate row padding\n      self.leftMargin = self._calcSpace(self.leftColumns, self.leftColumns.length);\n      self.table.columnManager.headersElement.style.marginLeft = self.leftMargin + \"px\";\n      self.rightMargin = self._calcSpace(self.rightColumns, self.rightColumns.length);\n      self.table.columnManager.element.style.paddingRight = self.rightMargin + \"px\";\n      self.table.rowManager.activeRows.forEach(function (row) {\n        self.layoutRow(row);\n      });\n\n      if (self.table.modExists(\"columnCalcs\")) {\n        if (self.table.modules.columnCalcs.topInitialized && self.table.modules.columnCalcs.topRow) {\n          self.layoutRow(self.table.modules.columnCalcs.topRow);\n        }\n\n        if (self.table.modules.columnCalcs.botInitialized && self.table.modules.columnCalcs.botRow) {\n          self.layoutRow(self.table.modules.columnCalcs.botRow);\n        }\n      } //calculate left columns\n\n\n      self.leftColumns.forEach(function (column, i) {\n        column.modules.frozen.margin = self._calcSpace(self.leftColumns, i) + self.table.columnManager.scrollLeft;\n\n        if (i == self.leftColumns.length - 1) {\n          column.modules.frozen.edge = true;\n        } else {\n          column.modules.frozen.edge = false;\n        }\n\n        self.layoutColumn(column);\n      }); //calculate right frozen columns\n\n      rightMargin = self.table.rowManager.element.clientWidth + self.table.columnManager.scrollLeft; // if(tableHolder.scrollHeight > tableHolder.clientHeight){\n      // \trightMargin -= tableHolder.offsetWidth - tableHolder.clientWidth;\n      // }\n\n      self.rightColumns.forEach(function (column, i) {\n        column.modules.frozen.margin = rightMargin - self._calcSpace(self.rightColumns, i + 1);\n\n        if (i == self.rightColumns.length - 1) {\n          column.modules.frozen.edge = true;\n        } else {\n          column.modules.frozen.edge = false;\n        }\n\n        self.layoutColumn(column);\n      });\n      this.table.rowManager.tableElement.style.marginRight = this.rightMargin + \"px\";\n    }\n  };\n\n  FrozenColumns.prototype.layoutColumn = function (column) {\n    var self = this;\n    self.layoutElement(column.getElement(), column);\n    column.cells.forEach(function (cell) {\n      self.layoutElement(cell.getElement(), column);\n    });\n  };\n\n  FrozenColumns.prototype.layoutRow = function (row) {\n    var rowEl = row.getElement();\n    rowEl.style.paddingLeft = this.leftMargin + \"px\"; // rowEl.style.paddingRight = this.rightMargin + \"px\";\n  };\n\n  FrozenColumns.prototype.layoutElement = function (element, column) {\n    if (column.modules.frozen) {\n      element.style.position = \"absolute\";\n      element.style.left = column.modules.frozen.margin + \"px\";\n      element.classList.add(\"tabulator-frozen\");\n\n      if (column.modules.frozen.edge) {\n        element.classList.add(\"tabulator-frozen-\" + column.modules.frozen.position);\n      }\n    }\n  };\n\n  FrozenColumns.prototype._calcSpace = function (columns, index) {\n    var width = 0;\n\n    for (var i = 0; i < index; i++) {\n      if (columns[i].visible) {\n        width += columns[i].getWidth();\n      }\n    }\n\n    return width;\n  };\n\n  Tabulator.prototype.registerModule(\"frozenColumns\", FrozenColumns);\n\n  var FrozenRows = function FrozenRows(table) {\n    this.table = table; //hold Tabulator object\n\n    this.topElement = document.createElement(\"div\");\n    this.rows = [];\n    this.displayIndex = 0; //index in display pipeline\n  };\n\n  FrozenRows.prototype.initialize = function () {\n    this.rows = [];\n    this.topElement.classList.add(\"tabulator-frozen-rows-holder\"); // this.table.columnManager.element.append(this.topElement);\n\n    this.table.columnManager.getElement().insertBefore(this.topElement, this.table.columnManager.headersElement.nextSibling);\n  };\n\n  FrozenRows.prototype.setDisplayIndex = function (index) {\n    this.displayIndex = index;\n  };\n\n  FrozenRows.prototype.getDisplayIndex = function () {\n    return this.displayIndex;\n  };\n\n  FrozenRows.prototype.isFrozen = function () {\n    return !!this.rows.length;\n  }; //filter frozen rows out of display data\n\n\n  FrozenRows.prototype.getRows = function (rows) {\n    var self = this,\n        frozen = [],\n        output = rows.slice(0);\n    this.rows.forEach(function (row) {\n      var index = output.indexOf(row);\n\n      if (index > -1) {\n        output.splice(index, 1);\n      }\n    });\n    return output;\n  };\n\n  FrozenRows.prototype.freezeRow = function (row) {\n    if (!row.modules.frozen) {\n      row.modules.frozen = true;\n      this.topElement.appendChild(row.getElement());\n      row.initialize();\n      row.normalizeHeight();\n      this.table.rowManager.adjustTableSize();\n      this.rows.push(row);\n      this.table.rowManager.refreshActiveData(\"display\");\n      this.styleRows();\n    } else {\n      console.warn(\"Freeze Error - Row is already frozen\");\n    }\n  };\n\n  FrozenRows.prototype.unfreezeRow = function (row) {\n    var index = this.rows.indexOf(row);\n\n    if (row.modules.frozen) {\n      row.modules.frozen = false;\n      var rowEl = row.getElement();\n      rowEl.parentNode.removeChild(rowEl);\n      this.table.rowManager.adjustTableSize();\n      this.rows.splice(index, 1);\n      this.table.rowManager.refreshActiveData(\"display\");\n\n      if (this.rows.length) {\n        this.styleRows();\n      }\n    } else {\n      console.warn(\"Freeze Error - Row is already unfrozen\");\n    }\n  };\n\n  FrozenRows.prototype.styleRows = function (row) {\n    var self = this;\n    this.rows.forEach(function (row, i) {\n      self.table.rowManager.styleRow(row, i);\n    });\n  };\n\n  Tabulator.prototype.registerModule(\"frozenRows\", FrozenRows); //public group object\n\n  var GroupComponent = function GroupComponent(group) {\n    this._group = group;\n    this.type = \"GroupComponent\";\n  };\n\n  GroupComponent.prototype.getKey = function () {\n    return this._group.key;\n  };\n\n  GroupComponent.prototype.getElement = function () {\n    return this._group.element;\n  };\n\n  GroupComponent.prototype.getRows = function () {\n    return this._group.getRows(true);\n  };\n\n  GroupComponent.prototype.getSubGroups = function () {\n    return this._group.getSubGroups(true);\n  };\n\n  GroupComponent.prototype.getParentGroup = function () {\n    return this._group.parent ? this._group.parent.getComponent() : false;\n  };\n\n  GroupComponent.prototype.getVisibility = function () {\n    return this._group.visible;\n  };\n\n  GroupComponent.prototype.show = function () {\n    this._group.show();\n  };\n\n  GroupComponent.prototype.hide = function () {\n    this._group.hide();\n  };\n\n  GroupComponent.prototype.toggle = function () {\n    this._group.toggleVisibility();\n  };\n\n  GroupComponent.prototype._getSelf = function () {\n    return this._group;\n  };\n\n  GroupComponent.prototype.getTable = function () {\n    return this._group.table;\n  }; //////////////////////////////////////////////////\n  //////////////// Group Functions /////////////////\n  //////////////////////////////////////////////////\n\n\n  var Group = function Group(groupManager, parent, level, key, field, generator, oldGroup) {\n    this.groupManager = groupManager;\n    this.parent = parent;\n    this.key = key;\n    this.level = level;\n    this.field = field;\n    this.hasSubGroups = level < groupManager.groupIDLookups.length - 1;\n    this.addRow = this.hasSubGroups ? this._addRowToGroup : this._addRow;\n    this.type = \"group\"; //type of element\n\n    this.old = oldGroup;\n    this.rows = [];\n    this.groups = [];\n    this.groupList = [];\n    this.generator = generator;\n    this.elementContents = false;\n    this.height = 0;\n    this.outerHeight = 0;\n    this.initialized = false;\n    this.calcs = {};\n    this.initialized = false;\n    this.modules = {};\n    this.visible = oldGroup ? oldGroup.visible : typeof groupManager.startOpen[level] !== \"undefined\" ? groupManager.startOpen[level] : groupManager.startOpen[0];\n    this.createElements();\n    this.addBindings();\n    this.createValueGroups();\n  };\n\n  Group.prototype.createElements = function () {\n    this.element = document.createElement(\"div\");\n    this.element.classList.add(\"tabulator-row\");\n    this.element.classList.add(\"tabulator-group\");\n    this.element.classList.add(\"tabulator-group-level-\" + this.level);\n    this.element.setAttribute(\"role\", \"rowgroup\");\n    this.arrowElement = document.createElement(\"div\");\n    this.arrowElement.classList.add(\"tabulator-arrow\");\n  };\n\n  Group.prototype.createValueGroups = function () {\n    var _this31 = this;\n\n    var level = this.level + 1;\n\n    if (this.groupManager.allowedValues && this.groupManager.allowedValues[level]) {\n      this.groupManager.allowedValues[level].forEach(function (value) {\n        _this31._createGroup(value, level);\n      });\n    }\n  };\n\n  Group.prototype.addBindings = function () {\n    var self = this,\n        dblTap,\n        tapHold,\n        tap,\n        toggleElement; //handle group click events\n\n    if (self.groupManager.table.options.groupClick) {\n      self.element.addEventListener(\"click\", function (e) {\n        self.groupManager.table.options.groupClick(e, self.getComponent());\n      });\n    }\n\n    if (self.groupManager.table.options.groupDblClick) {\n      self.element.addEventListener(\"dblclick\", function (e) {\n        self.groupManager.table.options.groupDblClick(e, self.getComponent());\n      });\n    }\n\n    if (self.groupManager.table.options.groupContext) {\n      self.element.addEventListener(\"contextmenu\", function (e) {\n        self.groupManager.table.options.groupContext(e, self.getComponent());\n      });\n    }\n\n    if (self.groupManager.table.options.groupTap) {\n      tap = false;\n      self.element.addEventListener(\"touchstart\", function (e) {\n        tap = true;\n      });\n      self.element.addEventListener(\"touchend\", function (e) {\n        if (tap) {\n          self.groupManager.table.options.groupTap(e, self.getComponent());\n        }\n\n        tap = false;\n      });\n    }\n\n    if (self.groupManager.table.options.groupDblTap) {\n      dblTap = null;\n      self.element.addEventListener(\"touchend\", function (e) {\n        if (dblTap) {\n          clearTimeout(dblTap);\n          dblTap = null;\n          self.groupManager.table.options.groupDblTap(e, self.getComponent());\n        } else {\n          dblTap = setTimeout(function () {\n            clearTimeout(dblTap);\n            dblTap = null;\n          }, 300);\n        }\n      });\n    }\n\n    if (self.groupManager.table.options.groupTapHold) {\n      tapHold = null;\n      self.element.addEventListener(\"touchstart\", function (e) {\n        clearTimeout(tapHold);\n        tapHold = setTimeout(function () {\n          clearTimeout(tapHold);\n          tapHold = null;\n          tap = false;\n          self.groupManager.table.options.groupTapHold(e, self.getComponent());\n        }, 1000);\n      });\n      self.element.addEventListener(\"touchend\", function (e) {\n        clearTimeout(tapHold);\n        tapHold = null;\n      });\n    }\n\n    if (self.groupManager.table.options.groupToggleElement) {\n      toggleElement = self.groupManager.table.options.groupToggleElement == \"arrow\" ? self.arrowElement : self.element;\n      toggleElement.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n        e.stopImmediatePropagation();\n        self.toggleVisibility();\n      });\n    }\n  };\n\n  Group.prototype._createGroup = function (groupID, level) {\n    var groupKey = level + \"_\" + groupID;\n    var group = new Group(this.groupManager, this, level, groupID, this.groupManager.groupIDLookups[level].field, this.groupManager.headerGenerator[level] || this.groupManager.headerGenerator[0], this.old ? this.old.groups[groupKey] : false);\n    this.groups[groupKey] = group;\n    this.groupList.push(group);\n  };\n\n  Group.prototype._addRowToGroup = function (row) {\n    var level = this.level + 1;\n\n    if (this.hasSubGroups) {\n      var groupID = this.groupManager.groupIDLookups[level].func(row.getData()),\n          groupKey = level + \"_\" + groupID;\n\n      if (this.groupManager.allowedValues && this.groupManager.allowedValues[level]) {\n        if (this.groups[groupKey]) {\n          this.groups[groupKey].addRow(row);\n        }\n      } else {\n        if (!this.groups[groupKey]) {\n          this._createGroup(groupID, level);\n        }\n\n        this.groups[groupKey].addRow(row);\n      }\n    }\n  };\n\n  Group.prototype._addRow = function (row) {\n    this.rows.push(row);\n    row.modules.group = this;\n  };\n\n  Group.prototype.insertRow = function (row, to, after) {\n    var data = this.conformRowData({});\n    row.updateData(data);\n    var toIndex = this.rows.indexOf(to);\n\n    if (toIndex > -1) {\n      if (after) {\n        this.rows.splice(toIndex + 1, 0, row);\n      } else {\n        this.rows.splice(toIndex, 0, row);\n      }\n    } else {\n      if (after) {\n        this.rows.push(row);\n      } else {\n        this.rows.unshift(row);\n      }\n    }\n\n    row.modules.group = this;\n    this.generateGroupHeaderContents();\n\n    if (this.groupManager.table.modExists(\"columnCalcs\") && this.groupManager.table.options.columnCalcs != \"table\") {\n      this.groupManager.table.modules.columnCalcs.recalcGroup(this);\n    }\n  };\n\n  Group.prototype.getRowIndex = function (row) {}; //update row data to match grouping contraints\n\n\n  Group.prototype.conformRowData = function (data) {\n    if (this.field) {\n      data[this.field] = this.key;\n    } else {\n      console.warn(\"Data Conforming Error - Cannot conform row data to match new group as groupBy is a function\");\n    }\n\n    if (this.parent) {\n      data = this.parent.conformRowData(data);\n    }\n\n    return data;\n  };\n\n  Group.prototype.removeRow = function (row) {\n    var index = this.rows.indexOf(row);\n\n    if (index > -1) {\n      this.rows.splice(index, 1);\n    }\n\n    if (!this.rows.length) {\n      if (this.parent) {\n        this.parent.removeGroup(this);\n      } else {\n        this.groupManager.removeGroup(this);\n      }\n\n      this.groupManager.updateGroupRows(true);\n    } else {\n      this.generateGroupHeaderContents();\n\n      if (this.groupManager.table.modExists(\"columnCalcs\") && this.groupManager.table.options.columnCalcs != \"table\") {\n        this.groupManager.table.modules.columnCalcs.recalcGroup(this);\n      }\n    }\n  };\n\n  Group.prototype.removeGroup = function (group) {\n    var groupKey = group.level + \"_\" + group.key,\n        index;\n\n    if (this.groups[groupKey]) {\n      delete this.groups[groupKey];\n      index = this.groupList.indexOf(group);\n\n      if (index > -1) {\n        this.groupList.splice(index, 1);\n      }\n\n      if (!this.groupList.length) {\n        if (this.parent) {\n          this.parent.removeGroup(this);\n        } else {\n          this.groupManager.removeGroup(this);\n        }\n      }\n    }\n  };\n\n  Group.prototype.getHeadersAndRows = function (noCalc) {\n    var output = [];\n    output.push(this);\n\n    this._visSet();\n\n    if (this.visible) {\n      if (this.groupList.length) {\n        this.groupList.forEach(function (group) {\n          output = output.concat(group.getHeadersAndRows(noCalc));\n        });\n      } else {\n        if (!noCalc && this.groupManager.table.options.columnCalcs != \"table\" && this.groupManager.table.modExists(\"columnCalcs\") && this.groupManager.table.modules.columnCalcs.hasTopCalcs()) {\n          if (this.calcs.top) {\n            this.calcs.top.detachElement();\n          }\n\n          this.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows);\n          output.push(this.calcs.top);\n        }\n\n        output = output.concat(this.rows);\n\n        if (!noCalc && this.groupManager.table.options.columnCalcs != \"table\" && this.groupManager.table.modExists(\"columnCalcs\") && this.groupManager.table.modules.columnCalcs.hasBottomCalcs()) {\n          if (this.calcs.bottom) {\n            this.calcs.bottom.detachElement();\n          }\n\n          this.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows);\n          output.push(this.calcs.bottom);\n        }\n      }\n    } else {\n      if (!this.groupList.length && this.groupManager.table.options.columnCalcs != \"table\" && this.groupManager.table.options.groupClosedShowCalcs) {\n        if (this.groupManager.table.modExists(\"columnCalcs\")) {\n          if (!noCalc && this.groupManager.table.modules.columnCalcs.hasTopCalcs()) {\n            if (this.calcs.top) {\n              this.calcs.top.detachElement();\n            }\n\n            this.calcs.top = this.groupManager.table.modules.columnCalcs.generateTopRow(this.rows);\n            output.push(this.calcs.top);\n          }\n\n          if (!noCalc && this.groupManager.table.modules.columnCalcs.hasBottomCalcs()) {\n            if (this.calcs.bottom) {\n              this.calcs.bottom.detachElement();\n            }\n\n            this.calcs.bottom = this.groupManager.table.modules.columnCalcs.generateBottomRow(this.rows);\n            output.push(this.calcs.bottom);\n          }\n        }\n      }\n    }\n\n    return output;\n  };\n\n  Group.prototype.getData = function (visible, transform) {\n    var self = this,\n        output = [];\n\n    this._visSet();\n\n    if (!visible || visible && this.visible) {\n      this.rows.forEach(function (row) {\n        output.push(row.getData(transform || \"data\"));\n      });\n    }\n\n    return output;\n  }; // Group.prototype.getRows = function(){\n  // \tthis._visSet();\n  // \treturn this.visible ? this.rows : [];\n  // };\n\n\n  Group.prototype.getRowCount = function () {\n    var count = 0;\n\n    if (this.groupList.length) {\n      this.groupList.forEach(function (group) {\n        count += group.getRowCount();\n      });\n    } else {\n      count = this.rows.length;\n    }\n\n    return count;\n  };\n\n  Group.prototype.toggleVisibility = function () {\n    if (this.visible) {\n      this.hide();\n    } else {\n      this.show();\n    }\n  };\n\n  Group.prototype.hide = function () {\n    this.visible = false;\n\n    if (this.groupManager.table.rowManager.getRenderMode() == \"classic\" && !this.groupManager.table.options.pagination) {\n      this.element.classList.remove(\"tabulator-group-visible\");\n\n      if (this.groupList.length) {\n        this.groupList.forEach(function (group) {\n          var rows = group.getHeadersAndRows();\n          rows.forEach(function (row) {\n            row.detachElement();\n          });\n        });\n      } else {\n        this.rows.forEach(function (row) {\n          var rowEl = row.getElement();\n          rowEl.parentNode.removeChild(rowEl);\n        });\n      }\n\n      this.groupManager.table.rowManager.setDisplayRows(this.groupManager.updateGroupRows(), this.groupManager.getDisplayIndex());\n    } else {\n      this.groupManager.updateGroupRows(true);\n    }\n\n    this.groupManager.table.options.groupVisibilityChanged.call(this.table, this.getComponent(), false);\n  };\n\n  Group.prototype.show = function () {\n    var self = this;\n    self.visible = true;\n\n    if (this.groupManager.table.rowManager.getRenderMode() == \"classic\" && !this.groupManager.table.options.pagination) {\n      this.element.classList.add(\"tabulator-group-visible\");\n      var prev = self.getElement();\n\n      if (this.groupList.length) {\n        this.groupList.forEach(function (group) {\n          var rows = group.getHeadersAndRows();\n          rows.forEach(function (row) {\n            var rowEl = row.getElement();\n            prev.parentNode.insertBefore(rowEl, prev.nextSibling);\n            row.initialize();\n            prev = rowEl;\n          });\n        });\n      } else {\n        self.rows.forEach(function (row) {\n          var rowEl = row.getElement();\n          prev.parentNode.insertBefore(rowEl, prev.nextSibling);\n          row.initialize();\n          prev = rowEl;\n        });\n      }\n\n      this.groupManager.table.rowManager.setDisplayRows(this.groupManager.updateGroupRows(), this.groupManager.getDisplayIndex());\n    } else {\n      this.groupManager.updateGroupRows(true);\n    }\n\n    this.groupManager.table.options.groupVisibilityChanged.call(this.table, this.getComponent(), true);\n  };\n\n  Group.prototype._visSet = function () {\n    var data = [];\n\n    if (typeof this.visible == \"function\") {\n      this.rows.forEach(function (row) {\n        data.push(row.getData());\n      });\n      this.visible = this.visible(this.key, this.getRowCount(), data, this.getComponent());\n    }\n  };\n\n  Group.prototype.getRowGroup = function (row) {\n    var match = false;\n\n    if (this.groupList.length) {\n      this.groupList.forEach(function (group) {\n        var result = group.getRowGroup(row);\n\n        if (result) {\n          match = result;\n        }\n      });\n    } else {\n      if (this.rows.find(function (item) {\n        return item === row;\n      })) {\n        match = this;\n      }\n    }\n\n    return match;\n  };\n\n  Group.prototype.getSubGroups = function (component) {\n    var output = [];\n    this.groupList.forEach(function (child) {\n      output.push(component ? child.getComponent() : child);\n    });\n    return output;\n  };\n\n  Group.prototype.getRows = function (compoment) {\n    var output = [];\n    this.rows.forEach(function (row) {\n      output.push(compoment ? row.getComponent() : row);\n    });\n    return output;\n  };\n\n  Group.prototype.generateGroupHeaderContents = function () {\n    var data = [];\n    this.rows.forEach(function (row) {\n      data.push(row.getData());\n    });\n    this.elementContents = this.generator(this.key, this.getRowCount(), data, this.getComponent());\n\n    while (this.element.firstChild) {\n      this.element.removeChild(this.element.firstChild);\n    }\n\n    if (typeof this.elementContents === \"string\") {\n      this.element.innerHTML = this.elementContents;\n    } else {\n      this.element.appendChild(this.elementContents);\n    }\n\n    this.element.insertBefore(this.arrowElement, this.element.firstChild);\n  }; ////////////// Standard Row Functions //////////////\n\n\n  Group.prototype.getElement = function () {\n    this.addBindingsd = false;\n\n    this._visSet();\n\n    if (this.visible) {\n      this.element.classList.add(\"tabulator-group-visible\");\n    } else {\n      this.element.classList.remove(\"tabulator-group-visible\");\n    }\n\n    this.element.childNodes.forEach(function (child) {\n      child.parentNode.removeChild(child);\n    });\n    this.generateGroupHeaderContents(); // this.addBindings();\n\n    return this.element;\n  };\n\n  Group.prototype.detachElement = function () {\n    if (this.element && this.element.parentNode) {\n      this.element.parentNode.removeChild(this.element);\n    }\n  }; //normalize the height of elements in the row\n\n\n  Group.prototype.normalizeHeight = function () {\n    this.setHeight(this.element.clientHeight);\n  };\n\n  Group.prototype.initialize = function (force) {\n    if (!this.initialized || force) {\n      this.normalizeHeight();\n      this.initialized = true;\n    }\n  };\n\n  Group.prototype.reinitialize = function () {\n    this.initialized = false;\n    this.height = 0;\n\n    if (Tabulator.prototype.helpers.elVisible(this.element)) {\n      this.initialize(true);\n    }\n  };\n\n  Group.prototype.setHeight = function (height) {\n    if (this.height != height) {\n      this.height = height;\n      this.outerHeight = this.element.offsetHeight;\n    }\n  }; //return rows outer height\n\n\n  Group.prototype.getHeight = function () {\n    return this.outerHeight;\n  };\n\n  Group.prototype.getGroup = function () {\n    return this;\n  };\n\n  Group.prototype.reinitializeHeight = function () {};\n\n  Group.prototype.calcHeight = function () {};\n\n  Group.prototype.setCellHeight = function () {};\n\n  Group.prototype.clearCellHeight = function () {}; //////////////// Object Generation /////////////////\n\n\n  Group.prototype.getComponent = function () {\n    return new GroupComponent(this);\n  }; //////////////////////////////////////////////////\n  ////////////// Group Row Extension ///////////////\n  //////////////////////////////////////////////////\n\n\n  var GroupRows = function GroupRows(table) {\n    this.table = table; //hold Tabulator object\n\n    this.groupIDLookups = false; //enable table grouping and set field to group by\n\n    this.startOpen = [function () {\n      return false;\n    }]; //starting state of group\n\n    this.headerGenerator = [function () {\n      return \"\";\n    }];\n    this.groupList = []; //ordered list of groups\n\n    this.allowedValues = false;\n    this.groups = {}; //hold row groups\n\n    this.displayIndex = 0; //index in display pipeline\n  }; //initialize group configuration\n\n\n  GroupRows.prototype.initialize = function () {\n    var self = this,\n        groupBy = self.table.options.groupBy,\n        startOpen = self.table.options.groupStartOpen,\n        groupHeader = self.table.options.groupHeader;\n    this.allowedValues = self.table.options.groupValues;\n    self.headerGenerator = [function () {\n      return \"\";\n    }];\n    this.startOpen = [function () {\n      return false;\n    }]; //starting state of group\n\n    self.table.modules.localize.bind(\"groups|item\", function (langValue, lang) {\n      self.headerGenerator[0] = function (value, count, data) {\n        //header layout function\n        return (typeof value === \"undefined\" ? \"\" : value) + \"<span>(\" + count + \" \" + (count === 1 ? langValue : lang.groups.items) + \")</span>\";\n      };\n    });\n    this.groupIDLookups = [];\n\n    if (Array.isArray(groupBy) || groupBy) {\n      if (this.table.modExists(\"columnCalcs\") && this.table.options.columnCalcs != \"table\" && this.table.options.columnCalcs != \"both\") {\n        this.table.modules.columnCalcs.removeCalcs();\n      }\n    } else {\n      if (this.table.modExists(\"columnCalcs\") && this.table.options.columnCalcs != \"group\") {\n        var cols = this.table.columnManager.getRealColumns();\n        cols.forEach(function (col) {\n          if (col.definition.topCalc) {\n            self.table.modules.columnCalcs.initializeTopRow();\n          }\n\n          if (col.definition.bottomCalc) {\n            self.table.modules.columnCalcs.initializeBottomRow();\n          }\n        });\n      }\n    }\n\n    if (!Array.isArray(groupBy)) {\n      groupBy = [groupBy];\n    }\n\n    groupBy.forEach(function (group, i) {\n      var lookupFunc, column;\n\n      if (typeof group == \"function\") {\n        lookupFunc = group;\n      } else {\n        column = self.table.columnManager.getColumnByField(group);\n\n        if (column) {\n          lookupFunc = function lookupFunc(data) {\n            return column.getFieldValue(data);\n          };\n        } else {\n          lookupFunc = function lookupFunc(data) {\n            return data[group];\n          };\n        }\n      }\n\n      self.groupIDLookups.push({\n        field: typeof group === \"function\" ? false : group,\n        func: lookupFunc,\n        values: self.allowedValues ? self.allowedValues[i] : false\n      });\n    });\n\n    if (startOpen) {\n      if (!Array.isArray(startOpen)) {\n        startOpen = [startOpen];\n      }\n\n      startOpen.forEach(function (level) {\n        level = typeof level == \"function\" ? level : function () {\n          return true;\n        };\n      });\n      self.startOpen = startOpen;\n    }\n\n    if (groupHeader) {\n      self.headerGenerator = Array.isArray(groupHeader) ? groupHeader : [groupHeader];\n    }\n\n    this.initialized = true;\n  };\n\n  GroupRows.prototype.setDisplayIndex = function (index) {\n    this.displayIndex = index;\n  };\n\n  GroupRows.prototype.getDisplayIndex = function () {\n    return this.displayIndex;\n  }; //return appropriate rows with group headers\n\n\n  GroupRows.prototype.getRows = function (rows) {\n    if (this.groupIDLookups.length) {\n      this.table.options.dataGrouping.call(this.table);\n      this.generateGroups(rows);\n\n      if (this.table.options.dataGrouped) {\n        this.table.options.dataGrouped.call(this.table, this.getGroups(true));\n      }\n\n      return this.updateGroupRows();\n    } else {\n      return rows.slice(0);\n    }\n  };\n\n  GroupRows.prototype.getGroups = function (compoment) {\n    var groupComponents = [];\n    this.groupList.forEach(function (group) {\n      groupComponents.push(compoment ? group.getComponent() : group);\n    });\n    return groupComponents;\n  };\n\n  GroupRows.prototype.pullGroupListData = function (groupList) {\n    var self = this;\n    var groupListData = [];\n    groupList.forEach(function (group) {\n      var groupHeader = {};\n      groupHeader.level = 0;\n      groupHeader.rowCount = 0;\n      groupHeader.headerContent = \"\";\n      var childData = [];\n\n      if (group.hasSubGroups) {\n        childData = self.pullGroupListData(group.groupList);\n        groupHeader.level = group.level;\n        groupHeader.rowCount = childData.length - group.groupList.length; // data length minus number of sub-headers\n\n        groupHeader.headerContent = group.generator(group.key, groupHeader.rowCount, group.rows, group);\n        groupListData.push(groupHeader);\n        groupListData = groupListData.concat(childData);\n      } else {\n        groupHeader.level = group.level;\n        groupHeader.headerContent = group.generator(group.key, group.rows.length, group.rows, group);\n        groupHeader.rowCount = group.getRows().length;\n        groupListData.push(groupHeader);\n        group.getRows().forEach(function (row) {\n          groupListData.push(row.getData(\"data\"));\n        });\n      }\n    });\n    return groupListData;\n  };\n\n  GroupRows.prototype.getGroupedData = function () {\n    return this.pullGroupListData(this.groupList);\n  };\n\n  GroupRows.prototype.getRowGroup = function (row) {\n    var match = false;\n    this.groupList.forEach(function (group) {\n      var result = group.getRowGroup(row);\n\n      if (result) {\n        match = result;\n      }\n    });\n    return match;\n  };\n\n  GroupRows.prototype.countGroups = function () {\n    return this.groupList.length;\n  };\n\n  GroupRows.prototype.generateGroups = function (rows) {\n    var self = this,\n        oldGroups = self.groups;\n    self.groups = {};\n    self.groupList = [];\n\n    if (this.allowedValues && this.allowedValues[0]) {\n      this.allowedValues[0].forEach(function (value) {\n        self.createGroup(value, 0, oldGroups);\n      });\n      rows.forEach(function (row) {\n        self.assignRowToExistingGroup(row, oldGroups);\n      });\n    } else {\n      rows.forEach(function (row) {\n        self.assignRowToGroup(row, oldGroups);\n      });\n    }\n  };\n\n  GroupRows.prototype.createGroup = function (groupID, level, oldGroups) {\n    var groupKey = level + \"_\" + groupID,\n        group;\n    oldGroups = oldGroups || [];\n    group = new Group(this, false, level, groupID, this.groupIDLookups[0].field, this.headerGenerator[0], oldGroups[groupKey]);\n    this.groups[groupKey] = group;\n    this.groupList.push(group);\n  };\n\n  GroupRows.prototype.assignRowToGroup = function (row, oldGroups) {\n    var groupID = this.groupIDLookups[0].func(row.getData()),\n        groupKey = \"0_\" + groupID;\n\n    if (!this.groups[groupKey]) {\n      this.createGroup(groupID, 0, oldGroups);\n    }\n\n    this.groups[groupKey].addRow(row);\n  };\n\n  GroupRows.prototype.assignRowToExistingGroup = function (row, oldGroups) {\n    var groupID = this.groupIDLookups[0].func(row.getData()),\n        groupKey = \"0_\" + groupID;\n\n    if (this.groups[groupKey]) {\n      this.groups[groupKey].addRow(row);\n    }\n  };\n\n  GroupRows.prototype.assignRowToGroup = function (row, oldGroups) {\n    var groupID = this.groupIDLookups[0].func(row.getData()),\n        newGroupNeeded = !this.groups[\"0_\" + groupID];\n\n    if (newGroupNeeded) {\n      this.createGroup(groupID, 0, oldGroups);\n    }\n\n    this.groups[\"0_\" + groupID].addRow(row);\n    return !newGroupNeeded;\n  };\n\n  GroupRows.prototype.updateGroupRows = function (force) {\n    var self = this,\n        output = [],\n        oldRowCount;\n    self.groupList.forEach(function (group) {\n      output = output.concat(group.getHeadersAndRows());\n    }); //force update of table display\n\n    if (force) {\n      var displayIndex = self.table.rowManager.setDisplayRows(output, this.getDisplayIndex());\n\n      if (displayIndex !== true) {\n        this.setDisplayIndex(displayIndex);\n      }\n\n      self.table.rowManager.refreshActiveData(\"group\", true, true);\n    }\n\n    return output;\n  };\n\n  GroupRows.prototype.scrollHeaders = function (left) {\n    this.groupList.forEach(function (group) {\n      group.arrowElement.style.marginLeft = left + \"px\";\n    });\n  };\n\n  GroupRows.prototype.removeGroup = function (group) {\n    var groupKey = group.level + \"_\" + group.key,\n        index;\n\n    if (this.groups[groupKey]) {\n      delete this.groups[groupKey];\n      index = this.groupList.indexOf(group);\n\n      if (index > -1) {\n        this.groupList.splice(index, 1);\n      }\n    }\n  };\n\n  Tabulator.prototype.registerModule(\"groupRows\", GroupRows);\n\n  var History = function History(table) {\n    this.table = table; //hold Tabulator object\n\n    this.history = [];\n    this.index = -1;\n  };\n\n  History.prototype.clear = function () {\n    this.history = [];\n    this.index = -1;\n  };\n\n  History.prototype.action = function (type, component, data) {\n    this.history = this.history.slice(0, this.index + 1);\n    this.history.push({\n      type: type,\n      component: component,\n      data: data\n    });\n    this.index++;\n  };\n\n  History.prototype.getHistoryUndoSize = function () {\n    return this.index + 1;\n  };\n\n  History.prototype.getHistoryRedoSize = function () {\n    return this.history.length - (this.index + 1);\n  };\n\n  History.prototype.undo = function () {\n    if (this.index > -1) {\n      var action = this.history[this.index];\n      this.undoers[action.type].call(this, action);\n      this.index--;\n      this.table.options.historyUndo.call(this.table, action.type, action.component.getComponent(), action.data);\n      return true;\n    } else {\n      console.warn(\"History Undo Error - No more history to undo\");\n      return false;\n    }\n  };\n\n  History.prototype.redo = function () {\n    if (this.history.length - 1 > this.index) {\n      this.index++;\n      var action = this.history[this.index];\n      this.redoers[action.type].call(this, action);\n      this.table.options.historyRedo.call(this.table, action.type, action.component.getComponent(), action.data);\n      return true;\n    } else {\n      console.warn(\"History Redo Error - No more history to redo\");\n      return false;\n    }\n  };\n\n  History.prototype.undoers = {\n    cellEdit: function cellEdit(action) {\n      action.component.setValueProcessData(action.data.oldValue);\n    },\n    rowAdd: function rowAdd(action) {\n      action.component.deleteActual();\n    },\n    rowDelete: function rowDelete(action) {\n      var newRow = this.table.rowManager.addRowActual(action.data.data, action.data.pos, action.data.index);\n\n      this._rebindRow(action.component, newRow);\n    },\n    rowMove: function rowMove(action) {\n      this.table.rowManager.moveRowActual(action.component, this.table.rowManager.rows[action.data.pos], false);\n      this.table.rowManager.redraw();\n    }\n  };\n  History.prototype.redoers = {\n    cellEdit: function cellEdit(action) {\n      action.component.setValueProcessData(action.data.newValue);\n    },\n    rowAdd: function rowAdd(action) {\n      var newRow = this.table.rowManager.addRowActual(action.data.data, action.data.pos, action.data.index);\n\n      this._rebindRow(action.component, newRow);\n    },\n    rowDelete: function rowDelete(action) {\n      action.component.deleteActual();\n    },\n    rowMove: function rowMove(action) {\n      this.table.rowManager.moveRowActual(action.component, this.table.rowManager.rows[action.data.pos], false);\n      this.table.rowManager.redraw();\n    }\n  }; //rebind rows to new element after deletion\n\n  History.prototype._rebindRow = function (oldRow, newRow) {\n    this.history.forEach(function (action) {\n      if (action.component instanceof Row) {\n        if (action.component === oldRow) {\n          action.component = newRow;\n        }\n      } else if (action.component instanceof Cell) {\n        if (action.component.row === oldRow) {\n          var field = action.component.column.getField();\n\n          if (field) {\n            action.component = newRow.getCell(field);\n          }\n        }\n      }\n    });\n  };\n\n  Tabulator.prototype.registerModule(\"history\", History);\n\n  var HtmlTableImport = function HtmlTableImport(table) {\n    this.table = table; //hold Tabulator object\n\n    this.fieldIndex = [];\n    this.hasIndex = false;\n  };\n\n  HtmlTableImport.prototype.parseTable = function () {\n    var self = this,\n        element = self.table.element,\n        options = self.table.options,\n        columns = options.columns,\n        headers = element.getElementsByTagName(\"th\"),\n        rows = element.getElementsByTagName(\"tbody\")[0],\n        data = [],\n        newTable;\n    self.hasIndex = false;\n    self.table.options.htmlImporting.call(this.table);\n    rows = rows ? rows.getElementsByTagName(\"tr\") : []; //check for tablator inline options\n\n    self._extractOptions(element, options);\n\n    if (headers.length) {\n      self._extractHeaders(headers, rows);\n    } else {\n      self._generateBlankHeaders(headers, rows);\n    } //iterate through table rows and build data set\n\n\n    for (var index = 0; index < rows.length; index++) {\n      var row = rows[index],\n          cells = row.getElementsByTagName(\"td\"),\n          item = {}; //create index if the dont exist in table\n\n      if (!self.hasIndex) {\n        item[options.index] = index;\n      }\n\n      for (var i = 0; i < cells.length; i++) {\n        var cell = cells[i];\n\n        if (typeof this.fieldIndex[i] !== \"undefined\") {\n          item[this.fieldIndex[i]] = cell.innerHTML;\n        }\n      } //add row data to item\n\n\n      data.push(item);\n    } //create new element\n\n\n    var newElement = document.createElement(\"div\"); //transfer attributes to new element\n\n    var attributes = element.attributes; // loop through attributes and apply them on div\n\n    for (var i in attributes) {\n      if (_typeof(attributes[i]) == \"object\") {\n        newElement.setAttribute(attributes[i].name, attributes[i].value);\n      }\n    } // replace table with div element\n\n\n    element.parentNode.replaceChild(newElement, element);\n    options.data = data;\n    self.table.options.htmlImported.call(this.table); // // newElement.tabulator(options);\n\n    this.table.element = newElement;\n  }; //extract tabulator attribute options\n\n\n  HtmlTableImport.prototype._extractOptions = function (element, options) {\n    var attributes = element.attributes;\n\n    for (var index in attributes) {\n      var attrib = attributes[index];\n      var name;\n\n      if ((typeof attrib === 'undefined' ? 'undefined' : _typeof(attrib)) == \"object\" && attrib.name && attrib.name.indexOf(\"tabulator-\") === 0) {\n        name = attrib.name.replace(\"tabulator-\", \"\");\n\n        for (var key in options) {\n          if (key.toLowerCase() == name) {\n            options[key] = this._attribValue(attrib.value);\n          }\n        }\n      }\n    }\n  }; //get value of attribute\n\n\n  HtmlTableImport.prototype._attribValue = function (value) {\n    if (value === \"true\") {\n      return true;\n    }\n\n    if (value === \"false\") {\n      return false;\n    }\n\n    return value;\n  }; //find column if it has already been defined\n\n\n  HtmlTableImport.prototype._findCol = function (title) {\n    var match = this.table.options.columns.find(function (column) {\n      return column.title === title;\n    });\n    return match || false;\n  }; //extract column from headers\n\n\n  HtmlTableImport.prototype._extractHeaders = function (headers, rows) {\n    for (var index = 0; index < headers.length; index++) {\n      var header = headers[index],\n          exists = false,\n          col = this._findCol(header.textContent),\n          width,\n          attributes;\n\n      if (col) {\n        exists = true;\n      } else {\n        col = {\n          title: header.textContent.trim()\n        };\n      }\n\n      if (!col.field) {\n        col.field = header.textContent.trim().toLowerCase().replace(\" \", \"_\");\n      }\n\n      width = header.getAttribute(\"width\");\n\n      if (width && !col.width) {\n        col.width = width;\n      } //check for tablator inline options\n\n\n      attributes = header.attributes; // //check for tablator inline options\n\n      this._extractOptions(header, col);\n\n      for (var i in attributes) {\n        var attrib = attributes[i],\n            name;\n\n        if ((typeof attrib === 'undefined' ? 'undefined' : _typeof(attrib)) == \"object\" && attrib.name && attrib.name.indexOf(\"tabulator-\") === 0) {\n          name = attrib.name.replace(\"tabulator-\", \"\");\n          col[name] = this._attribValue(attrib.value);\n        }\n      }\n\n      this.fieldIndex[index] = col.field;\n\n      if (col.field == this.table.options.index) {\n        this.hasIndex = true;\n      }\n\n      if (!exists) {\n        this.table.options.columns.push(col);\n      }\n    }\n  }; //generate blank headers\n\n\n  HtmlTableImport.prototype._generateBlankHeaders = function (headers, rows) {\n    for (var index = 0; index < headers.length; index++) {\n      var header = headers[index],\n          col = {\n        title: \"\",\n        field: \"col\" + index\n      };\n      this.fieldIndex[index] = col.field;\n      var width = header.getAttribute(\"width\");\n\n      if (width) {\n        col.width = width;\n      }\n\n      this.table.options.columns.push(col);\n    }\n  };\n\n  Tabulator.prototype.registerModule(\"htmlTableImport\", HtmlTableImport);\n\n  var Keybindings = function Keybindings(table) {\n    this.table = table; //hold Tabulator object\n\n    this.watchKeys = null;\n    this.pressedKeys = null;\n    this.keyupBinding = false;\n    this.keydownBinding = false;\n  };\n\n  Keybindings.prototype.initialize = function () {\n    var bindings = this.table.options.keybindings,\n        mergedBindings = {};\n    this.watchKeys = {};\n    this.pressedKeys = [];\n\n    if (bindings !== false) {\n      for (var key in this.bindings) {\n        mergedBindings[key] = this.bindings[key];\n      }\n\n      if (Object.keys(bindings).length) {\n        for (var _key in bindings) {\n          mergedBindings[_key] = bindings[_key];\n        }\n      }\n\n      this.mapBindings(mergedBindings);\n      this.bindEvents();\n    }\n  };\n\n  Keybindings.prototype.mapBindings = function (bindings) {\n    var _this32 = this;\n\n    var self = this;\n\n    var _loop2 = function _loop2(key) {\n      if (_this32.actions[key]) {\n        if (bindings[key]) {\n          if (_typeof(bindings[key]) !== \"object\") {\n            bindings[key] = [bindings[key]];\n          }\n\n          bindings[key].forEach(function (binding) {\n            self.mapBinding(key, binding);\n          });\n        }\n      } else {\n        console.warn(\"Key Binding Error - no such action:\", key);\n      }\n    };\n\n    for (var key in bindings) {\n      _loop2(key);\n    }\n  };\n\n  Keybindings.prototype.mapBinding = function (action, symbolsList) {\n    var self = this;\n    var binding = {\n      action: this.actions[action],\n      keys: [],\n      ctrl: false,\n      shift: false\n    };\n    var symbols = symbolsList.toString().toLowerCase().split(\" \").join(\"\").split(\"+\");\n    symbols.forEach(function (symbol) {\n      switch (symbol) {\n        case \"ctrl\":\n          binding.ctrl = true;\n          break;\n\n        case \"shift\":\n          binding.shift = true;\n          break;\n\n        default:\n          symbol = parseInt(symbol);\n          binding.keys.push(symbol);\n\n          if (!self.watchKeys[symbol]) {\n            self.watchKeys[symbol] = [];\n          }\n\n          self.watchKeys[symbol].push(binding);\n      }\n    });\n  };\n\n  Keybindings.prototype.bindEvents = function () {\n    var self = this;\n\n    this.keyupBinding = function (e) {\n      var code = e.keyCode;\n      var bindings = self.watchKeys[code];\n\n      if (bindings) {\n        self.pressedKeys.push(code);\n        bindings.forEach(function (binding) {\n          self.checkBinding(e, binding);\n        });\n      }\n    };\n\n    this.keydownBinding = function (e) {\n      var code = e.keyCode;\n      var bindings = self.watchKeys[code];\n\n      if (bindings) {\n        var index = self.pressedKeys.indexOf(code);\n\n        if (index > -1) {\n          self.pressedKeys.splice(index, 1);\n        }\n      }\n    };\n\n    this.table.element.addEventListener(\"keydown\", this.keyupBinding);\n    this.table.element.addEventListener(\"keyup\", this.keydownBinding);\n  };\n\n  Keybindings.prototype.clearBindings = function () {\n    if (this.keyupBinding) {\n      this.table.element.removeEventListener(\"keydown\", this.keyupBinding);\n    }\n\n    if (this.keydownBinding) {\n      this.table.element.removeEventListener(\"keyup\", this.keydownBinding);\n    }\n  };\n\n  Keybindings.prototype.checkBinding = function (e, binding) {\n    var self = this,\n        match = true;\n\n    if (e.ctrlKey == binding.ctrl && e.shiftKey == binding.shift) {\n      binding.keys.forEach(function (key) {\n        var index = self.pressedKeys.indexOf(key);\n\n        if (index == -1) {\n          match = false;\n        }\n      });\n\n      if (match) {\n        binding.action.call(self, e);\n      }\n\n      return true;\n    }\n\n    return false;\n  }; //default bindings\n\n\n  Keybindings.prototype.bindings = {\n    navPrev: \"shift + 9\",\n    navNext: 9,\n    navUp: 38,\n    navDown: 40,\n    scrollPageUp: 33,\n    scrollPageDown: 34,\n    scrollToStart: 36,\n    scrollToEnd: 35,\n    undo: \"ctrl + 90\",\n    redo: \"ctrl + 89\",\n    copyToClipboard: \"ctrl + 67\"\n  }; //default actions\n\n  Keybindings.prototype.actions = {\n    keyBlock: function keyBlock(e) {\n      e.stopPropagation();\n      e.preventDefault();\n    },\n    scrollPageUp: function scrollPageUp(e) {\n      var rowManager = this.table.rowManager,\n          newPos = rowManager.scrollTop - rowManager.height,\n          scrollMax = rowManager.element.scrollHeight;\n      e.preventDefault();\n\n      if (rowManager.displayRowsCount) {\n        if (newPos >= 0) {\n          rowManager.element.scrollTop = newPos;\n        } else {\n          rowManager.scrollToRow(rowManager.getDisplayRows()[0]);\n        }\n      }\n\n      this.table.element.focus();\n    },\n    scrollPageDown: function scrollPageDown(e) {\n      var rowManager = this.table.rowManager,\n          newPos = rowManager.scrollTop + rowManager.height,\n          scrollMax = rowManager.element.scrollHeight;\n      e.preventDefault();\n\n      if (rowManager.displayRowsCount) {\n        if (newPos <= scrollMax) {\n          rowManager.element.scrollTop = newPos;\n        } else {\n          rowManager.scrollToRow(rowManager.getDisplayRows()[rowManager.displayRowsCount - 1]);\n        }\n      }\n\n      this.table.element.focus();\n    },\n    scrollToStart: function scrollToStart(e) {\n      var rowManager = this.table.rowManager;\n      e.preventDefault();\n\n      if (rowManager.displayRowsCount) {\n        rowManager.scrollToRow(rowManager.getDisplayRows()[0]);\n      }\n\n      this.table.element.focus();\n    },\n    scrollToEnd: function scrollToEnd(e) {\n      var rowManager = this.table.rowManager;\n      e.preventDefault();\n\n      if (rowManager.displayRowsCount) {\n        rowManager.scrollToRow(rowManager.getDisplayRows()[rowManager.displayRowsCount - 1]);\n      }\n\n      this.table.element.focus();\n    },\n    navPrev: function navPrev(e) {\n      var cell = false;\n\n      if (this.table.modExists(\"edit\")) {\n        cell = this.table.modules.edit.currentCell;\n\n        if (cell) {\n          e.preventDefault();\n          cell.nav().prev();\n        }\n      }\n    },\n    navNext: function navNext(e) {\n      var cell = false;\n\n      if (this.table.modExists(\"edit\")) {\n        cell = this.table.modules.edit.currentCell;\n\n        if (cell) {\n          e.preventDefault();\n          cell.nav().next();\n        }\n      }\n    },\n    navLeft: function navLeft(e) {\n      var cell = false;\n\n      if (this.table.modExists(\"edit\")) {\n        cell = this.table.modules.edit.currentCell;\n\n        if (cell) {\n          e.preventDefault();\n          cell.nav().left();\n        }\n      }\n    },\n    navRight: function navRight(e) {\n      var cell = false;\n\n      if (this.table.modExists(\"edit\")) {\n        cell = this.table.modules.edit.currentCell;\n\n        if (cell) {\n          e.preventDefault();\n          cell.nav().right();\n        }\n      }\n    },\n    navUp: function navUp(e) {\n      var cell = false;\n\n      if (this.table.modExists(\"edit\")) {\n        cell = this.table.modules.edit.currentCell;\n\n        if (cell) {\n          e.preventDefault();\n          cell.nav().up();\n        }\n      }\n    },\n    navDown: function navDown(e) {\n      var cell = false;\n\n      if (this.table.modExists(\"edit\")) {\n        cell = this.table.modules.edit.currentCell;\n\n        if (cell) {\n          e.preventDefault();\n          cell.nav().down();\n        }\n      }\n    },\n    undo: function undo(e) {\n      var cell = false;\n\n      if (this.table.options.history && this.table.modExists(\"history\") && this.table.modExists(\"edit\")) {\n        cell = this.table.modules.edit.currentCell;\n\n        if (!cell) {\n          e.preventDefault();\n          this.table.modules.history.undo();\n        }\n      }\n    },\n    redo: function redo(e) {\n      var cell = false;\n\n      if (this.table.options.history && this.table.modExists(\"history\") && this.table.modExists(\"edit\")) {\n        cell = this.table.modules.edit.currentCell;\n\n        if (!cell) {\n          e.preventDefault();\n          this.table.modules.history.redo();\n        }\n      }\n    },\n    copyToClipboard: function copyToClipboard(e) {\n      if (!this.table.modules.edit.currentCell) {\n        if (this.table.modExists(\"clipboard\", true)) {\n          this.table.modules.clipboard.copy(!this.table.options.selectable || this.table.options.selectable == \"highlight\" ? \"active\" : \"selected\", null, null, null, true);\n        }\n      }\n    }\n  };\n  Tabulator.prototype.registerModule(\"keybindings\", Keybindings);\n\n  var MoveColumns = function MoveColumns(table) {\n    this.table = table; //hold Tabulator object\n\n    this.placeholderElement = this.createPlaceholderElement();\n    this.hoverElement = false; //floating column header element\n\n    this.checkTimeout = false; //click check timeout holder\n\n    this.checkPeriod = 250; //period to wait on mousedown to consider this a move and not a click\n\n    this.moving = false; //currently moving column\n\n    this.toCol = false; //destination column\n\n    this.toColAfter = false; //position of moving column relative to the desitnation column\n\n    this.startX = 0; //starting position within header element\n\n    this.autoScrollMargin = 40; //auto scroll on edge when within margin\n\n    this.autoScrollStep = 5; //auto scroll distance in pixels\n\n    this.autoScrollTimeout = false; //auto scroll timeout\n\n    this.moveHover = this.moveHover.bind(this);\n    this.endMove = this.endMove.bind(this);\n  };\n\n  MoveColumns.prototype.createPlaceholderElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-col\");\n    el.classList.add(\"tabulator-col-placeholder\");\n    return el;\n  };\n\n  MoveColumns.prototype.initializeColumn = function (column) {\n    var self = this,\n        config = {},\n        colEl;\n\n    if (!column.modules.frozen) {\n      colEl = column.getElement();\n\n      config.mousemove = function (e) {\n        if (column.parent === self.moving.parent) {\n          if (e.pageX - Tabulator.prototype.helpers.elOffset(colEl).left + self.table.columnManager.element.scrollLeft > column.getWidth() / 2) {\n            if (self.toCol !== column || !self.toColAfter) {\n              colEl.parentNode.insertBefore(self.placeholderElement, colEl.nextSibling);\n              self.moveColumn(column, true);\n            }\n          } else {\n            if (self.toCol !== column || self.toColAfter) {\n              colEl.parentNode.insertBefore(self.placeholderElement, colEl);\n              self.moveColumn(column, false);\n            }\n          }\n        }\n      }.bind(self);\n\n      colEl.addEventListener(\"mousedown\", function (e) {\n        if (e.which === 1) {\n          self.checkTimeout = setTimeout(function () {\n            self.startMove(e, column);\n          }, self.checkPeriod);\n        }\n      });\n      colEl.addEventListener(\"mouseup\", function (e) {\n        if (e.which === 1) {\n          if (self.checkTimeout) {\n            clearTimeout(self.checkTimeout);\n          }\n        }\n      });\n    }\n\n    column.modules.moveColumn = config;\n  };\n\n  MoveColumns.prototype.startMove = function (e, column) {\n    var element = column.getElement();\n    this.moving = column;\n    this.startX = e.pageX - Tabulator.prototype.helpers.elOffset(element).left;\n    this.table.element.classList.add(\"tabulator-block-select\"); //create placeholder\n\n    this.placeholderElement.style.width = column.getWidth() + \"px\";\n    this.placeholderElement.style.height = column.getHeight() + \"px\";\n    element.parentNode.insertBefore(this.placeholderElement, element);\n    element.parentNode.removeChild(element); //create hover element\n\n    this.hoverElement = element.cloneNode(true);\n    this.hoverElement.classList.add(\"tabulator-moving\");\n    this.table.columnManager.getElement().appendChild(this.hoverElement);\n    this.hoverElement.style.left = \"0\";\n    this.hoverElement.style.bottom = \"0\";\n\n    this._bindMouseMove();\n\n    document.body.addEventListener(\"mousemove\", this.moveHover);\n    document.body.addEventListener(\"mouseup\", this.endMove);\n    this.moveHover(e);\n  };\n\n  MoveColumns.prototype._bindMouseMove = function () {\n    this.table.columnManager.columnsByIndex.forEach(function (column) {\n      if (column.modules.moveColumn.mousemove) {\n        column.getElement().addEventListener(\"mousemove\", column.modules.moveColumn.mousemove);\n      }\n    });\n  };\n\n  MoveColumns.prototype._unbindMouseMove = function () {\n    this.table.columnManager.columnsByIndex.forEach(function (column) {\n      if (column.modules.moveColumn.mousemove) {\n        column.getElement().removeEventListener(\"mousemove\", column.modules.moveColumn.mousemove);\n      }\n    });\n  };\n\n  MoveColumns.prototype.moveColumn = function (column, after) {\n    var movingCells = this.moving.getCells();\n    this.toCol = column;\n    this.toColAfter = after;\n\n    if (after) {\n      column.getCells().forEach(function (cell, i) {\n        var cellEl = cell.getElement();\n        cellEl.parentNode.insertBefore(movingCells[i].getElement(), cellEl.nextSibling);\n      });\n    } else {\n      column.getCells().forEach(function (cell, i) {\n        var cellEl = cell.getElement();\n        cellEl.parentNode.insertBefore(movingCells[i].getElement(), cellEl);\n      });\n    }\n  };\n\n  MoveColumns.prototype.endMove = function (e) {\n    if (e.which === 1) {\n      this._unbindMouseMove();\n\n      this.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling);\n      this.placeholderElement.parentNode.removeChild(this.placeholderElement);\n      this.hoverElement.parentNode.removeChild(this.hoverElement);\n      this.table.element.classList.remove(\"tabulator-block-select\");\n\n      if (this.toCol) {\n        this.table.columnManager.moveColumn(this.moving, this.toCol, this.toColAfter);\n      }\n\n      this.moving = false;\n      this.toCol = false;\n      this.toColAfter = false;\n      document.body.removeEventListener(\"mousemove\", this.moveHover);\n      document.body.removeEventListener(\"mouseup\", this.endMove);\n    }\n  };\n\n  MoveColumns.prototype.moveHover = function (e) {\n    var self = this,\n        columnHolder = self.table.columnManager.getElement(),\n        scrollLeft = columnHolder.scrollLeft,\n        xPos = e.pageX - Tabulator.prototype.helpers.elOffset(columnHolder).left + scrollLeft,\n        scrollPos;\n    self.hoverElement.style.left = xPos - self.startX + \"px\";\n\n    if (xPos - scrollLeft < self.autoScrollMargin) {\n      if (!self.autoScrollTimeout) {\n        self.autoScrollTimeout = setTimeout(function () {\n          scrollPos = Math.max(0, scrollLeft - 5);\n          self.table.rowManager.getElement().scrollLeft = scrollPos;\n          self.autoScrollTimeout = false;\n        }, 1);\n      }\n    }\n\n    if (scrollLeft + columnHolder.clientWidth - xPos < self.autoScrollMargin) {\n      if (!self.autoScrollTimeout) {\n        self.autoScrollTimeout = setTimeout(function () {\n          scrollPos = Math.min(columnHolder.clientWidth, scrollLeft + 5);\n          self.table.rowManager.getElement().scrollLeft = scrollPos;\n          self.autoScrollTimeout = false;\n        }, 1);\n      }\n    }\n  };\n\n  Tabulator.prototype.registerModule(\"moveColumn\", MoveColumns);\n\n  var MoveRows = function MoveRows(table) {\n    this.table = table; //hold Tabulator object\n\n    this.placeholderElement = this.createPlaceholderElement();\n    this.hoverElement = false; //floating row header element\n\n    this.checkTimeout = false; //click check timeout holder\n\n    this.checkPeriod = 150; //period to wait on mousedown to consider this a move and not a click\n\n    this.moving = false; //currently moving row\n\n    this.toRow = false; //destination row\n\n    this.toRowAfter = false; //position of moving row relative to the desitnation row\n\n    this.hasHandle = false; //row has handle instead of fully movable row\n\n    this.startY = 0; //starting Y position within header element\n\n    this.startX = 0; //starting X position within header element\n\n    this.moveHover = this.moveHover.bind(this);\n    this.endMove = this.endMove.bind(this);\n    this.tableRowDropEvent = false;\n    this.connection = false;\n    this.connections = [];\n    this.connectedTable = false;\n    this.connectedRow = false;\n  };\n\n  MoveRows.prototype.createPlaceholderElement = function () {\n    var el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-row\");\n    el.classList.add(\"tabulator-row-placeholder\");\n    return el;\n  };\n\n  MoveRows.prototype.initialize = function (handle) {\n    this.connection = this.table.options.movableRowsConnectedTables;\n  };\n\n  MoveRows.prototype.setHandle = function (handle) {\n    this.hasHandle = handle;\n  };\n\n  MoveRows.prototype.initializeRow = function (row) {\n    var self = this,\n        config = {},\n        rowEl; //inter table drag drop\n\n    config.mouseup = function (e) {\n      self.tableRowDrop(e, row);\n    }.bind(self); //same table drag drop\n\n\n    config.mousemove = function (e) {\n      if (e.pageY - Tabulator.prototype.helpers.elOffset(row.element).top + self.table.rowManager.element.scrollTop > row.getHeight() / 2) {\n        if (self.toRow !== row || !self.toRowAfter) {\n          var rowEl = row.getElement();\n          rowEl.parentNode.insertBefore(self.placeholderElement, rowEl.nextSibling);\n          self.moveRow(row, true);\n        }\n      } else {\n        if (self.toRow !== row || self.toRowAfter) {\n          var rowEl = row.getElement();\n          rowEl.parentNode.insertBefore(self.placeholderElement, rowEl);\n          self.moveRow(row, false);\n        }\n      }\n    }.bind(self);\n\n    if (!this.hasHandle) {\n      rowEl = row.getElement();\n      rowEl.addEventListener(\"mousedown\", function (e) {\n        if (e.which === 1) {\n          self.checkTimeout = setTimeout(function () {\n            self.startMove(e, row);\n          }, self.checkPeriod);\n        }\n      });\n      rowEl.addEventListener(\"mouseup\", function (e) {\n        if (e.which === 1) {\n          if (self.checkTimeout) {\n            clearTimeout(self.checkTimeout);\n          }\n        }\n      });\n    }\n\n    row.modules.moveRow = config;\n  };\n\n  MoveRows.prototype.initializeCell = function (cell) {\n    var self = this,\n        cellEl = cell.getElement();\n    cellEl.addEventListener(\"mousedown\", function (e) {\n      if (e.which === 1) {\n        self.checkTimeout = setTimeout(function () {\n          self.startMove(e, cell.row);\n        }, self.checkPeriod);\n      }\n    });\n    cellEl.addEventListener(\"mouseup\", function (e) {\n      if (e.which === 1) {\n        if (self.checkTimeout) {\n          clearTimeout(self.checkTimeout);\n        }\n      }\n    });\n  };\n\n  MoveRows.prototype._bindMouseMove = function () {\n    var self = this;\n    self.table.rowManager.getDisplayRows().forEach(function (row) {\n      if (row.type === \"row\" && row.modules.moveRow.mousemove) {\n        row.getElement().addEventListener(\"mousemove\", row.modules.moveRow.mousemove);\n      }\n    });\n  };\n\n  MoveRows.prototype._unbindMouseMove = function () {\n    var self = this;\n    self.table.rowManager.getDisplayRows().forEach(function (row) {\n      if (row.type === \"row\" && row.modules.moveRow.mousemove) {\n        row.getElement().removeEventListener(\"mousemove\", row.modules.moveRow.mousemove);\n      }\n    });\n  };\n\n  MoveRows.prototype.startMove = function (e, row) {\n    var element = row.getElement();\n    this.setStartPosition(e, row);\n    this.moving = row;\n    this.table.element.classList.add(\"tabulator-block-select\"); //create placeholder\n\n    this.placeholderElement.style.width = row.getWidth() + \"px\";\n    this.placeholderElement.style.height = row.getHeight() + \"px\";\n\n    if (!this.connection) {\n      element.parentNode.insertBefore(this.placeholderElement, element);\n      element.parentNode.removeChild(element);\n    } else {\n      this.table.element.classList.add(\"tabulator-movingrow-sending\");\n      this.connectToTables(row);\n    } //create hover element\n\n\n    this.hoverElement = element.cloneNode(true);\n    this.hoverElement.classList.add(\"tabulator-moving\");\n\n    if (this.connection) {\n      document.body.appendChild(this.hoverElement);\n      this.hoverElement.style.left = \"0\";\n      this.hoverElement.style.top = \"0\";\n      this.hoverElement.style.width = this.table.element.clientWidth + \"px\";\n      this.hoverElement.style.whiteSpace = \"nowrap\";\n      this.hoverElement.style.overflow = \"hidden\";\n      this.hoverElement.style.pointerEvents = \"none\";\n    } else {\n      this.table.rowManager.getTableElement().appendChild(this.hoverElement);\n      this.hoverElement.style.left = \"0\";\n      this.hoverElement.style.top = \"0\";\n\n      this._bindMouseMove();\n    }\n\n    document.body.addEventListener(\"mousemove\", this.moveHover);\n    document.body.addEventListener(\"mouseup\", this.endMove);\n    this.moveHover(e);\n  };\n\n  MoveRows.prototype.setStartPosition = function (e, row) {\n    var element, position;\n    element = row.getElement();\n\n    if (this.connection) {\n      position = element.getBoundingClientRect();\n      this.startX = position.left - e.pageX + window.scrollX;\n      this.startY = position.top - e.pageY + window.scrollY;\n    } else {\n      this.startY = e.pageY - element.getBoundingClientRect().top;\n    }\n  };\n\n  MoveRows.prototype.endMove = function (e) {\n    if (!e || e.which === 1) {\n      this._unbindMouseMove();\n\n      if (!this.connection) {\n        this.placeholderElement.parentNode.insertBefore(this.moving.getElement(), this.placeholderElement.nextSibling);\n        this.placeholderElement.parentNode.removeChild(this.placeholderElement);\n      }\n\n      this.hoverElement.parentNode.removeChild(this.hoverElement);\n      this.table.element.classList.remove(\"tabulator-block-select\");\n\n      if (this.toRow) {\n        this.table.rowManager.moveRow(this.moving, this.toRow, this.toRowAfter);\n      }\n\n      this.moving = false;\n      this.toRow = false;\n      this.toRowAfter = false;\n      document.body.removeEventListener(\"mousemove\", this.moveHover);\n      document.body.removeEventListener(\"mouseup\", this.endMove);\n\n      if (this.connection) {\n        this.table.element.classList.remove(\"tabulator-movingrow-sending\");\n        this.disconnectFromTables();\n      }\n    }\n  };\n\n  MoveRows.prototype.moveRow = function (row, after) {\n    this.toRow = row;\n    this.toRowAfter = after;\n  };\n\n  MoveRows.prototype.moveHover = function (e) {\n    if (this.connection) {\n      this.moveHoverConnections.call(this, e);\n    } else {\n      this.moveHoverTable.call(this, e);\n    }\n  };\n\n  MoveRows.prototype.moveHoverTable = function (e) {\n    var rowHolder = this.table.rowManager.getElement(),\n        scrollTop = rowHolder.scrollTop,\n        yPos = e.pageY - rowHolder.getBoundingClientRect().top + scrollTop,\n        scrollPos;\n    this.hoverElement.style.top = yPos - this.startY + \"px\";\n  };\n\n  MoveRows.prototype.moveHoverConnections = function (e) {\n    this.hoverElement.style.left = this.startX + e.pageX + \"px\";\n    this.hoverElement.style.top = this.startY + e.pageY + \"px\";\n  }; //establish connection with other tables\n\n\n  MoveRows.prototype.connectToTables = function (row) {\n    var self = this,\n        connections = this.table.modules.comms.getConnections(this.connection);\n    this.table.options.movableRowsSendingStart.call(this.table, connections);\n    this.table.modules.comms.send(this.connection, \"moveRow\", \"connect\", {\n      row: row\n    });\n  }; //disconnect from other tables\n\n\n  MoveRows.prototype.disconnectFromTables = function () {\n    var self = this,\n        connections = this.table.modules.comms.getConnections(this.connection);\n    this.table.options.movableRowsSendingStop.call(this.table, connections);\n    this.table.modules.comms.send(this.connection, \"moveRow\", \"disconnect\");\n  }; //accept incomming connection\n\n\n  MoveRows.prototype.connect = function (table, row) {\n    var self = this;\n\n    if (!this.connectedTable) {\n      this.connectedTable = table;\n      this.connectedRow = row;\n      this.table.element.classList.add(\"tabulator-movingrow-receiving\");\n      self.table.rowManager.getDisplayRows().forEach(function (row) {\n        if (row.type === \"row\" && row.modules.moveRow && row.modules.moveRow.mouseup) {\n          row.getElement().addEventListener(\"mouseup\", row.modules.moveRow.mouseup);\n        }\n      });\n      self.tableRowDropEvent = self.tableRowDrop.bind(self);\n      self.table.element.addEventListener(\"mouseup\", self.tableRowDropEvent);\n      this.table.options.movableRowsReceivingStart.call(this.table, row, table);\n      return true;\n    } else {\n      console.warn(\"Move Row Error - Table cannot accept connection, already connected to table:\", this.connectedTable);\n      return false;\n    }\n  }; //close incomming connection\n\n\n  MoveRows.prototype.disconnect = function (table) {\n    var self = this;\n\n    if (table === this.connectedTable) {\n      this.connectedTable = false;\n      this.connectedRow = false;\n      this.table.element.classList.remove(\"tabulator-movingrow-receiving\");\n      self.table.rowManager.getDisplayRows().forEach(function (row) {\n        if (row.type === \"row\" && row.modules.moveRow && row.modules.moveRow.mouseup) {\n          row.getElement().removeEventListener(\"mouseup\", row.modules.moveRow.mouseup);\n        }\n      });\n      self.table.element.removeEventListener(\"mouseup\", self.tableRowDropEvent);\n      this.table.options.movableRowsReceivingStop.call(this.table, table);\n    } else {\n      console.warn(\"Move Row Error - trying to disconnect from non connected table\");\n    }\n  };\n\n  MoveRows.prototype.dropComplete = function (table, row, success) {\n    var sender = false;\n\n    if (success) {\n      switch (_typeof(this.table.options.movableRowsSender)) {\n        case \"string\":\n          sender = this.senders[this.table.options.movableRowsSender];\n          break;\n\n        case \"function\":\n          sender = this.table.options.movableRowsSender;\n          break;\n      }\n\n      if (sender) {\n        sender.call(this, this.moving.getComponent(), row ? row.getComponent() : undefined, table);\n      } else {\n        if (this.table.options.movableRowsSender) {\n          console.warn(\"Mover Row Error - no matching sender found:\", this.table.options.movableRowsSender);\n        }\n      }\n\n      this.table.options.movableRowsSent.call(this.table, this.moving.getComponent(), row ? row.getComponent() : undefined, table);\n    } else {\n      this.table.options.movableRowsSentFailed.call(this.table, this.moving.getComponent(), row ? row.getComponent() : undefined, table);\n    }\n\n    this.endMove();\n  };\n\n  MoveRows.prototype.tableRowDrop = function (e, row) {\n    var receiver = false,\n        success = false;\n    e.stopImmediatePropagation();\n\n    switch (_typeof(this.table.options.movableRowsReceiver)) {\n      case \"string\":\n        receiver = this.receivers[this.table.options.movableRowsReceiver];\n        break;\n\n      case \"function\":\n        receiver = this.table.options.movableRowsReceiver;\n        break;\n    }\n\n    if (receiver) {\n      success = receiver.call(this, this.connectedRow.getComponent(), row ? row.getComponent() : undefined, this.connectedTable);\n    } else {\n      console.warn(\"Mover Row Error - no matching receiver found:\", this.table.options.movableRowsReceiver);\n    }\n\n    if (success) {\n      this.table.options.movableRowsReceived.call(this.table, this.connectedRow.getComponent(), row ? row.getComponent() : undefined, this.connectedTable);\n    } else {\n      this.table.options.movableRowsReceivedFailed.call(this.table, this.connectedRow.getComponent(), row ? row.getComponent() : undefined, this.connectedTable);\n    }\n\n    this.table.modules.comms.send(this.connectedTable, \"moveRow\", \"dropcomplete\", {\n      row: row,\n      success: success\n    });\n  };\n\n  MoveRows.prototype.receivers = {\n    insert: function insert(fromRow, toRow, fromTable) {\n      this.table.addRow(fromRow.getData(), undefined, toRow);\n      return true;\n    },\n    add: function add(fromRow, toRow, fromTable) {\n      this.table.addRow(fromRow.getData());\n      return true;\n    },\n    update: function update(fromRow, toRow, fromTable) {\n      if (toRow) {\n        toRow.update(fromRow.getData());\n        return true;\n      }\n\n      return false;\n    },\n    replace: function replace(fromRow, toRow, fromTable) {\n      if (toRow) {\n        this.table.addRow(fromRow.getData(), undefined, toRow);\n        toRow.delete();\n        return true;\n      }\n\n      return false;\n    }\n  };\n  MoveRows.prototype.senders = {\n    delete: function _delete(fromRow, toRow, toTable) {\n      fromRow.delete();\n    }\n  };\n\n  MoveRows.prototype.commsReceived = function (table, action, data) {\n    switch (action) {\n      case \"connect\":\n        return this.connect(table, data.row);\n        break;\n\n      case \"disconnect\":\n        return this.disconnect(table);\n        break;\n\n      case \"dropcomplete\":\n        return this.dropComplete(table, data.row, data.success);\n        break;\n    }\n  };\n\n  Tabulator.prototype.registerModule(\"moveRow\", MoveRows);\n\n  var Mutator = function Mutator(table) {\n    this.table = table; //hold Tabulator object\n\n    this.allowedTypes = [\"\", \"data\", \"edit\", \"clipboard\"]; //list of muatation types\n\n    this.enabled = true;\n  }; //initialize column mutator\n\n\n  Mutator.prototype.initializeColumn = function (column) {\n    var self = this,\n        match = false,\n        config = {};\n    this.allowedTypes.forEach(function (type) {\n      var key = \"mutator\" + (type.charAt(0).toUpperCase() + type.slice(1)),\n          mutator;\n\n      if (column.definition[key]) {\n        mutator = self.lookupMutator(column.definition[key]);\n\n        if (mutator) {\n          match = true;\n          config[key] = {\n            mutator: mutator,\n            params: column.definition[key + \"Params\"] || {}\n          };\n        }\n      }\n    });\n\n    if (match) {\n      column.modules.mutate = config;\n    }\n  };\n\n  Mutator.prototype.lookupMutator = function (value) {\n    var mutator = false; //set column mutator\n\n    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n      case \"string\":\n        if (this.mutators[value]) {\n          mutator = this.mutators[value];\n        } else {\n          console.warn(\"Mutator Error - No such mutator found, ignoring: \", value);\n        }\n\n        break;\n\n      case \"function\":\n        mutator = value;\n        break;\n    }\n\n    return mutator;\n  }; //apply mutator to row\n\n\n  Mutator.prototype.transformRow = function (data, type, update) {\n    var self = this,\n        key = \"mutator\" + (type.charAt(0).toUpperCase() + type.slice(1)),\n        value;\n\n    if (this.enabled) {\n      self.table.columnManager.traverse(function (column) {\n        var mutator, params, component;\n\n        if (column.modules.mutate) {\n          mutator = column.modules.mutate[key] || column.modules.mutate.mutator || false;\n\n          if (mutator) {\n            value = column.getFieldValue(data);\n\n            if (!update || update && typeof value !== \"undefined\") {\n              component = column.getComponent();\n              params = typeof mutator.params === \"function\" ? mutator.params(value, data, type, component) : mutator.params;\n              column.setFieldValue(data, mutator.mutator(value, data, type, params, component));\n            }\n          }\n        }\n      });\n    }\n\n    return data;\n  }; //apply mutator to new cell value\n\n\n  Mutator.prototype.transformCell = function (cell, value) {\n    var mutator = cell.column.modules.mutate.mutatorEdit || cell.column.modules.mutate.mutator || false;\n\n    if (mutator) {\n      return mutator.mutator(value, cell.row.getData(), \"edit\", mutator.params, cell.getComponent());\n    } else {\n      return value;\n    }\n  };\n\n  Mutator.prototype.enable = function () {\n    this.enabled = true;\n  };\n\n  Mutator.prototype.disable = function () {\n    this.enabled = false;\n  }; //default mutators\n\n\n  Mutator.prototype.mutators = {};\n  Tabulator.prototype.registerModule(\"mutator\", Mutator);\n\n  var Page = function Page(table) {\n    this.table = table; //hold Tabulator object\n\n    this.mode = \"local\";\n    this.progressiveLoad = false;\n    this.size = 0;\n    this.page = 1;\n    this.count = 5;\n    this.max = 1;\n    this.displayIndex = 0; //index in display pipeline\n\n    this.createElements();\n  };\n\n  Page.prototype.createElements = function () {\n    var button;\n    this.element = document.createElement(\"span\");\n    this.element.classList.add(\"tabulator-paginator\");\n    this.pagesElement = document.createElement(\"span\");\n    this.pagesElement.classList.add(\"tabulator-pages\");\n    button = document.createElement(\"button\");\n    button.classList.add(\"tabulator-page\");\n    button.setAttribute(\"type\", \"button\");\n    button.setAttribute(\"role\", \"button\");\n    button.setAttribute(\"aria-label\", \"\");\n    button.setAttribute(\"title\", \"\");\n    this.firstBut = button.cloneNode(true);\n    this.firstBut.setAttribute(\"data-page\", \"first\");\n    this.prevBut = button.cloneNode(true);\n    this.prevBut.setAttribute(\"data-page\", \"prev\");\n    this.nextBut = button.cloneNode(true);\n    this.nextBut.setAttribute(\"data-page\", \"next\");\n    this.lastBut = button.cloneNode(true);\n    this.lastBut.setAttribute(\"data-page\", \"last\");\n  }; //setup pageination\n\n\n  Page.prototype.initialize = function (hidden) {\n    var self = this; //update param names\n\n    for (var key in self.table.options.paginationDataSent) {\n      self.paginationDataSentNames[key] = self.table.options.paginationDataSent[key];\n    }\n\n    for (var _key2 in self.table.options.paginationDataReceived) {\n      self.paginationDataReceivedNames[_key2] = self.table.options.paginationDataReceived[_key2];\n    } //build pagination element\n    //bind localizations\n\n\n    self.table.modules.localize.bind(\"pagination|first\", function (value) {\n      self.firstBut.innerHTML = value;\n    });\n    self.table.modules.localize.bind(\"pagination|first_title\", function (value) {\n      self.firstBut.setAttribute(\"aria-label\", value);\n      self.firstBut.setAttribute(\"title\", value);\n    });\n    self.table.modules.localize.bind(\"pagination|prev\", function (value) {\n      self.prevBut.innerHTML = value;\n    });\n    self.table.modules.localize.bind(\"pagination|prev_title\", function (value) {\n      self.prevBut.setAttribute(\"aria-label\", value);\n      self.prevBut.setAttribute(\"title\", value);\n    });\n    self.table.modules.localize.bind(\"pagination|next\", function (value) {\n      self.nextBut.innerHTML = value;\n    });\n    self.table.modules.localize.bind(\"pagination|next_title\", function (value) {\n      self.nextBut.setAttribute(\"aria-label\", value);\n      self.nextBut.setAttribute(\"title\", value);\n    });\n    self.table.modules.localize.bind(\"pagination|last\", function (value) {\n      self.lastBut.innerHTML = value;\n    });\n    self.table.modules.localize.bind(\"pagination|last_title\", function (value) {\n      self.lastBut.setAttribute(\"aria-label\", value);\n      self.lastBut.setAttribute(\"title\", value);\n    }); //click bindings\n\n    self.firstBut.addEventListener(\"click\", function () {\n      self.setPage(1);\n    });\n    self.prevBut.addEventListener(\"click\", function () {\n      self.previousPage();\n    });\n    self.nextBut.addEventListener(\"click\", function () {\n      self.nextPage().then(function () {}).catch(function () {});\n    });\n    self.lastBut.addEventListener(\"click\", function () {\n      self.setPage(self.max);\n    });\n\n    if (self.table.options.paginationElement) {\n      self.element = self.table.options.paginationElement;\n    } //append to DOM\n\n\n    self.element.appendChild(self.firstBut);\n    self.element.appendChild(self.prevBut);\n    self.element.appendChild(self.pagesElement);\n    self.element.appendChild(self.nextBut);\n    self.element.appendChild(self.lastBut);\n\n    if (!self.table.options.paginationElement && !hidden) {\n      self.table.footerManager.append(self.element, self);\n    } //set default values\n\n\n    self.mode = self.table.options.pagination;\n    self.size = self.table.options.paginationSize || Math.floor(self.table.rowManager.getElement().clientHeight / 24);\n    self.count = self.table.options.paginationButtonCount;\n  };\n\n  Page.prototype.initializeProgressive = function (mode) {\n    this.initialize(true);\n    this.mode = \"progressive_\" + mode;\n    this.progressiveLoad = true;\n  };\n\n  Page.prototype.setDisplayIndex = function (index) {\n    this.displayIndex = index;\n  };\n\n  Page.prototype.getDisplayIndex = function () {\n    return this.displayIndex;\n  }; //calculate maximum page from number of rows\n\n\n  Page.prototype.setMaxRows = function (rowCount) {\n    if (!rowCount) {\n      this.max = 1;\n    } else {\n      this.max = Math.ceil(rowCount / this.size);\n    }\n\n    if (this.page > this.max) {\n      this.page = this.max;\n    }\n  }; //reset to first page without triggering action\n\n\n  Page.prototype.reset = function (force) {\n    if (this.mode == \"local\" || force) {\n      this.page = 1;\n    }\n\n    return true;\n  }; //set the maxmum page\n\n\n  Page.prototype.setMaxPage = function (max) {\n    this.max = max || 1;\n\n    if (this.page > this.max) {\n      this.page = this.max;\n      this.trigger();\n    }\n  }; //set current page number\n\n\n  Page.prototype.setPage = function (page) {\n    var _this33 = this;\n\n    return new Promise(function (resolve, reject) {\n      if (page > 0 && page <= _this33.max) {\n        _this33.page = page;\n\n        _this33.trigger().then(function () {\n          resolve();\n        }).catch(function () {\n          reject();\n        });\n      } else {\n        console.warn(\"Pagination Error - Requested page is out of range of 1 - \" + _this33.max + \":\", page);\n        reject();\n      }\n    });\n  };\n\n  Page.prototype.setPageSize = function (size) {\n    if (size > 0) {\n      this.size = size;\n    }\n  }; //setup the pagination buttons\n\n\n  Page.prototype._setPageButtons = function () {\n    var self = this;\n    var leftSize = Math.floor((this.count - 1) / 2);\n    var rightSize = Math.ceil((this.count - 1) / 2);\n    var min = this.max - this.page + leftSize + 1 < this.count ? this.max - this.count + 1 : Math.max(this.page - leftSize, 1);\n    var max = this.page <= rightSize ? Math.min(this.count, this.max) : Math.min(this.page + rightSize, this.max);\n\n    while (self.pagesElement.firstChild) {\n      self.pagesElement.removeChild(self.pagesElement.firstChild);\n    }\n\n    if (self.page == 1) {\n      self.firstBut.disabled = true;\n      self.prevBut.disabled = true;\n    } else {\n      self.firstBut.disabled = false;\n      self.prevBut.disabled = false;\n    }\n\n    if (self.page == self.max) {\n      self.lastBut.disabled = true;\n      self.nextBut.disabled = true;\n    } else {\n      self.lastBut.disabled = false;\n      self.nextBut.disabled = false;\n    }\n\n    for (var i = min; i <= max; i++) {\n      if (i > 0 && i <= self.max) {\n        self.pagesElement.appendChild(self._generatePageButton(i));\n      }\n    }\n\n    this.footerRedraw();\n  };\n\n  Page.prototype._generatePageButton = function (page) {\n    var self = this,\n        button = document.createElement(\"button\");\n    button.classList.add(\"tabulator-page\");\n\n    if (page == self.page) {\n      button.classList.add(\"active\");\n    }\n\n    button.setAttribute(\"type\", \"button\");\n    button.setAttribute(\"role\", \"button\");\n    button.setAttribute(\"aria-label\", \"Show Page \" + page);\n    button.setAttribute(\"title\", \"Show Page \" + page);\n    button.setAttribute(\"data-page\", page);\n    button.textContent = page;\n    button.addEventListener(\"click\", function (e) {\n      self.setPage(page);\n    });\n    return button;\n  }; //previous page\n\n\n  Page.prototype.previousPage = function () {\n    var _this34 = this;\n\n    return new Promise(function (resolve, reject) {\n      if (_this34.page > 1) {\n        _this34.page--;\n\n        _this34.trigger().then(function () {\n          resolve();\n        }).catch(function () {\n          reject();\n        });\n      } else {\n        console.warn(\"Pagination Error - Previous page would be less than page 1:\", 0);\n        reject();\n      }\n    });\n  }; //next page\n\n\n  Page.prototype.nextPage = function () {\n    var _this35 = this;\n\n    return new Promise(function (resolve, reject) {\n      if (_this35.page < _this35.max) {\n        _this35.page++;\n\n        _this35.trigger().then(function () {\n          resolve();\n        }).catch(function () {\n          reject();\n        });\n      } else {\n        if (!_this35.progressiveLoad) {\n          console.warn(\"Pagination Error - Next page would be greater than maximum page of \" + _this35.max + \":\", _this35.max + 1);\n        }\n\n        reject();\n      }\n    });\n  }; //return current page number\n\n\n  Page.prototype.getPage = function () {\n    return this.page;\n  }; //return max page number\n\n\n  Page.prototype.getPageMax = function () {\n    return this.max;\n  };\n\n  Page.prototype.getPageSize = function (size) {\n    return this.size;\n  };\n\n  Page.prototype.getMode = function () {\n    return this.mode;\n  }; //return appropriate rows for current page\n\n\n  Page.prototype.getRows = function (data) {\n    var output, start, end;\n\n    if (this.mode == \"local\") {\n      output = [];\n      start = this.size * (this.page - 1);\n      end = start + parseInt(this.size);\n\n      this._setPageButtons();\n\n      for (var i = start; i < end; i++) {\n        if (data[i]) {\n          output.push(data[i]);\n        }\n      }\n\n      return output;\n    } else {\n      this._setPageButtons();\n\n      return data.slice(0);\n    }\n  };\n\n  Page.prototype.trigger = function () {\n    var _this36 = this;\n\n    var left;\n    return new Promise(function (resolve, reject) {\n      switch (_this36.mode) {\n        case \"local\":\n          left = _this36.table.rowManager.scrollLeft;\n\n          _this36.table.rowManager.refreshActiveData(\"page\");\n\n          _this36.table.rowManager.scrollHorizontal(left);\n\n          _this36.table.options.pageLoaded.call(_this36.table, _this36.getPage());\n\n          resolve();\n          break;\n\n        case \"remote\":\n        case \"progressive_load\":\n        case \"progressive_scroll\":\n          _this36.table.modules.ajax.blockActiveRequest();\n\n          _this36._getRemotePage().then(function () {\n            resolve();\n          }).catch(function () {\n            reject();\n          });\n\n          break;\n\n        default:\n          console.warn(\"Pagination Error - no such pagination mode:\", _this36.mode);\n          reject();\n      }\n    });\n  };\n\n  Page.prototype._getRemotePage = function () {\n    var _this37 = this;\n\n    var self = this,\n        oldParams,\n        pageParams;\n    return new Promise(function (resolve, reject) {\n      if (!self.table.modExists(\"ajax\", true)) {\n        reject();\n      } //record old params and restore after request has been made\n\n\n      oldParams = Tabulator.prototype.helpers.deepClone(self.table.modules.ajax.getParams() || {});\n      pageParams = self.table.modules.ajax.getParams(); //configure request params\n\n      pageParams[_this37.paginationDataSentNames.page] = self.page; //set page size if defined\n\n      if (_this37.size) {\n        pageParams[_this37.paginationDataSentNames.size] = _this37.size;\n      } //set sort data if defined\n\n\n      if (_this37.table.options.ajaxSorting && _this37.table.modExists(\"sort\")) {\n        var sorters = self.table.modules.sort.getSort();\n        sorters.forEach(function (item) {\n          delete item.column;\n        });\n        pageParams[_this37.paginationDataSentNames.sorters] = sorters;\n      } //set filter data if defined\n\n\n      if (_this37.table.options.ajaxFiltering && _this37.table.modExists(\"filter\")) {\n        var filters = self.table.modules.filter.getFilters(true, true);\n        pageParams[_this37.paginationDataSentNames.filters] = filters;\n      }\n\n      self.table.modules.ajax.setParams(pageParams);\n      self.table.modules.ajax.sendRequest(_this37.progressiveLoad).then(function (data) {\n        self._parseRemoteData(data);\n\n        resolve();\n      }).catch(function (e) {\n        reject();\n      });\n      self.table.modules.ajax.setParams(oldParams);\n    });\n  };\n\n  Page.prototype._parseRemoteData = function (data) {\n    var self = this,\n        left,\n        data,\n        margin;\n\n    if (typeof data[this.paginationDataReceivedNames.last_page] === \"undefined\") {\n      console.warn(\"Remote Pagination Error - Server response missing '\" + this.paginationDataReceivedNames.last_page + \"' property\");\n    }\n\n    if (data[this.paginationDataReceivedNames.data]) {\n      this.max = parseInt(data[this.paginationDataReceivedNames.last_page]) || 1;\n\n      if (this.progressiveLoad) {\n        switch (this.mode) {\n          case \"progressive_load\":\n            this.table.rowManager.addRows(data[this.paginationDataReceivedNames.data]);\n\n            if (this.page < this.max) {\n              setTimeout(function () {\n                self.nextPage().then(function () {}).catch(function () {});\n              }, self.table.options.ajaxProgressiveLoadDelay);\n            }\n\n            break;\n\n          case \"progressive_scroll\":\n            data = this.table.rowManager.getData().concat(data[this.paginationDataReceivedNames.data]);\n            this.table.rowManager.setData(data, true);\n            margin = this.table.options.ajaxProgressiveLoadScrollMargin || this.table.rowManager.element.clientHeight * 2;\n\n            if (self.table.rowManager.element.scrollHeight <= self.table.rowManager.element.clientHeight + margin) {\n              self.nextPage().then(function () {}).catch(function () {});\n            }\n\n            break;\n        }\n      } else {\n        left = this.table.rowManager.scrollLeft;\n        this.table.rowManager.setData(data[this.paginationDataReceivedNames.data]);\n        this.table.rowManager.scrollHorizontal(left);\n        this.table.columnManager.scrollHorizontal(left);\n        this.table.options.pageLoaded.call(this.table, this.getPage());\n      }\n    } else {\n      console.warn(\"Remote Pagination Error - Server response missing '\" + this.paginationDataReceivedNames.data + \"' property\");\n    }\n  }; //handle the footer element being redrawn\n\n\n  Page.prototype.footerRedraw = function () {\n    var footer = this.table.footerManager.element;\n\n    if (Math.ceil(footer.clientWidth) - footer.scrollWidth < 0) {\n      this.pagesElement.style.display = 'none';\n    } else {\n      this.pagesElement.style.display = '';\n\n      if (Math.ceil(footer.clientWidth) - footer.scrollWidth < 0) {\n        this.pagesElement.style.display = 'none';\n      }\n    }\n  }; //set the paramter names for pagination requests\n\n\n  Page.prototype.paginationDataSentNames = {\n    \"page\": \"page\",\n    \"size\": \"size\",\n    \"sorters\": \"sorters\",\n    // \"sort_dir\":\"sort_dir\",\n    \"filters\": \"filters\"\n  }; //set the property names for pagination responses\n\n  Page.prototype.paginationDataReceivedNames = {\n    \"current_page\": \"current_page\",\n    \"last_page\": \"last_page\",\n    \"data\": \"data\"\n  };\n  Tabulator.prototype.registerModule(\"page\", Page);\n\n  var Persistence = function Persistence(table) {\n    this.table = table; //hold Tabulator object\n\n    this.mode = \"\";\n    this.id = \"\";\n    this.persistProps = [\"field\", \"width\", \"visible\"];\n  }; //setup parameters\n\n\n  Persistence.prototype.initialize = function (mode, id) {\n    //determine persistent layout storage type\n    this.mode = mode !== true ? mode : typeof window.localStorage !== 'undefined' ? \"local\" : \"cookie\"; //set storage tag\n\n    this.id = \"tabulator-\" + (id || this.table.element.getAttribute(\"id\") || \"\");\n  }; //load saved definitions\n\n\n  Persistence.prototype.load = function (type, current) {\n    var data = this.retreiveData(type);\n\n    if (current) {\n      data = data ? this.mergeDefinition(current, data) : current;\n    }\n\n    return data;\n  }; //retreive data from memory\n\n\n  Persistence.prototype.retreiveData = function (type) {\n    var data = \"\",\n        id = this.id + (type === \"columns\" ? \"\" : \"-\" + type);\n\n    switch (this.mode) {\n      case \"local\":\n        data = localStorage.getItem(id);\n        break;\n\n      case \"cookie\":\n        //find cookie\n        var cookie = document.cookie,\n            cookiePos = cookie.indexOf(id + \"=\"),\n            end = void 0; //if cookie exists, decode and load column data into tabulator\n\n        if (cookiePos > -1) {\n          cookie = cookie.substr(cookiePos);\n          end = cookie.indexOf(\";\");\n\n          if (end > -1) {\n            cookie = cookie.substr(0, end);\n          }\n\n          data = cookie.replace(id + \"=\", \"\");\n        }\n\n        break;\n\n      default:\n        console.warn(\"Persistance Load Error - invalid mode selected\", this.mode);\n    }\n\n    return data ? JSON.parse(data) : false;\n  }; //merge old and new column defintions\n\n\n  Persistence.prototype.mergeDefinition = function (oldCols, newCols) {\n    var self = this,\n        output = []; // oldCols = oldCols || [];\n\n    newCols = newCols || [];\n    newCols.forEach(function (column, to) {\n      var from = self._findColumn(oldCols, column);\n\n      if (from) {\n        from.width = column.width;\n        from.visible = column.visible;\n\n        if (from.columns) {\n          from.columns = self.mergeDefinition(from.columns, column.columns);\n        }\n\n        output.push(from);\n      }\n    });\n    oldCols.forEach(function (column, i) {\n      var from = self._findColumn(newCols, column);\n\n      if (!from) {\n        if (output.length > i) {\n          output.splice(i, 0, column);\n        } else {\n          output.push(column);\n        }\n      }\n    });\n    return output;\n  }; //find matching columns\n\n\n  Persistence.prototype._findColumn = function (columns, subject) {\n    var type = subject.columns ? \"group\" : subject.field ? \"field\" : \"object\";\n    return columns.find(function (col) {\n      switch (type) {\n        case \"group\":\n          return col.title === subject.title && col.columns.length === subject.columns.length;\n          break;\n\n        case \"field\":\n          return col.field === subject.field;\n          break;\n\n        case \"object\":\n          return col === subject;\n          break;\n      }\n    });\n  }; //save data\n\n\n  Persistence.prototype.save = function (type) {\n    var data = {};\n\n    switch (type) {\n      case \"columns\":\n        data = this.parseColumns(this.table.columnManager.getColumns());\n        break;\n\n      case \"filter\":\n        data = this.table.modules.filter.getFilters();\n        break;\n\n      case \"sort\":\n        data = this.validateSorters(this.table.modules.sort.getSort());\n        break;\n    }\n\n    var id = this.id + (type === \"columns\" ? \"\" : \"-\" + type);\n    this.saveData(id, data);\n  }; //ensure sorters contain no function data\n\n\n  Persistence.prototype.validateSorters = function (data) {\n    data.forEach(function (item) {\n      item.column = item.field;\n      delete item.field;\n    });\n    return data;\n  }; //save data to chosed medium\n\n\n  Persistence.prototype.saveData = function (id, data) {\n    data = JSON.stringify(data);\n\n    switch (this.mode) {\n      case \"local\":\n        localStorage.setItem(id, data);\n        break;\n\n      case \"cookie\":\n        var expireDate = new Date();\n        expireDate.setDate(expireDate.getDate() + 10000); //save cookie\n\n        document.cookie = id + \"=\" + data + \"; expires=\" + expireDate.toUTCString();\n        break;\n\n      default:\n        console.warn(\"Persistance Save Error - invalid mode selected\", this.mode);\n    }\n  }; //build premission list\n\n\n  Persistence.prototype.parseColumns = function (columns) {\n    var self = this,\n        definitions = [];\n    columns.forEach(function (column) {\n      var def = {};\n\n      if (column.isGroup) {\n        def.title = column.getDefinition().title;\n        def.columns = self.parseColumns(column.getColumns());\n      } else {\n        def.title = column.getDefinition().title;\n        def.field = column.getField();\n        def.width = column.getWidth();\n        def.visible = column.visible;\n      }\n\n      definitions.push(def);\n    });\n    return definitions;\n  };\n\n  Tabulator.prototype.registerModule(\"persistence\", Persistence);\n\n  var ResizeColumns = function ResizeColumns(table) {\n    this.table = table; //hold Tabulator object\n\n    this.startColumn = false;\n    this.startX = false;\n    this.startWidth = false;\n    this.handle = null;\n    this.prevHandle = null;\n  };\n\n  ResizeColumns.prototype.initializeColumn = function (type, column, element) {\n    var self = this,\n        variableHeight = false,\n        mode = this.table.options.resizableColumns; //set column resize mode\n\n    if (type === \"header\") {\n      variableHeight = column.definition.formatter == \"textarea\" || column.definition.variableHeight;\n      column.modules.resize = {\n        variableHeight: variableHeight\n      };\n    }\n\n    if (mode === true || mode == type) {\n      var handle = document.createElement('div');\n      handle.className = \"tabulator-col-resize-handle\";\n      var prevHandle = document.createElement('div');\n      prevHandle.className = \"tabulator-col-resize-handle prev\";\n      handle.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n      });\n      handle.addEventListener(\"mousedown\", function (e) {\n        var nearestColumn = column.getLastColumn();\n\n        if (nearestColumn && self._checkResizability(nearestColumn)) {\n          self.startColumn = column;\n\n          self._mouseDown(e, nearestColumn);\n        }\n      }); //reszie column on  double click\n\n      handle.addEventListener(\"dblclick\", function (e) {\n        if (self._checkResizability(column)) {\n          column.reinitializeWidth(true);\n        }\n      });\n      prevHandle.addEventListener(\"click\", function (e) {\n        e.stopPropagation();\n      });\n      prevHandle.addEventListener(\"mousedown\", function (e) {\n        var nearestColumn, colIndex, prevColumn;\n        nearestColumn = column.getFirstColumn();\n\n        if (nearestColumn) {\n          colIndex = self.table.columnManager.findColumnIndex(nearestColumn);\n          prevColumn = colIndex > 0 ? self.table.columnManager.getColumnByIndex(colIndex - 1) : false;\n\n          if (prevColumn && self._checkResizability(prevColumn)) {\n            self.startColumn = column;\n\n            self._mouseDown(e, prevColumn);\n          }\n        }\n      }); //resize column on double click\n\n      prevHandle.addEventListener(\"dblclick\", function (e) {\n        var nearestColumn, colIndex, prevColumn;\n        nearestColumn = column.getFirstColumn();\n\n        if (nearestColumn) {\n          colIndex = self.table.columnManager.findColumnIndex(nearestColumn);\n          prevColumn = colIndex > 0 ? self.table.columnManager.getColumnByIndex(colIndex - 1) : false;\n\n          if (prevColumn && self._checkResizability(prevColumn)) {\n            prevColumn.reinitializeWidth(true);\n          }\n        }\n      });\n      element.appendChild(handle);\n      element.appendChild(prevHandle);\n    }\n  };\n\n  ResizeColumns.prototype._checkResizability = function (column) {\n    return typeof column.definition.resizable != \"undefined\" ? column.definition.resizable : this.table.options.resizableColumns;\n  };\n\n  ResizeColumns.prototype._mouseDown = function (e, column) {\n    var self = this;\n    self.table.element.classList.add(\"tabulator-block-select\");\n\n    function mouseMove(e) {\n      column.setWidth(self.startWidth + (e.screenX - self.startX));\n\n      if (!self.table.browserSlow && column.modules.resize && column.modules.resize.variableHeight) {\n        column.checkCellHeights();\n      }\n    }\n\n    function mouseUp(e) {\n      //block editor from taking action while resizing is taking place\n      if (self.startColumn.modules.edit) {\n        self.startColumn.modules.edit.blocked = false;\n      }\n\n      if (self.table.browserSlow && column.modules.resize && column.modules.resize.variableHeight) {\n        column.checkCellHeights();\n      }\n\n      document.body.removeEventListener(\"mouseup\", mouseUp);\n      document.body.removeEventListener(\"mousemove\", mouseMove);\n      self.table.element.classList.remove(\"tabulator-block-select\");\n\n      if (self.table.options.persistentLayout && self.table.modExists(\"persistence\", true)) {\n        self.table.modules.persistence.save(\"columns\");\n      }\n\n      self.table.options.columnResized.call(self.table, self.startColumn.getComponent());\n    }\n\n    e.stopPropagation(); //prevent resize from interfereing with movable columns\n    //block editor from taking action while resizing is taking place\n\n    if (self.startColumn.modules.edit) {\n      self.startColumn.modules.edit.blocked = true;\n    }\n\n    self.startX = e.screenX;\n    self.startWidth = column.getWidth();\n    document.body.addEventListener(\"mousemove\", mouseMove);\n    document.body.addEventListener(\"mouseup\", mouseUp);\n  };\n\n  Tabulator.prototype.registerModule(\"resizeColumns\", ResizeColumns);\n\n  var ResizeRows = function ResizeRows(table) {\n    this.table = table; //hold Tabulator object\n\n    this.startColumn = false;\n    this.startY = false;\n    this.startHeight = false;\n    this.handle = null;\n    this.prevHandle = null;\n  };\n\n  ResizeRows.prototype.initializeRow = function (row) {\n    var self = this,\n        rowEl = row.getElement();\n    var handle = document.createElement('div');\n    handle.className = \"tabulator-row-resize-handle\";\n    var prevHandle = document.createElement('div');\n    prevHandle.className = \"tabulator-row-resize-handle prev\";\n    handle.addEventListener(\"click\", function (e) {\n      e.stopPropagation();\n    });\n    handle.addEventListener(\"mousedown\", function (e) {\n      self.startRow = row;\n\n      self._mouseDown(e, row);\n    });\n    prevHandle.addEventListener(\"click\", function (e) {\n      e.stopPropagation();\n    });\n    prevHandle.addEventListener(\"mousedown\", function (e) {\n      var prevRow = self.table.rowManager.prevDisplayRow(row);\n\n      if (prevRow) {\n        self.startRow = prevRow;\n\n        self._mouseDown(e, prevRow);\n      }\n    });\n    rowEl.appendChild(handle);\n    rowEl.appendChild(prevHandle);\n  };\n\n  ResizeRows.prototype._mouseDown = function (e, row) {\n    var self = this;\n    self.table.element.classList.add(\"tabulator-block-select\");\n\n    function mouseMove(e) {\n      row.setHeight(self.startHeight + (e.screenY - self.startY));\n    }\n\n    function mouseUp(e) {\n      // //block editor from taking action while resizing is taking place\n      // if(self.startColumn.modules.edit){\n      // \tself.startColumn.modules.edit.blocked = false;\n      // }\n      document.body.removeEventListener(\"mouseup\", mouseMove);\n      document.body.removeEventListener(\"mousemove\", mouseMove);\n      self.table.element.classList.remove(\"tabulator-block-select\");\n      self.table.options.rowResized.call(this.table, row.getComponent());\n    }\n\n    e.stopPropagation(); //prevent resize from interfereing with movable columns\n    //block editor from taking action while resizing is taking place\n    // if(self.startColumn.modules.edit){\n    // \tself.startColumn.modules.edit.blocked = true;\n    // }\n\n    self.startY = e.screenY;\n    self.startHeight = row.getHeight();\n    document.body.addEventListener(\"mousemove\", mouseMove);\n    document.body.addEventListener(\"mouseup\", mouseUp);\n  };\n\n  Tabulator.prototype.registerModule(\"resizeRows\", ResizeRows);\n\n  var ResizeTable = function ResizeTable(table) {\n    this.table = table; //hold Tabulator object\n\n    this.binding = false;\n    this.observer = false;\n  };\n\n  ResizeTable.prototype.initialize = function (row) {\n    var table = this.table,\n        observer;\n\n    if (typeof ResizeObserver !== \"undefined\" && table.rowManager.getRenderMode() === \"virtual\") {\n      this.observer = new ResizeObserver(function (entry) {\n        table.redraw();\n      });\n      this.observer.observe(table.element);\n    } else {\n      this.binding = function () {\n        table.redraw();\n      };\n\n      window.addEventListener(\"resize\", this.binding);\n    }\n  };\n\n  ResizeTable.prototype.clearBindings = function (row) {\n    if (this.binding) {\n      window.removeEventListener(\"resize\", this.binding);\n    }\n\n    if (this.observer) {\n      this.observer.unobserve(this.table.element);\n    }\n  };\n\n  Tabulator.prototype.registerModule(\"resizeTable\", ResizeTable);\n\n  var ResponsiveLayout = function ResponsiveLayout(table) {\n    this.table = table; //hold Tabulator object\n\n    this.columns = [];\n    this.hiddenColumns = [];\n    this.mode = \"\";\n    this.index = 0;\n    this.collapseFormatter = [];\n    this.collapseStartOpen = true;\n  }; //generate resposive columns list\n\n\n  ResponsiveLayout.prototype.initialize = function () {\n    var self = this,\n        columns = [];\n    this.mode = this.table.options.responsiveLayout;\n    this.collapseFormatter = this.table.options.responsiveLayoutCollapseFormatter || this.formatCollapsedData;\n    this.collapseStartOpen = this.table.options.responsiveLayoutCollapseStartOpen;\n    this.hiddenColumns = []; //detemine level of responsivity for each column\n\n    this.table.columnManager.columnsByIndex.forEach(function (column, i) {\n      if (column.modules.responsive) {\n        if (column.modules.responsive.order && column.modules.responsive.visible) {\n          column.modules.responsive.index = i;\n          columns.push(column);\n\n          if (!column.visible && self.mode === \"collapse\") {\n            self.hiddenColumns.push(column);\n          }\n        }\n      }\n    }); //sort list by responsivity\n\n    columns = columns.reverse();\n    columns = columns.sort(function (a, b) {\n      var diff = b.modules.responsive.order - a.modules.responsive.order;\n      return diff || b.modules.responsive.index - a.modules.responsive.index;\n    });\n    this.columns = columns;\n\n    if (this.mode === \"collapse\") {\n      this.generateCollapsedContent();\n    }\n  }; //define layout information\n\n\n  ResponsiveLayout.prototype.initializeColumn = function (column) {\n    var def = column.getDefinition();\n    column.modules.responsive = {\n      order: typeof def.responsive === \"undefined\" ? 1 : def.responsive,\n      visible: def.visible === false ? false : true\n    };\n  };\n\n  ResponsiveLayout.prototype.layoutRow = function (row) {\n    var rowEl = row.getElement(),\n        el = document.createElement(\"div\");\n    el.classList.add(\"tabulator-responsive-collapse\");\n\n    if (!rowEl.classList.contains(\"tabulator-calcs\")) {\n      row.modules.responsiveLayout = {\n        element: el\n      };\n\n      if (!this.collapseStartOpen) {\n        el.style.display = 'none';\n      }\n\n      rowEl.appendChild(el);\n      this.generateCollapsedRowContent(row);\n    }\n  }; //update column visibility\n\n\n  ResponsiveLayout.prototype.updateColumnVisibility = function (column, visible) {\n    var index;\n\n    if (column.modules.responsive) {\n      column.modules.responsive.visible = visible;\n      this.initialize();\n    }\n  };\n\n  ResponsiveLayout.prototype.hideColumn = function (column) {\n    column.hide(false, true);\n\n    if (this.mode === \"collapse\") {\n      this.hiddenColumns.unshift(column);\n      this.generateCollapsedContent();\n    }\n  };\n\n  ResponsiveLayout.prototype.showColumn = function (column) {\n    var index;\n    column.show(false, true); //set column width to prevent calculation loops on uninitialized columns\n\n    column.setWidth(column.getWidth());\n\n    if (this.mode === \"collapse\") {\n      index = this.hiddenColumns.indexOf(column);\n\n      if (index > -1) {\n        this.hiddenColumns.splice(index, 1);\n      }\n\n      this.generateCollapsedContent();\n    }\n  }; //redraw columns to fit space\n\n\n  ResponsiveLayout.prototype.update = function () {\n    var self = this,\n        working = true;\n\n    while (working) {\n      var width = self.table.modules.layout.getMode() == \"fitColumns\" ? self.table.columnManager.getFlexBaseWidth() : self.table.columnManager.getWidth();\n      var diff = self.table.columnManager.element.clientWidth - width;\n\n      if (diff < 0) {\n        //table is too wide\n        var column = self.columns[self.index];\n\n        if (column) {\n          self.hideColumn(column);\n          self.index++;\n        } else {\n          working = false;\n        }\n      } else {\n        //table has spare space\n        var _column = self.columns[self.index - 1];\n\n        if (_column) {\n          if (diff > 0) {\n            if (diff >= _column.getWidth()) {\n              self.showColumn(_column);\n              self.index--;\n            } else {\n              working = false;\n            }\n          } else {\n            working = false;\n          }\n        } else {\n          working = false;\n        }\n      }\n\n      if (!self.table.rowManager.activeRowsCount) {\n        self.table.rowManager.renderEmptyScroll();\n      }\n    }\n  };\n\n  ResponsiveLayout.prototype.generateCollapsedContent = function () {\n    var self = this,\n        rows = this.table.rowManager.getDisplayRows();\n    rows.forEach(function (row) {\n      self.generateCollapsedRowContent(row);\n    });\n  };\n\n  ResponsiveLayout.prototype.generateCollapsedRowContent = function (row) {\n    var el, contents;\n\n    if (row.modules.responsiveLayout) {\n      el = row.modules.responsiveLayout.element;\n\n      while (el.firstChild) {\n        el.removeChild(el.firstChild);\n      }\n\n      contents = this.collapseFormatter(this.generateCollapsedRowData(row));\n\n      if (contents) {\n        el.appendChild(contents);\n      }\n    }\n  };\n\n  ResponsiveLayout.prototype.generateCollapsedRowData = function (row) {\n    var self = this,\n        data = row.getData(),\n        output = {},\n        mockCellComponent;\n    this.hiddenColumns.forEach(function (column) {\n      var value = column.getFieldValue(data);\n\n      if (column.definition.title && column.field) {\n        if (column.modules.format && self.table.options.responsiveLayoutCollapseUseFormatters) {\n          mockCellComponent = {\n            value: false,\n            data: {},\n            getValue: function getValue() {\n              return value;\n            },\n            getData: function getData() {\n              return data;\n            },\n            getElement: function getElement() {\n              return document.createElement(\"div\");\n            },\n            getRow: function getRow() {\n              return row.getComponent();\n            },\n            getColumn: function getColumn() {\n              return column.getComponent();\n            }\n          };\n          output[column.definition.title] = column.modules.format.formatter.call(self.table.modules.format, mockCellComponent, column.modules.format.params);\n        } else {\n          output[column.definition.title] = value;\n        }\n      }\n    });\n    return output;\n  };\n\n  ResponsiveLayout.prototype.formatCollapsedData = function (data) {\n    var list = document.createElement(\"table\"),\n        listContents = \"\";\n\n    for (var key in data) {\n      listContents += \"<tr><td><strong>\" + key + \"</strong></td><td>\" + data[key] + \"</td></tr>\";\n    }\n\n    list.innerHTML = listContents;\n    return Object.keys(data).length ? list : \"\";\n  };\n\n  Tabulator.prototype.registerModule(\"responsiveLayout\", ResponsiveLayout);\n\n  var SelectRow = function SelectRow(table) {\n    this.table = table; //hold Tabulator object\n\n    this.selecting = false; //flag selecting in progress\n\n    this.lastClickedRow = false; //last clicked row\n\n    this.selectPrev = []; //hold previously selected element for drag drop selection\n\n    this.selectedRows = []; //hold selected rows\n  };\n\n  SelectRow.prototype.clearSelectionData = function (silent) {\n    this.selecting = false;\n    this.lastClickedRow = false;\n    this.selectPrev = [];\n    this.selectedRows = [];\n\n    if (!silent) {\n      this._rowSelectionChanged();\n    }\n  };\n\n  SelectRow.prototype.initializeRow = function (row) {\n    var self = this,\n        element = row.getElement(); // trigger end of row selection\n\n    var endSelect = function endSelect() {\n      setTimeout(function () {\n        self.selecting = false;\n      }, 50);\n      document.body.removeEventListener(\"mouseup\", endSelect);\n    };\n\n    row.modules.select = {\n      selected: false\n    }; //set row selection class\n\n    if (self.table.options.selectableCheck.call(this.table, row.getComponent())) {\n      element.classList.add(\"tabulator-selectable\");\n      element.classList.remove(\"tabulator-unselectable\");\n\n      if (self.table.options.selectable && self.table.options.selectable != \"highlight\") {\n        if (self.table.options.selectableRangeMode && self.table.options.selectableRangeMode === \"click\") {\n          element.addEventListener(\"click\", function (e) {\n            if (e.shiftKey) {\n              self.lastClickedRow = self.lastClickedRow || row;\n              var lastClickedRowIdx = self.table.rowManager.getDisplayRowIndex(self.lastClickedRow);\n              var rowIdx = self.table.rowManager.getDisplayRowIndex(row);\n              var fromRowIdx = lastClickedRowIdx <= rowIdx ? lastClickedRowIdx : rowIdx;\n              var toRowIdx = lastClickedRowIdx >= rowIdx ? lastClickedRowIdx : rowIdx;\n              var rows = self.table.rowManager.getDisplayRows().slice(0);\n              var toggledRows = rows.splice(fromRowIdx, toRowIdx - fromRowIdx + 1);\n\n              if (e.ctrlKey) {\n                toggledRows.forEach(function (toggledRow) {\n                  if (toggledRow !== self.lastClickedRow) {\n                    self.toggleRow(toggledRow);\n                  }\n                });\n                self.lastClickedRow = row;\n              } else {\n                self.deselectRows();\n                self.selectRows(toggledRows);\n              }\n            } else if (e.ctrlKey) {\n              self.toggleRow(row);\n              self.lastClickedRow = row;\n            } else {\n              self.deselectRows();\n              self.selectRows(row);\n              self.lastClickedRow = row;\n            }\n          });\n        } else {\n          element.addEventListener(\"click\", function (e) {\n            if (!self.selecting) {\n              self.toggleRow(row);\n            }\n          });\n          element.addEventListener(\"mousedown\", function (e) {\n            if (e.shiftKey) {\n              self.selecting = true;\n              self.selectPrev = [];\n              document.body.addEventListener(\"mouseup\", endSelect);\n              document.body.addEventListener(\"keyup\", endSelect);\n              self.toggleRow(row);\n              return false;\n            }\n          });\n          element.addEventListener(\"mouseenter\", function (e) {\n            if (self.selecting) {\n              self.toggleRow(row);\n\n              if (self.selectPrev[1] == row) {\n                self.toggleRow(self.selectPrev[0]);\n              }\n            }\n          });\n          element.addEventListener(\"mouseout\", function (e) {\n            if (self.selecting) {\n              self.selectPrev.unshift(row);\n            }\n          });\n        }\n      }\n    } else {\n      element.classList.add(\"tabulator-unselectable\");\n      element.classList.remove(\"tabulator-selectable\");\n    }\n  }; //toggle row selection\n\n\n  SelectRow.prototype.toggleRow = function (row) {\n    if (this.table.options.selectableCheck.call(this.table, row.getComponent())) {\n      if (row.modules.select.selected) {\n        this._deselectRow(row);\n      } else {\n        this._selectRow(row);\n      }\n    }\n  }; //select a number of rows\n\n\n  SelectRow.prototype.selectRows = function (rows) {\n    var self = this;\n\n    switch (typeof rows === 'undefined' ? 'undefined' : _typeof(rows)) {\n      case \"undefined\":\n        self.table.rowManager.rows.forEach(function (row) {\n          self._selectRow(row, false, true);\n        });\n\n        self._rowSelectionChanged();\n\n        break;\n\n      case \"boolean\":\n        if (rows === true) {\n          self.table.rowManager.activeRows.forEach(function (row) {\n            self._selectRow(row, false, true);\n          });\n\n          self._rowSelectionChanged();\n        }\n\n        break;\n\n      default:\n        if (Array.isArray(rows)) {\n          rows.forEach(function (row) {\n            self._selectRow(row);\n          });\n\n          self._rowSelectionChanged();\n        } else {\n          self._selectRow(rows);\n        }\n\n        break;\n    }\n  }; //select an individual row\n\n\n  SelectRow.prototype._selectRow = function (rowInfo, silent, force) {\n    var index; //handle max row count\n\n    if (!isNaN(this.table.options.selectable) && this.table.options.selectable !== true && !force) {\n      if (this.selectedRows.length >= this.table.options.selectable) {\n        if (this.table.options.selectableRollingSelection) {\n          this._deselectRow(this.selectedRows[0]);\n        } else {\n          return false;\n        }\n      }\n    }\n\n    var row = this.table.rowManager.findRow(rowInfo);\n\n    if (row) {\n      if (this.selectedRows.indexOf(row) == -1) {\n        row.modules.select.selected = true;\n        row.getElement().classList.add(\"tabulator-selected\");\n        this.selectedRows.push(row);\n\n        if (!silent) {\n          this.table.options.rowSelected.call(this.table, row.getComponent());\n\n          this._rowSelectionChanged();\n        }\n      }\n    } else {\n      if (!silent) {\n        console.warn(\"Selection Error - No such row found, ignoring selection:\" + rowInfo);\n      }\n    }\n  };\n\n  SelectRow.prototype.isRowSelected = function (row) {\n    return this.selectedRows.indexOf(row) !== -1;\n  }; //deselect a number of rows\n\n\n  SelectRow.prototype.deselectRows = function (rows) {\n    var self = this,\n        rowCount;\n\n    if (typeof rows == \"undefined\") {\n      rowCount = self.selectedRows.length;\n\n      for (var i = 0; i < rowCount; i++) {\n        self._deselectRow(self.selectedRows[0], false);\n      }\n\n      self._rowSelectionChanged();\n    } else {\n      if (Array.isArray(rows)) {\n        rows.forEach(function (row) {\n          self._deselectRow(row);\n        });\n\n        self._rowSelectionChanged();\n      } else {\n        self._deselectRow(rows);\n      }\n    }\n  }; //deselect an individual row\n\n\n  SelectRow.prototype._deselectRow = function (rowInfo, silent) {\n    var self = this,\n        row = self.table.rowManager.findRow(rowInfo),\n        index;\n\n    if (row) {\n      index = self.selectedRows.findIndex(function (selectedRow) {\n        return selectedRow == row;\n      });\n\n      if (index > -1) {\n        row.modules.select.selected = false;\n        row.getElement().classList.remove(\"tabulator-selected\");\n        self.selectedRows.splice(index, 1);\n\n        if (!silent) {\n          self.table.options.rowDeselected.call(this.table, row.getComponent());\n\n          self._rowSelectionChanged();\n        }\n      }\n    } else {\n      if (!silent) {\n        console.warn(\"Deselection Error - No such row found, ignoring selection:\" + rowInfo);\n      }\n    }\n  };\n\n  SelectRow.prototype.getSelectedData = function () {\n    var data = [];\n    this.selectedRows.forEach(function (row) {\n      data.push(row.getData());\n    });\n    return data;\n  };\n\n  SelectRow.prototype.getSelectedRows = function () {\n    var rows = [];\n    this.selectedRows.forEach(function (row) {\n      rows.push(row.getComponent());\n    });\n    return rows;\n  };\n\n  SelectRow.prototype._rowSelectionChanged = function () {\n    this.table.options.rowSelectionChanged.call(this.table, this.getSelectedData(), this.getSelectedRows());\n  };\n\n  Tabulator.prototype.registerModule(\"selectRow\", SelectRow);\n\n  var Sort = function Sort(table) {\n    this.table = table; //hold Tabulator object\n\n    this.sortList = []; //holder current sort\n\n    this.changed = false; //has the sort changed since last render\n  }; //initialize column header for sorting\n\n\n  Sort.prototype.initializeColumn = function (column, content) {\n    var self = this,\n        sorter = false,\n        colEl,\n        arrowEl;\n\n    switch (_typeof(column.definition.sorter)) {\n      case \"string\":\n        if (self.sorters[column.definition.sorter]) {\n          sorter = self.sorters[column.definition.sorter];\n        } else {\n          console.warn(\"Sort Error - No such sorter found: \", column.definition.sorter);\n        }\n\n        break;\n\n      case \"function\":\n        sorter = column.definition.sorter;\n        break;\n    }\n\n    column.modules.sort = {\n      sorter: sorter,\n      dir: \"none\",\n      params: column.definition.sorterParams || {},\n      startingDir: column.definition.headerSortStartingDir || \"asc\"\n    };\n\n    if (column.definition.headerSort !== false) {\n      colEl = column.getElement();\n      colEl.classList.add(\"tabulator-sortable\");\n      arrowEl = document.createElement(\"div\");\n      arrowEl.classList.add(\"tabulator-arrow\"); //create sorter arrow\n\n      content.appendChild(arrowEl); //sort on click\n\n      colEl.addEventListener(\"click\", function (e) {\n        var dir = \"\",\n            sorters = [],\n            match = false;\n\n        if (column.modules.sort) {\n          dir = column.modules.sort.dir == \"asc\" ? \"desc\" : column.modules.sort.dir == \"desc\" ? \"asc\" : column.modules.sort.startingDir;\n\n          if (self.table.options.columnHeaderSortMulti && (e.shiftKey || e.ctrlKey)) {\n            sorters = self.getSort();\n            match = sorters.findIndex(function (sorter) {\n              return sorter.field === column.getField();\n            });\n\n            if (match > -1) {\n              sorters[match].dir = sorters[match].dir == \"asc\" ? \"desc\" : \"asc\";\n\n              if (match != sorters.length - 1) {\n                sorters.push(sorters.splice(match, 1)[0]);\n              }\n            } else {\n              sorters.push({\n                column: column,\n                dir: dir\n              });\n            } //add to existing sort\n\n\n            self.setSort(sorters);\n          } else {\n            //sort by column only\n            self.setSort(column, dir);\n          }\n\n          self.table.rowManager.sorterRefresh();\n        }\n      });\n    }\n  }; //check if the sorters have changed since last use\n\n\n  Sort.prototype.hasChanged = function () {\n    var changed = this.changed;\n    this.changed = false;\n    return changed;\n  }; //return current sorters\n\n\n  Sort.prototype.getSort = function () {\n    var self = this,\n        sorters = [];\n    self.sortList.forEach(function (item) {\n      if (item.column) {\n        sorters.push({\n          column: item.column.getComponent(),\n          field: item.column.getField(),\n          dir: item.dir\n        });\n      }\n    });\n    return sorters;\n  }; //change sort list and trigger sort\n\n\n  Sort.prototype.setSort = function (sortList, dir) {\n    var self = this,\n        newSortList = [];\n\n    if (!Array.isArray(sortList)) {\n      sortList = [{\n        column: sortList,\n        dir: dir\n      }];\n    }\n\n    sortList.forEach(function (item) {\n      var column;\n      column = self.table.columnManager.findColumn(item.column);\n\n      if (column) {\n        item.column = column;\n        newSortList.push(item);\n        self.changed = true;\n      } else {\n        console.warn(\"Sort Warning - Sort field does not exist and is being ignored: \", item.column);\n      }\n    });\n    self.sortList = newSortList;\n\n    if (this.table.options.persistentSort && this.table.modExists(\"persistence\", true)) {\n      this.table.modules.persistence.save(\"sort\");\n    }\n  }; //clear sorters\n\n\n  Sort.prototype.clear = function () {\n    this.setSort([]);\n  }; //find appropriate sorter for column\n\n\n  Sort.prototype.findSorter = function (column) {\n    var row = this.table.rowManager.activeRows[0],\n        sorter = \"string\",\n        field,\n        value;\n\n    if (row) {\n      row = row.getData();\n      field = column.getField();\n\n      if (field) {\n        value = column.getFieldValue(row);\n\n        switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n          case \"undefined\":\n            sorter = \"string\";\n            break;\n\n          case \"boolean\":\n            sorter = \"boolean\";\n            break;\n\n          default:\n            if (!isNaN(value) && value !== \"\") {\n              sorter = \"number\";\n            } else {\n              if (value.match(/((^[0-9]+[a-z]+)|(^[a-z]+[0-9]+))+$/i)) {\n                sorter = \"alphanum\";\n              }\n            }\n\n            break;\n        }\n      }\n    }\n\n    return this.sorters[sorter];\n  }; //work through sort list sorting data\n\n\n  Sort.prototype.sort = function () {\n    var self = this,\n        lastSort,\n        sortList;\n    sortList = this.table.options.sortOrderReverse ? self.sortList.slice().reverse() : self.sortList;\n\n    if (self.table.options.dataSorting) {\n      self.table.options.dataSorting.call(self.table, self.getSort());\n    }\n\n    self.clearColumnHeaders();\n\n    if (!self.table.options.ajaxSorting) {\n      sortList.forEach(function (item, i) {\n        if (item.column && item.column.modules.sort) {\n          //if no sorter has been defined, take a guess\n          if (!item.column.modules.sort.sorter) {\n            item.column.modules.sort.sorter = self.findSorter(item.column);\n          }\n\n          self._sortItem(item.column, item.dir, sortList, i);\n        }\n\n        self.setColumnHeader(item.column, item.dir);\n      });\n    } else {\n      sortList.forEach(function (item, i) {\n        self.setColumnHeader(item.column, item.dir);\n      });\n    }\n\n    if (self.table.options.dataSorted) {\n      self.table.options.dataSorted.call(self.table, self.getSort(), self.table.rowManager.getComponents(true));\n    }\n  }; //clear sort arrows on columns\n\n\n  Sort.prototype.clearColumnHeaders = function () {\n    this.table.columnManager.getRealColumns().forEach(function (column) {\n      if (column.modules.sort) {\n        column.modules.sort.dir = \"none\";\n        column.getElement().setAttribute(\"aria-sort\", \"none\");\n      }\n    });\n  }; //set the column header sort direction\n\n\n  Sort.prototype.setColumnHeader = function (column, dir) {\n    column.modules.sort.dir = dir;\n    column.getElement().setAttribute(\"aria-sort\", dir);\n  }; //sort each item in sort list\n\n\n  Sort.prototype._sortItem = function (column, dir, sortList, i) {\n    var self = this;\n    var activeRows = self.table.rowManager.activeRows;\n    var params = typeof column.modules.sort.params === \"function\" ? column.modules.sort.params(column.getComponent(), dir) : column.modules.sort.params;\n    activeRows.sort(function (a, b) {\n      var result = self._sortRow(a, b, column, dir, params); //if results match recurse through previous searchs to be sure\n\n\n      if (result === 0 && i) {\n        for (var j = i - 1; j >= 0; j--) {\n          result = self._sortRow(a, b, sortList[j].column, sortList[j].dir, params);\n\n          if (result !== 0) {\n            break;\n          }\n        }\n      }\n\n      return result;\n    });\n  }; //process individual rows for a sort function on active data\n\n\n  Sort.prototype._sortRow = function (a, b, column, dir, params) {\n    var el1Comp, el2Comp, colComp; //switch elements depending on search direction\n\n    var el1 = dir == \"asc\" ? a : b;\n    var el2 = dir == \"asc\" ? b : a;\n    a = column.getFieldValue(el1.getData());\n    b = column.getFieldValue(el2.getData());\n    a = typeof a !== \"undefined\" ? a : \"\";\n    b = typeof b !== \"undefined\" ? b : \"\";\n    el1Comp = el1.getComponent();\n    el2Comp = el2.getComponent();\n    return column.modules.sort.sorter.call(this, a, b, el1Comp, el2Comp, column.getComponent(), dir, params);\n  }; //default data sorters\n\n\n  Sort.prototype.sorters = {\n    //sort numbers\n    number: function number(a, b, aRow, bRow, column, dir, params) {\n      var alignEmptyValues = params.alignEmptyValues;\n      var emptyAlign = 0;\n      a = parseFloat(String(a).replace(\",\", \"\"));\n      b = parseFloat(String(b).replace(\",\", \"\")); //handle non numeric values\n\n      if (isNaN(a)) {\n        emptyAlign = isNaN(b) ? 0 : -1;\n      } else if (isNaN(b)) {\n        emptyAlign = 1;\n      } else {\n        //compare valid values\n        return a - b;\n      } //fix empty values in position\n\n\n      if (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n        emptyAlign *= -1;\n      }\n\n      return emptyAlign;\n    },\n    //sort strings\n    string: function string(a, b, aRow, bRow, column, dir, params) {\n      var alignEmptyValues = params.alignEmptyValues;\n      var emptyAlign = 0;\n      var locale; //handle empty values\n\n      if (!a) {\n        emptyAlign = !b ? 0 : -1;\n      } else if (!b) {\n        emptyAlign = 1;\n      } else {\n        //compare valid values\n        switch (_typeof(params.locale)) {\n          case \"boolean\":\n            if (params.locale) {\n              locale = this.table.modules.localize.getLocale();\n            }\n\n            break;\n\n          case \"string\":\n            locale = params.locale;\n            break;\n        }\n\n        return String(a).toLowerCase().localeCompare(String(b).toLowerCase(), locale);\n      } //fix empty values in position\n\n\n      if (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n        emptyAlign *= -1;\n      }\n\n      return emptyAlign;\n    },\n    //sort date\n    date: function date(a, b, aRow, bRow, column, dir, params) {\n      if (!params.format) {\n        params.format = \"DD/MM/YYYY\";\n      }\n\n      return this.sorters.datetime.call(this, a, b, aRow, bRow, column, dir, params);\n    },\n    //sort hh:mm formatted times\n    time: function time(a, b, aRow, bRow, column, dir, params) {\n      if (!params.format) {\n        params.format = \"hh:mm\";\n      }\n\n      return this.sorters.datetime.call(this, a, b, aRow, bRow, column, dir, params);\n    },\n    //sort datetime\n    datetime: function datetime(a, b, aRow, bRow, column, dir, params) {\n      var format = params.format || \"DD/MM/YYYY hh:mm:ss\",\n          alignEmptyValues = params.alignEmptyValues,\n          emptyAlign = 0;\n\n      if (typeof moment != \"undefined\") {\n        a = moment(a, format);\n        b = moment(b, format);\n\n        if (!a.isValid()) {\n          emptyAlign = !b.isValid() ? 0 : -1;\n        } else if (!b.isValid()) {\n          emptyAlign = 1;\n        } else {\n          //compare valid values\n          return a - b;\n        } //fix empty values in position\n\n\n        if (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n          emptyAlign *= -1;\n        }\n\n        return emptyAlign;\n      } else {\n        console.error(\"Sort Error - 'datetime' sorter is dependant on moment.js\");\n      }\n    },\n    //sort booleans\n    boolean: function boolean(a, b, aRow, bRow, column, dir, params) {\n      var el1 = a === true || a === \"true\" || a === \"True\" || a === 1 ? 1 : 0;\n      var el2 = b === true || b === \"true\" || b === \"True\" || b === 1 ? 1 : 0;\n      return el1 - el2;\n    },\n    //sort if element contains any data\n    array: function array(a, b, aRow, bRow, column, dir, params) {\n      var el1 = 0;\n      var el2 = 0;\n      var type = params.type || \"length\";\n      var alignEmptyValues = params.alignEmptyValues;\n      var emptyAlign = 0;\n\n      function calc(value) {\n        switch (type) {\n          case \"length\":\n            return value.length;\n            break;\n\n          case \"sum\":\n            return value.reduce(function (c, d) {\n              return c + d;\n            });\n            break;\n\n          case \"max\":\n            return Math.max.apply(null, value);\n            break;\n\n          case \"min\":\n            return Math.min.apply(null, value);\n            break;\n\n          case \"avg\":\n            return value.reduce(function (c, d) {\n              return c + d;\n            }) / value.length;\n            break;\n        }\n      } //handle non array values\n\n\n      if (!Array.isArray(a)) {\n        alignEmptyValues = !Array.isArray(b) ? 0 : -1;\n      } else if (!Array.isArray(b)) {\n        alignEmptyValues = 1;\n      } else {\n        //compare valid values\n        el1 = a ? calc(a) : 0;\n        el2 = b ? calc(b) : 0;\n        return el1 - el2;\n      } //fix empty values in position\n\n\n      if (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n        emptyAlign *= -1;\n      }\n\n      return emptyAlign;\n    },\n    //sort if element contains any data\n    exists: function exists(a, b, aRow, bRow, column, dir, params) {\n      var el1 = typeof a == \"undefined\" ? 0 : 1;\n      var el2 = typeof b == \"undefined\" ? 0 : 1;\n      return el1 - el2;\n    },\n    //sort alpha numeric strings\n    alphanum: function alphanum(as, bs, aRow, bRow, column, dir, params) {\n      var a,\n          b,\n          a1,\n          b1,\n          i = 0,\n          L,\n          rx = /(\\d+)|(\\D+)/g,\n          rd = /\\d/;\n      var alignEmptyValues = params.alignEmptyValues;\n      var emptyAlign = 0; //handle empty values\n\n      if (!as && as !== 0) {\n        emptyAlign = !bs && bs !== 0 ? 0 : -1;\n      } else if (!bs && bs !== 0) {\n        emptyAlign = 1;\n      } else {\n        if (isFinite(as) && isFinite(bs)) return as - bs;\n        a = String(as).toLowerCase();\n        b = String(bs).toLowerCase();\n        if (a === b) return 0;\n        if (!(rd.test(a) && rd.test(b))) return a > b ? 1 : -1;\n        a = a.match(rx);\n        b = b.match(rx);\n        L = a.length > b.length ? b.length : a.length;\n\n        while (i < L) {\n          a1 = a[i];\n          b1 = b[i++];\n\n          if (a1 !== b1) {\n            if (isFinite(a1) && isFinite(b1)) {\n              if (a1.charAt(0) === \"0\") a1 = \".\" + a1;\n              if (b1.charAt(0) === \"0\") b1 = \".\" + b1;\n              return a1 - b1;\n            } else return a1 > b1 ? 1 : -1;\n          }\n        }\n\n        return a.length > b.length;\n      } //fix empty values in position\n\n\n      if (alignEmptyValues === \"top\" && dir === \"desc\" || alignEmptyValues === \"bottom\" && dir === \"asc\") {\n        emptyAlign *= -1;\n      }\n\n      return emptyAlign;\n    }\n  };\n  Tabulator.prototype.registerModule(\"sort\", Sort);\n\n  var Validate = function Validate(table) {\n    this.table = table;\n  }; //validate\n\n\n  Validate.prototype.initializeColumn = function (column) {\n    var self = this,\n        config = [],\n        validator;\n\n    if (column.definition.validator) {\n      if (Array.isArray(column.definition.validator)) {\n        column.definition.validator.forEach(function (item) {\n          validator = self._extractValidator(item);\n\n          if (validator) {\n            config.push(validator);\n          }\n        });\n      } else {\n        validator = this._extractValidator(column.definition.validator);\n\n        if (validator) {\n          config.push(validator);\n        }\n      }\n\n      column.modules.validate = config.length ? config : false;\n    }\n  };\n\n  Validate.prototype._extractValidator = function (value) {\n    var parts, type, params;\n\n    switch (typeof value === 'undefined' ? 'undefined' : _typeof(value)) {\n      case \"string\":\n        parts = value.split(\":\", 2);\n        type = parts.shift();\n        params = parts[0];\n        return this._buildValidator(type, params);\n        break;\n\n      case \"function\":\n        return this._buildValidator(value);\n        break;\n\n      case \"object\":\n        return this._buildValidator(value.type, value.parameters);\n        break;\n    }\n  };\n\n  Validate.prototype._buildValidator = function (type, params) {\n    var func = typeof type == \"function\" ? type : this.validators[type];\n\n    if (!func) {\n      console.warn(\"Validator Setup Error - No matching validator found:\", type);\n      return false;\n    } else {\n      return {\n        type: typeof type == \"function\" ? \"function\" : type,\n        func: func,\n        params: params\n      };\n    }\n  };\n\n  Validate.prototype.validate = function (validators, cell, value) {\n    var self = this,\n        valid = [];\n\n    if (validators) {\n      validators.forEach(function (item) {\n        if (!item.func.call(self, cell, value, item.params)) {\n          valid.push({\n            type: item.type,\n            parameters: item.params\n          });\n        }\n      });\n    }\n\n    return valid.length ? valid : true;\n  };\n\n  Validate.prototype.validators = {\n    //is integer\n    integer: function integer(cell, value, parameters) {\n      if (value === \"\" || value === null || typeof value === \"undefined\") {\n        return true;\n      }\n\n      value = Number(value);\n      return typeof value === 'number' && isFinite(value) && Math.floor(value) === value;\n    },\n    //is float\n    float: function float(cell, value, parameters) {\n      if (value === \"\" || value === null || typeof value === \"undefined\") {\n        return true;\n      }\n\n      value = Number(value);\n      return typeof value === 'number' && isFinite(value) && value % 1 !== 0;\n    },\n    //must be a number\n    numeric: function numeric(cell, value, parameters) {\n      if (value === \"\" || value === null || typeof value === \"undefined\") {\n        return true;\n      }\n\n      return !isNaN(value);\n    },\n    //must be a string\n    string: function string(cell, value, parameters) {\n      if (value === \"\" || value === null || typeof value === \"undefined\") {\n        return true;\n      }\n\n      return isNaN(value);\n    },\n    //maximum value\n    max: function max(cell, value, parameters) {\n      if (value === \"\" || value === null || typeof value === \"undefined\") {\n        return true;\n      }\n\n      return parseFloat(value) <= parameters;\n    },\n    //minimum value\n    min: function min(cell, value, parameters) {\n      if (value === \"\" || value === null || typeof value === \"undefined\") {\n        return true;\n      }\n\n      return parseFloat(value) >= parameters;\n    },\n    //minimum string length\n    minLength: function minLength(cell, value, parameters) {\n      if (value === \"\" || value === null || typeof value === \"undefined\") {\n        return true;\n      }\n\n      return String(value).length >= parameters;\n    },\n    //maximum string length\n    maxLength: function maxLength(cell, value, parameters) {\n      if (value === \"\" || value === null || typeof value === \"undefined\") {\n        return true;\n      }\n\n      return String(value).length <= parameters;\n    },\n    //in provided value list\n    in: function _in(cell, value, parameters) {\n      if (value === \"\" || value === null || typeof value === \"undefined\") {\n        return true;\n      }\n\n      if (typeof parameters == \"string\") {\n        parameters = parameters.split(\"|\");\n      }\n\n      return value === \"\" || parameters.indexOf(value) > -1;\n    },\n    //must match provided regex\n    regex: function regex(cell, value, parameters) {\n      if (value === \"\" || value === null || typeof value === \"undefined\") {\n        return true;\n      }\n\n      var reg = new RegExp(parameters);\n      return reg.test(value);\n    },\n    //value must be unique in this column\n    unique: function unique(cell, value, parameters) {\n      if (value === \"\" || value === null || typeof value === \"undefined\") {\n        return true;\n      }\n\n      var unique = true;\n      var cellData = cell.getData();\n\n      var column = cell.getColumn()._getSelf();\n\n      this.table.rowManager.rows.forEach(function (row) {\n        var data = row.getData();\n\n        if (data !== cellData) {\n          if (value == column.getFieldValue(data)) {\n            unique = false;\n          }\n        }\n      });\n      return unique;\n    },\n    //must have a value\n    required: function required(cell, value, parameters) {\n      return value !== \"\" & value !== null && typeof value !== \"undefined\";\n    }\n  };\n  Tabulator.prototype.registerModule(\"validate\", Validate);\n  return Tabulator;\n});","map":null,"metadata":{},"sourceType":"script"}